{"version":3,"file":"static/js/278.53bf62e5.chunk.js","mappings":"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","sources":["services/firestore.js","utils/notifications.js","utils/dateUtils.js","utils/excelExport.js","utils/pdfExport.js","components/icons/Icon.js","components/Leaderboard/Leaderboard.js","components/Dashboard/AdminDashboard/AdminDashboard.js","components/Dashboard/HeadDashboard/HeadDashboard.js","components/Dashboard/UserDashboard/UserDashboard.js","components/Dashboard/Dashboard.js","components/Blocked/Blocked.js","components/BlockedSubmissionCard/BlockedSubmissionCard.js","components/Loading/Loading.js"],"sourcesContent":["import { addDoc, arrayUnion, collection, doc, getDoc, getDocs, increment, serverTimestamp, setDoc, updateDoc } from 'firebase/firestore';\n\nimport { db } from '../firebase';\n\n// Tests\nexport async function fetchTestWithQuestions(testId) {\n  const testRef = doc(db, 'tests', testId);\n  const testSnap = await getDoc(testRef);\n  if (!testSnap.exists()) {return null;}\n  const qSnap = await getDocs(collection(testRef, 'questions'));\n  const questions = qSnap.docs.map(d => {\n    const questionData = d.data();\n    return { \n      id: questionData.questionId || d.id, // Use questionId from data, fallback to doc id\n      ...questionData \n    };\n  });\n  return { id: testSnap.id, ...testSnap.data(), questions };\n}\n\n// Paste logs\nexport async function logPaste({ candidateId, testId, questionId, pastedText }) {\n  await addDoc(collection(db, 'pasteLogs'), {\n    candidateId,\n    testId,\n    questionId,\n    pastedText,\n    timestamp: serverTimestamp(),\n  });\n}\n\n// Tab switch logs: keep a doc per candidate+test and update counts\nexport async function logTabSwitch({ candidateId, testId, status }) {\n  const key = `${candidateId}_${testId}`;\n  const ref = doc(db, 'tabSwitchLogs', key);\n  const snap = await getDoc(ref);\n  const currentTime = new Date().toISOString(); // Use regular timestamp instead of serverTimestamp()\n  \n  if (!snap.exists()) {\n    await setDoc(ref, {\n      candidateId,\n      testId,\n      status,\n      switchCount: 1,\n      timestamps: [currentTime],\n      lastUpdated: serverTimestamp(),\n    });\n  } else {\n    await updateDoc(ref, {\n      status,\n      switchCount: increment(1),\n      timestamps: arrayUnion(currentTime),\n      lastUpdated: serverTimestamp(),\n    });\n  }\n}\n\n// User profile helpers\nexport async function getUserProfile(uid) {\n  const ref = doc(db, 'users', uid);\n  const snap = await getDoc(ref);\n  return snap.exists() ? { id: snap.id, ...snap.data() } : null;\n}\n","/**\n * Notification utility to replace alert() calls\n * Provides better UX with toast notifications or proper error handling\n */\n\n/**\n * Show success notification\n * @param {string} message - Success message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showSuccess = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical success messages that require user acknowledgment\n  if (message.includes('exported') || message.includes('submitted') || message.includes('updated')) {\n    alert(message);\n  }\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show error notification\n * @param {string} message - Error message to display\n * @param {Error} error - Optional error object for logging\n * @param {Function} callback - Optional callback after notification\n */\nexport const showError = (message, error = null, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical errors that require immediate user attention\n  alert(message);\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show warning notification\n * @param {string} message - Warning message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showWarning = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show info notification\n * @param {string} message - Info message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showInfo = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Confirm action with user\n * @param {string} message - Confirmation message\n * @param {Function} onConfirm - Callback if user confirms\n * @param {Function} onCancel - Callback if user cancels\n */\nexport const confirmAction = (message, onConfirm = null, onCancel = null) => {\n  const result = window.confirm(message);\n  \n  if (result && onConfirm) {\n    onConfirm();\n  } else if (!result && onCancel) {\n    onCancel();\n  }\n  \n  return result;\n};\n","/**\n * Date and time utility functions\n * Centralized date formatting to avoid code duplication\n */\n\n/**\n * Format a timestamp to a localized date and time string\n * @param {*} timestamp - Firestore timestamp, Date object, or timestamp\n * @returns {string} - Formatted date string or 'N/A' if invalid\n */\nexport const formatDateTime = (timestamp) => {\n  if (!timestamp) {return 'N/A';}\n  \n  // Handle Firestore timestamp\n  if (timestamp.toDate && typeof timestamp.toDate === 'function') {\n    return timestamp.toDate().toLocaleString();\n  }\n  \n  // Handle timestamp with seconds property (Firestore format)\n  if (timestamp.seconds) {\n    return new Date(timestamp.seconds * 1000).toLocaleString();\n  }\n  \n  // Handle regular Date object or timestamp\n  const date = new Date(timestamp);\n  return isNaN(date.getTime()) ? 'N/A' : date.toLocaleString();\n};\n\n/**\n * Format a timestamp to a localized date string only\n * @param {*} timestamp - Firestore timestamp, Date object, or timestamp\n * @returns {string} - Formatted date string or 'N/A' if invalid\n */\nexport const formatDate = (timestamp) => {\n  if (!timestamp) {return 'N/A';}\n  \n  // Handle Firestore timestamp\n  if (timestamp.toDate && typeof timestamp.toDate === 'function') {\n    return timestamp.toDate().toLocaleDateString();\n  }\n  \n  // Handle timestamp with seconds property (Firestore format)\n  if (timestamp.seconds) {\n    return new Date(timestamp.seconds * 1000).toLocaleDateString();\n  }\n  \n  // Handle regular Date object or timestamp\n  const date = new Date(timestamp);\n  return isNaN(date.getTime()) ? 'N/A' : date.toLocaleDateString();\n};\n\n/**\n * Format seconds into MM:SS format\n * @param {number} seconds - Number of seconds\n * @returns {string} - Formatted time string\n */\nexport const formatTime = (seconds) => {\n  if (!seconds || seconds < 0) {return '00:00';}\n  \n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  \n  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n};\n\n/**\n * Get time difference in minutes\n * @param {*} startTime - Start timestamp\n * @param {*} endTime - End timestamp\n * @returns {number} - Difference in minutes\n */\nexport const getTimeDifferenceInMinutes = (startTime, endTime) => {\n  if (!startTime || !endTime) {return 0;}\n  \n  const start = startTime.toDate ? startTime.toDate() : new Date(startTime);\n  const end = endTime.toDate ? endTime.toDate() : new Date(endTime);\n  \n  return Math.round((end - start) / (1000 * 60));\n};\n","import { doc, getDoc, collection, getDocs } from 'firebase/firestore';\nimport ExcelJS from 'exceljs';\n\nimport { db } from '../firebase';\n\nimport Logger from './logger';\nimport { showSuccess, showError } from './notifications';\n\n/**\n * Export test submissions to Excel format\n * @param {Object} params - Export parameters\n{{ ... }}\n * @param {Array} params.submissions - Array of submission objects\n * @param {Object} params.selectedTest - Test object with details\n * @param {Function} params.setLoading - Loading state setter\n * @returns {Promise<void>}\n */\nexport const exportSubmissionsToExcel = async ({ submissions, selectedTest, setLoading }) => {\n  let fileName = '';\n  try {\n    setLoading(true);\n    \n    // First, fetch the test questions to get actual question text\n    let testQuestions = [];\n    try {\n      // 1) Prefer the questions subcollection (source of truth used elsewhere in app)\n      Logger.debug('Fetching questions from subcollection');\n      const questionsSnapshot = await getDocs(collection(db, 'tests', selectedTest.id, 'questions'));\n      if (!questionsSnapshot.empty) {\n        testQuestions = questionsSnapshot.docs.map(qDoc => {\n          const data = qDoc.data();\n          return {\n            id: data.questionId || qDoc.id,\n            ...data,\n          };\n        });\n        Logger.debug('Loaded questions from subcollection', { count: testQuestions.length });\n      }\n\n      // 2) Fallback to embedded questions array on tests doc\n      if (testQuestions.length === 0) {\n        Logger.debug('Subcollection empty, trying embedded questions');\n        const testDoc = await getDoc(doc(db, 'tests', selectedTest.id));\n        if (testDoc.exists()) {\n          const testData = testDoc.data();\n          testQuestions = testData.questions || [];\n          Logger.debug('Loaded embedded questions from tests doc', { count: testQuestions.length });\n        }\n      }\n\n      // 3) Alternate collection name (legacy)\n      if (testQuestions.length === 0) {\n        Logger.debug('Trying legacy collection');\n        const altTestDoc = await getDoc(doc(db, 'test', selectedTest.id));\n        if (altTestDoc.exists()) {\n          const altTestData = altTestDoc.data();\n          testQuestions = altTestData.questions || [];\n          Logger.debug('Loaded questions from legacy collection', { count: testQuestions.length });\n        }\n      }\n\n      // 4) Fallback to selectedTest object (runtime state)\n      if (testQuestions.length === 0 && selectedTest.questions) {\n        testQuestions = selectedTest.questions;\n        Logger.debug('Loaded questions from selectedTest prop', { count: testQuestions.length });\n      }\n    } catch (error) {\n      Logger.error('Error fetching test questions', null, error);\n    }\n\n    Logger.debug('Excel export data structure', {\n      submissionCount: submissions.length,\n      hasFirstSubmission: !!submissions[0],\n      questionCount: testQuestions.length\n    });\n\n    // Fetch detailed user information and answers for each submission\n    const enrichedSubmissions = await Promise.all(\n      submissions.map(async (submission, submissionIndex) => {\n        Logger.debug(`Processing submission ${submissionIndex + 1}`, { submissionId: submission.id });\n        \n        let userInfo = {\n          fullName: submission.candidateName || 'Unknown',\n          gmail: '',\n          mobile: '',\n          year: ''\n        };\n\n        if (submission.candidateId) {\n          try {\n            const userDoc = await getDoc(doc(db, 'user', submission.candidateId));\n            if (userDoc.exists()) {\n              const userData = userDoc.data();\n              userInfo = {\n                fullName: userData.fullName || userData.name || submission.candidateName || 'Unknown',\n                gmail: userData.gmail || userData.email || '',\n                mobile: userData.mobile || userData.phone || '',\n                year: userData.year || ''\n              };\n            }\n          } catch (error) {\n            Logger.error('Error fetching user data for export', { candidateId: submission.candidateId }, error);\n          }\n        }\n\n        // Create base row data with required columns first\n        const rowData = {\n          'Student Name': userInfo.fullName,\n          'Mobile Number': userInfo.mobile,\n          'Gmail ID': userInfo.gmail,\n          'Year': userInfo.year\n        };\n\n        // Add question answers with actual question text as headers\n        Logger.debug('Processing submission answers', {\n          submissionId: submission.id || submissionIndex,\n          hasAnswers: !!submission.answers,\n          answerKeys: submission.answers ? Object.keys(submission.answers) : []\n        });\n        \n        if (submission.answers && typeof submission.answers === 'object') {\n          // Get all answer keys that are not metadata\n          const answerKeys = Object.keys(submission.answers).filter(key => \n            !key.includes('_notes') && \n            !key.includes('timestamp') && \n            !key.includes('metadata')\n          );\n          Logger.debug('Filtered answer keys', { keys: answerKeys });\n          \n          // If we have test questions, use them. Otherwise, use answer keys directly\n          if (testQuestions.length > 0) {\n            // Sort test questions by their original order to maintain sequence\n            const sortedQuestions = [...testQuestions].sort((a, b) => {\n              // Strategy 1: If questions have an 'order' or 'index' field, use that\n              if (a.order !== undefined && b.order !== undefined) {\n                return a.order - b.order;\n              }\n              if (a.index !== undefined && b.index !== undefined) {\n                return a.index - b.index;\n              }\n              \n              // Strategy 2: Sort by question ID if they're numeric\n              const aId = parseInt(a.id);\n              const bId = parseInt(b.id);\n              if (!isNaN(aId) && !isNaN(bId)) {\n                return aId - bId;\n              }\n              \n              // Strategy 3: Sort by creation timestamp if available\n              if (a.createdAt && b.createdAt) {\n                return a.createdAt - b.createdAt;\n              }\n              \n              // Strategy 4: Maintain original array order\n              return testQuestions.indexOf(a) - testQuestions.indexOf(b);\n            });\n            \n            Logger.debug('Question ordering for Excel', {\n              originalCount: testQuestions.length,\n              sortedCount: sortedQuestions.length\n            });\n            \n            // Get all question IDs from the test (in sorted order) and try to find answers for them\n            sortedQuestions.forEach((question, index) => {\n              const questionId = question.id;\n              const questionText = question.questionText || `Question ${index + 1}`;\n              \n              // Try multiple strategies to find the answer\n              let answer = '';\n              \n              // Strategy 1: Direct question ID match\n              if (submission.answers[questionId]) {\n                answer = submission.answers[questionId];\n              }\n              // Strategy 2: String version of question ID\n              else if (submission.answers[questionId.toString()]) {\n                answer = submission.answers[questionId.toString()];\n              }\n              // Strategy 3: Try index-based keys (0, 1, 2...)\n              else if (submission.answers[index]) {\n                answer = submission.answers[index];\n              }\n              else if (submission.answers[index.toString()]) {\n                answer = submission.answers[index.toString()];\n              }\n              // Strategy 4: Try question number patterns (q1, q2, question1, etc.)\n              else {\n                const possibleKeys = answerKeys.filter(key => {\n                  const keyLower = key.toLowerCase();\n                  const qidLower = String(questionId).toLowerCase();\n                  return (keyLower === `q${index + 1}` || \n                          keyLower === `question${index + 1}` ||\n                          keyLower === `question_${index + 1}` ||\n                          keyLower.includes(qidLower) ||\n                          key === (index + 1).toString());\n                });\n                \n                if (possibleKeys.length > 0) {\n                  answer = submission.answers[possibleKeys[0]];\n                }\n              }\n              \n              // Strategy 5: Fallback - use answers by order if we have the same number of questions and answers\n              if (!answer && answerKeys.length === testQuestions.length && index < answerKeys.length) {\n                answer = submission.answers[answerKeys[index]];\n              }\n              \n              // Use full question text as column header (no truncation)\n              const columnHeader = questionText;\n              \n              // Ensure we have a string answer, use \"-\" if no answer\n              const finalAnswer = answer ? (typeof answer === 'string' ? answer : JSON.stringify(answer)) : '-';\n              rowData[columnHeader] = finalAnswer;\n              \n              Logger.debug(`Question ${index + 1} processed`, { hasAnswer: !!answer });\n            });\n          } else {\n            // No test questions found; create neutral headers without dummy text\n            Logger.warn('No test questions found, using neutral headers');\n            answerKeys.forEach((answerKey, index) => {\n              const answer = submission.answers[answerKey];\n              const columnHeader = `Question ${index + 1}`;\n              const finalAnswer = answer ? (typeof answer === 'string' ? answer : JSON.stringify(answer)) : '-';\n              rowData[columnHeader] = finalAnswer;\n              Logger.debug(`Column processed: ${columnHeader}`, { hasAnswer: !!answer });\n            });\n          }\n        } else {\n          // If no answers object, add empty columns for each question\n          testQuestions.forEach((question, index) => {\n            const questionText = question.questionText || `Question ${index + 1}`;\n            const columnHeader = questionText.length > 50 \n              ? questionText.substring(0, 50) + '...' \n              : questionText;\n            rowData[columnHeader] = '-';\n          });\n        }\n\n        // Add summary information at the end\n        rowData['Score Obtained'] = submission.totalMarksAwarded || 0;\n        rowData['Percentage'] = `${submission.score || 0}%`;\n        rowData['Submitted At'] = submission.submittedAt?.toDate?.()?.toLocaleDateString() || 'N/A';\n\n        Logger.debug('Row data processed', { columnCount: Object.keys(rowData).length });\n        return rowData;\n      })\n    );\n\n    // Create workbook and worksheet using ExcelJS\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet('Test Results');\n\n    // Get all column headers\n    const headers = enrichedSubmissions.length > 0 ? Object.keys(enrichedSubmissions[0]) : [];\n    \n    // Add headers to worksheet\n    worksheet.addRow(headers);\n    \n    // Add data rows\n    enrichedSubmissions.forEach(submission => {\n      const row = headers.map(header => submission[header] || '');\n      worksheet.addRow(row);\n    });\n    \n    // Set column widths\n    headers.forEach((header, index) => {\n      const column = worksheet.getColumn(index + 1);\n      if (header === 'Student Name') { column.width = 25; }\n      else if (header === 'Mobile Number') { column.width = 15; }\n      else if (header === 'Gmail ID') { column.width = 30; }\n      else if (header === 'Year') { column.width = 8; }\n      else if (header === 'Score Obtained') { column.width = 12; }\n      else if (header === 'Total Marks') { column.width = 12; }\n      else if (header === 'Percentage') { column.width = 12; }\n      else if (header === 'Submitted At') { column.width = 15; }\n      else { column.width = 60; } // For question columns\n    });\n    \n    // Style the header row\n    const headerRow = worksheet.getRow(1);\n    headerRow.font = { bold: true };\n    headerRow.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: 'FFE0E0E0' }\n    };\n\n    // Generate filename with test title and date\n    fileName = `${selectedTest.title.replace(/[^a-zA-Z0-9]/g, '_')}_Results_${new Date().toISOString().split('T')[0]}.xlsx`;\n    \n    // Write file\n    const buffer = await workbook.xlsx.writeBuffer();\n    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName;\n    link.click();\n    window.URL.revokeObjectURL(url);\n    \n    showSuccess('Excel file exported successfully!');\n  } catch (error) {\n    Logger.error('Error exporting to Excel', { fileName }, error);\n    showError('Failed to export Excel file. Please try again.', error);\n  } finally {\n    setLoading(false);\n  }\n};\n","import { doc, getDoc, collection, getDocs } from 'firebase/firestore';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\nimport { db } from '../firebase';\n\nimport Logger from './logger';\nimport { showSuccess, showError } from './notifications';\n\n/**\n * Export test submissions to PDF format\n * @param {Object} params - Export parameters\n * @param {Array} params.submissions - Array of submission objects\n * @param {Object} params.selectedTest - Test object with details\n * @param {Function} params.setLoading - Loading state setter\n * @param {string} params.exportType - 'head' or 'admin' for different styling\n * @returns {Promise<void>}\n */\nexport const exportSubmissionsToPDF = async ({ submissions, selectedTest, setLoading, exportType = 'head' }) => {\n  let fileName = '';\n  try {\n    Logger.info('Starting PDF export', { submissions: submissions.length, test: selectedTest.title, exportType });\n    setLoading(true);\n    \n    // First, fetch the test questions to get actual question text\n    let testQuestions = [];\n    Logger.debug('Starting question fetch for test', { testId: selectedTest.id });\n    \n    try {\n      // 1) Prefer the questions subcollection (source of truth)\n      Logger.debug('Fetching questions from subcollection');\n      const questionsSnapshot = await getDocs(collection(db, 'tests', selectedTest.id, 'questions'));\n      if (!questionsSnapshot.empty) {\n        testQuestions = questionsSnapshot.docs.map(qDoc => {\n          const data = qDoc.data();\n          return { id: data.questionId || qDoc.id, ...data };\n        });\n        Logger.debug('Loaded questions from subcollection', { count: testQuestions.length });\n      }\n\n      // 2) Fallback: embedded questions in tests doc\n      if (testQuestions.length === 0) {\n        const testDoc = await getDoc(doc(db, 'tests', selectedTest.id));\n        if (testDoc.exists()) {\n          const testData = testDoc.data();\n          testQuestions = testData.questions || testData.Questions || testData.testQuestions || testData.questionsList || [];\n          if (testQuestions.length === 0 && testData.questions && typeof testData.questions === 'object' && !Array.isArray(testData.questions)) {\n            testQuestions = Object.values(testData.questions);\n          }\n          Logger.debug('Loaded questions from tests doc', { count: testQuestions.length });\n        } else {\n          Logger.warn('Test document not found in tests collection');\n        }\n      }\n\n      // 3) Legacy collection fallback\n      if (testQuestions.length === 0) {\n        const altTestDoc = await getDoc(doc(db, 'test', selectedTest.id));\n        if (altTestDoc.exists()) {\n          const altTestData = altTestDoc.data();\n          testQuestions = altTestData.questions || [];\n          Logger.debug('Loaded questions from legacy collection', { count: testQuestions.length });\n        }\n      }\n\n      // 4) Prop fallback\n      if (testQuestions.length === 0 && selectedTest.questions) {\n        testQuestions = selectedTest.questions;\n        Logger.debug('Loaded questions from selectedTest prop', { count: testQuestions.length });\n      }\n      \n    } catch (error) {\n      Logger.error('Error fetching test questions', null, error);\n    }\n\n    // Fetch detailed user information and answers for each submission\n    const enrichedSubmissions = await Promise.all(\n      submissions.map(async (submission) => {\n        let userInfo = {\n          fullName: submission.candidateName || 'Unknown',\n          gmail: '',\n          mobile: '',\n          year: ''\n        };\n\n        if (submission.candidateId) {\n          try {\n            const userDoc = await getDoc(doc(db, 'user', submission.candidateId));\n            if (userDoc.exists()) {\n              const userData = userDoc.data();\n              userInfo = {\n                fullName: userData.fullName || userData.name || submission.candidateName || 'Unknown',\n                gmail: userData.gmail || userData.email || '',\n                mobile: userData.mobile || userData.phone || '',\n                year: userData.year || ''\n              };\n            }\n          } catch (error) {\n            Logger.error('Error fetching user data for export', { candidateId: submission.candidateId }, error);\n          }\n        }\n\n        // Create row with required order: Name, Mobile, Gmail, Year, then answers\n        const rowData = [\n          userInfo.fullName,\n          userInfo.mobile,\n          userInfo.gmail,\n          userInfo.year\n        ];\n\n        // Add question answers if available\n        if (submission.answers && typeof submission.answers === 'object') {\n          const answerKeys = Object.keys(submission.answers).filter(key => \n            !key.includes('_notes') && \n            !key.includes('timestamp') && \n            !key.includes('metadata')\n          );\n          \n          if (testQuestions.length > 0) {\n            // Sort test questions by their original order to maintain sequence\n            const sortedQuestions = [...testQuestions].sort((a, b) => {\n              // Strategy 1: If questions have an 'order' or 'index' field, use that\n              if (a.order !== undefined && b.order !== undefined) {\n                return a.order - b.order;\n              }\n              if (a.index !== undefined && b.index !== undefined) {\n                return a.index - b.index;\n              }\n              \n              // Strategy 2: Sort by question ID if they're numeric\n              const aId = parseInt(a.id);\n              const bId = parseInt(b.id);\n              if (!isNaN(aId) && !isNaN(bId)) {\n                return aId - bId;\n              }\n              \n              // Strategy 3: Sort by creation timestamp if available\n              if (a.createdAt && b.createdAt) {\n                return a.createdAt - b.createdAt;\n              }\n              \n              // Strategy 4: Maintain original array order\n              return testQuestions.indexOf(a) - testQuestions.indexOf(b);\n            });\n            \n            Logger.debug('Question ordering', {\n              original: testQuestions.map(q => ({ id: q.id, text: q.questionText?.substring(0, 30) })),\n              sorted: sortedQuestions.map(q => ({ id: q.id, text: q.questionText?.substring(0, 30) }))\n            });\n            \n            // Use sorted test questions to maintain sequence\n            sortedQuestions.forEach((question, index) => {\n              const questionId = question.id;\n              let answer = '';\n              \n              // Try multiple strategies to find the answer\n              if (submission.answers[questionId]) {\n                answer = submission.answers[questionId];\n              }\n              else if (submission.answers[questionId.toString()]) {\n                answer = submission.answers[questionId.toString()];\n              }\n              else if (submission.answers[index]) {\n                answer = submission.answers[index];\n              }\n              else if (submission.answers[index.toString()]) {\n                answer = submission.answers[index.toString()];\n              }\n              else {\n                const possibleKeys = answerKeys.filter(key => {\n                  const keyLower = key.toLowerCase();\n                  const qidLower = String(questionId).toLowerCase();\n                  return (keyLower === `q${index + 1}` || \n                          keyLower === `question${index + 1}` ||\n                          keyLower === `question_${index + 1}` ||\n                          keyLower.includes(qidLower) ||\n                          key === (index + 1).toString());\n                });\n                \n                if (possibleKeys.length > 0) {\n                  answer = submission.answers[possibleKeys[0]];\n                }\n                // Fallback strategy\n                else if (answerKeys.length === testQuestions.length && index < answerKeys.length) {\n                  answer = submission.answers[answerKeys[index]];\n                }\n              }\n              \n              // Show full answer without truncation, use \"-\" if no answer\n              const displayAnswer = answer ? (typeof answer === 'string' ? answer : JSON.stringify(answer)) : '-';\n              rowData.push(displayAnswer);\n            });\n          } else {\n            // No test questions found, use answer keys directly with smart inference\n            Logger.warn('No test questions found, using answer keys directly');\n            answerKeys.forEach((answerKey) => {\n              const answer = submission.answers[answerKey];\n              // Show full answer without truncation, use \"-\" if no answer\n              const displayAnswer = answer ? (typeof answer === 'string' ? answer : JSON.stringify(answer)) : '-';\n              rowData.push(displayAnswer);\n            });\n          }\n        } else {\n          // If no answers object, add \"-\" for each question or answer key\n          if (testQuestions.length > 0) {\n            testQuestions.forEach(() => {\n              rowData.push('-');\n            });\n          } else {\n            // Add at least 3 empty columns if no questions or answers\n            for (let i = 0; i < 3; i++) {\n              rowData.push('-');\n            }\n          }\n        }\n\n        // Add summary information at the end\n        rowData.push(\n          submission.totalMarksAwarded || 0,\n          `${submission.score || 0}%`,\n          submission.status || 'submitted'\n        );\n\n        return rowData;\n      })\n    );\n\n    // Create PDF document\n    const pdfDoc = new jsPDF('landscape'); // Use landscape for more columns\n    Logger.debug('PDF document created successfully');\n    \n    // Add title based on export type\n    pdfDoc.setFontSize(16);\n    const titlePrefix = exportType === 'admin' ? 'Admin Export - ' : '';\n    pdfDoc.text(`${titlePrefix}Test Results: ${selectedTest.title}`, 14, 22);\n    \n    // Add test info\n    pdfDoc.setFontSize(10);\n    pdfDoc.text(`Domain: ${selectedTest.branch || selectedTest.domain || 'N/A'}`, 14, 32);\n    pdfDoc.text(`Total Marks: ${selectedTest.totalMarks || 100}`, 14, 38);\n    pdfDoc.text(`Export Date: ${new Date().toLocaleDateString()}`, 14, 44);\n    pdfDoc.text(`Total Submissions: ${submissions.length}`, 14, 50);\n\n    // Create dynamic headers based on questions\n    const baseHeaders = ['Student Name', 'Mobile', 'Gmail ID', 'Year'];\n    const questionHeaders = [];\n    \n    // Get question count from test and create short headers\n    if (testQuestions.length > 0) {\n      // Sort test questions by their original order to maintain sequence (same logic as data processing)\n      const sortedQuestions = [...testQuestions].sort((a, b) => {\n        // Strategy 1: If questions have an 'order' or 'index' field, use that\n        if (a.order !== undefined && b.order !== undefined) {\n          return a.order - b.order;\n        }\n        if (a.index !== undefined && b.index !== undefined) {\n          return a.index - b.index;\n        }\n        \n        // Strategy 2: Sort by question ID if they're numeric\n        const aId = parseInt(a.id);\n        const bId = parseInt(b.id);\n        if (!isNaN(aId) && !isNaN(bId)) {\n          return aId - bId;\n        }\n        \n        // Strategy 3: Sort by creation timestamp if available\n        if (a.createdAt && b.createdAt) {\n          return a.createdAt - b.createdAt;\n        }\n        \n        // Strategy 4: Maintain original array order\n        return testQuestions.indexOf(a) - testQuestions.indexOf(b);\n      });\n      \n      sortedQuestions.forEach((question, index) => {\n        // Use full question text instead of truncated version\n        const fullHeader = question.questionText \n          ? `Q${index + 1}: ${question.questionText}`\n          : `Q${index + 1}`;\n        questionHeaders.push(fullHeader);\n      });\n    } else {\n      // If no test questions, create neutral headers based on the first submission's answer count\n      Logger.warn('No test questions found, using neutral headers');\n      if (submissions.length > 0 && submissions[0].answers) {\n        const answerKeys = Object.keys(submissions[0].answers).filter(key => \n          !key.includes('_notes') && \n          !key.includes('timestamp') && \n          !key.includes('metadata')\n        );\n        for (let i = 1; i <= answerKeys.length; i++) {\n          questionHeaders.push(`Q${i}`);\n        }\n      } else {\n        // Default to 3 neutral headers if we can't determine\n        for (let i = 1; i <= 3; i++) {\n          questionHeaders.push(`Q${i}`);\n        }\n      }\n    }\n    \n    const summaryHeaders = ['Score', '%', 'Status'];\n    const allHeaders = [...baseHeaders, ...questionHeaders, ...summaryHeaders];\n\n    // Set header color based on export type\n    const headerColor = exportType === 'admin' ? [59, 130, 246] : [147, 51, 234]; // Blue for admin, Purple for head\n\n    // Add table using autoTable\n    Logger.debug('Adding table to PDF', { headerCount: allHeaders.length });\n    \n    // Use the imported autoTable function\n    autoTable(pdfDoc, {\n      head: [allHeaders],\n      body: enrichedSubmissions,\n      startY: 60,\n      styles: { fontSize: 7 },\n      headStyles: { fillColor: headerColor },\n      columnStyles: {\n        0: { cellWidth: 25 }, // Student Name\n        1: { cellWidth: 20 }, // Mobile\n        2: { cellWidth: 30 }, // Gmail ID\n        3: { cellWidth: 12 }, // Year\n        // Wider columns for full-length answers\n        ...Object.fromEntries(\n          questionHeaders.map((_, index) => [index + 4, { cellWidth: 40 }])\n        )\n      },\n      margin: { left: 14, right: 14 },\n      // Handle empty cells\n      didParseCell: function (data) {\n        if (data.cell.text[0] === '' || data.cell.text[0] === null || data.cell.text[0] === undefined) {\n          data.cell.text = ['-'];\n        }\n      }\n    });\n\n    // Generate filename with test title and date\n    const filePrefix = exportType === 'admin' ? 'Admin_' : '';\n    fileName = `${selectedTest.title.replace(/[^a-zA-Z0-9]/g, '_')}_${filePrefix}Results_${new Date().toISOString().split('T')[0]}.pdf`;\n    \n    Logger.info('Saving PDF file', { fileName });\n    pdfDoc.save(fileName);\n    \n    showSuccess('PDF file exported successfully!');\n  } catch (error) {\n    Logger.error('Error exporting to PDF', { fileName }, error);\n    showError(`Failed to export PDF file: ${error.message}. Please try again.`, error);\n  } finally {\n    setLoading(false);\n  }\n};\n","import React from 'react';\nimport './Icon.css';\n\n// Import all the 3D icons\nimport firstPlaceIcon from './1st-place.png';\nimport secondPlaceIcon from './2nd-place.png';\nimport calendarIcon from './3dicons-calender-dynamic-color.png';\nimport computerIcon from './3dicons-computer-dynamic-color.png';\nimport copyIcon from './3dicons-copy-dynamic-color.png';\nimport fileTextIcon from './3dicons-file-text-dynamic-color.png';\nimport fireIcon from './3dicons-fire-dynamic-color.png';\nimport girlIcon from './3dicons-girl-dynamic-color.png';\nimport mailIcon from './3dicons-mail-dynamic-color.png';\nimport notebookIcon from './3dicons-notebook-dynamic-color.png';\nimport shieldIcon from './3dicons-shield-dynamic-color.png';\nimport targetIcon from './3dicons-target-dynamic-color.png';\nimport thumbUpIcon from './3dicons-thumb-up-dynamic-color.png';\nimport thirdPlaceIcon from './3rd-place.png';\nimport leaderboardIcon from './leaderboard.png';\n\n// Icon mapping\nconst iconMap = {\n  // Document/Paper related\n  'document': fileTextIcon,\n  'paper': fileTextIcon,\n  'file': fileTextIcon,\n  'text': fileTextIcon,\n  \n  // Data/Analytics related\n  'chart': computerIcon,\n  'submissions': computerIcon,\n  'analytics': computerIcon,\n  'data': computerIcon,\n  \n  // Actions\n  'copy': copyIcon,\n  'duplicate': copyIcon,\n  \n  // Calendar/Time\n  'calendar': calendarIcon,\n  'schedule': calendarIcon,\n  'date': calendarIcon,\n  \n  // Success/Achievement\n  'success': thumbUpIcon,\n  'approve': thumbUpIcon,\n  'like': thumbUpIcon,\n  'correct': thumbUpIcon,\n  \n  // Security/Admin\n  'shield': shieldIcon,\n  'security': shieldIcon,\n  'admin': shieldIcon,\n  'protect': shieldIcon,\n  \n  // Performance/Target\n  'target': targetIcon,\n  'goal': targetIcon,\n  'performance': targetIcon,\n  'score': targetIcon,\n  \n  // Communication\n  'mail': mailIcon,\n  'email': mailIcon,\n  'message': mailIcon,\n  'notification': mailIcon,\n  \n  // Learning/Education\n  'notebook': notebookIcon,\n  'learn': notebookIcon,\n  'education': notebookIcon,\n  'study': notebookIcon,\n  \n  // Energy/Activity\n  'fire': fireIcon,\n  'energy': fireIcon,\n  'active': fireIcon,\n  'hot': fireIcon,\n  \n  // User/Profile\n  'user': girlIcon,\n  'profile': girlIcon,\n  'candidate': girlIcon,\n  'person': girlIcon,\n  \n  // Rankings/Awards\n  'first': firstPlaceIcon,\n  '1st': firstPlaceIcon,\n  'gold': firstPlaceIcon,\n  'winner': firstPlaceIcon,\n  'first-place': firstPlaceIcon,\n  \n  'second': secondPlaceIcon,\n  '2nd': secondPlaceIcon,\n  'silver': secondPlaceIcon,\n  'second-place': secondPlaceIcon,\n  \n  'third': thirdPlaceIcon,\n  '3rd': thirdPlaceIcon,\n  'bronze': thirdPlaceIcon,\n  'third-place': thirdPlaceIcon,\n  \n  // Leaderboard\n  'leaderboard': leaderboardIcon,\n  'ranking': leaderboardIcon,\n  'standings': leaderboardIcon,\n  'scoreboard': leaderboardIcon,\n};\n\nconst Icon = ({ \n  name, \n  size = 'medium', \n  className = '', \n  alt = '', \n  style = {} \n}) => {\n  const iconSrc = iconMap[name];\n  \n  if (!iconSrc) {\n    console.warn(`Icon \"${name}\" not found. Available icons:`, Object.keys(iconMap));\n    return null;\n  }\n  \n  const sizeClass = `icon-${size}`;\n  const classes = `icon ${sizeClass} ${className}`.trim();\n  \n  return (\n    <img \n      src={iconSrc} \n      alt={alt || `${name} icon`}\n      className={classes}\n      style={style}\n    />\n  );\n};\n\nexport default Icon;\n","import React, { useState, useEffect } from 'react';\nimport { collection, getDocs, query, where, doc, updateDoc, getDoc } from 'firebase/firestore';\n\nimport { useFirebase } from '../../context/FirebaseContext';\nimport { db } from '../../firebase';\nimport { formatDateTime } from '../../utils/dateUtils';\nimport Logger from '../../utils/logger';\nimport Icon from '../icons/Icon';\nimport userInterfaceVideo from '../icons/User Interface.mp4';\nimport Loading from '../Loading/Loading';\nimport './Leaderboard.css';\n\nconst Leaderboard = () => {\n  const [tests, setTests] = useState([]);\n  const [selectedTest, setSelectedTest] = useState(null);\n  const [leaderboardData, setLeaderboardData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingLeaderboard, setLoadingLeaderboard] = useState(false);\n  const [error, setError] = useState('');\n  const [publishedLeaderboards, setPublishedLeaderboards] = useState({});\n  const [publishing, setPublishing] = useState(false);\n  const { userDoc } = useFirebase();\n  \n  const isAdmin = userDoc?.role === 'admin';\n  const isHead = userDoc?.role === 'head';\n  const isCandidate = userDoc?.role === 'candidate' || !userDoc?.role;\n  const canPublish = isAdmin || isHead;\n  \n  // Debug logging for permissions - DISABLED\n  // console.log('User permissions:', {\n  //   role: userDoc?.role,\n  //   isAdmin,\n  //   isHead,\n  //   isCandidate,\n  //   canPublish,\n  //   domain: userDoc?.domain\n  // });\n\n  // Load all tests and published leaderboards\n  useEffect(() => {\n    // Don't load if userDoc is not available yet\n    if (!userDoc) {\n      return;\n    }\n    \n    const loadTests = async () => {\n      try {\n        setLoading(true);\n        setError(''); // Clear any previous errors\n        \n        // Load tests\n        const testsRef = collection(db, 'tests');\n        const snapshot = await getDocs(testsRef);\n        const testsData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        \n        // Filter tests based on user role\n        let filteredTests = testsData;\n        if (userDoc?.role === 'head' && userDoc?.domain) {\n          filteredTests = testsData.filter(test => test.domain === userDoc.domain);\n        }\n        \n        // Extract publication status from tests data\n        const publishedData = {};\n        filteredTests.forEach(test => {\n          if (test.leaderboardPublished === true) {\n            publishedData[test.id] = {\n              published: true,\n              testId: test.id,\n              testTitle: test.title,\n              publishedBy: test.publishedBy || 'unknown',\n              publishedAt: test.publishedAt || new Date(),\n              publisherRole: test.publisherRole || 'unknown'\n            };\n          }\n        });\n        \n        setTests(filteredTests);\n        setPublishedLeaderboards(publishedData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading tests and leaderboards:', err);\n        setError(`Failed to load tests: ${err.message || 'Unknown error'}`);\n        setLoading(false);\n      }\n    };\n\n    loadTests();\n  }, [userDoc]);\n\n  // Load leaderboard data for selected test\n  const loadLeaderboard = async (test) => {\n    try {\n      setLoadingLeaderboard(true);\n      setSelectedTest(test);\n      setError(''); // Clear any errors\n      setLeaderboardData([]); // Clear previous data\n      \n      // Fetch all submissions for this test\n      const resultsQuery = query(\n        collection(db, 'results'),\n        where('testId', '==', test.id),\n        where('status', '==', 'evaluated')\n      );\n      \n      const snapshot = await getDocs(resultsQuery);\n      Logger.debug('Loading leaderboard data', { testTitle: test.title, submissionCount: snapshot.docs.length });\n      \n      const submissions = await Promise.all(snapshot.docs.map(async (doc) => {\n        const data = doc.data();\n        // console.log('Raw submission data:', {\n        //   id: doc.id,\n        //   candidateName: data.candidateName,\n        //   totalMarksAwarded: data.totalMarksAwarded,\n        //   maxPossibleMarks: data.maxPossibleMarks,\n        //   score: data.score,\n        //   testTotalMarks: test.totalMarks,\n        //   questionMarks: data.questionMarks\n        // });\n        \n        // Try to get better candidate name\n        let candidateName = data.candidateName || 'Unknown';\n        if (data.candidateId) {\n          try {\n            // Try multiple approaches to get user data\n            let userData = null;\n            \n            // First try: query by uid field\n            try {\n              const userQuery = query(\n                collection(db, 'user'),\n                where('uid', '==', data.candidateId)\n              );\n              const userSnapshot = await getDocs(userQuery);\n              if (!userSnapshot.empty) {\n                userData = userSnapshot.docs[0].data();\n              }\n            } catch (queryError) {\n              Logger.debug('Query by uid failed, trying direct document access');\n            }\n            \n            // Second try: direct document access\n            if (!userData) {\n              try {\n                const userDocRef = doc(db, 'user', data.candidateId);\n                const userDocSnap = await getDoc(userDocRef);\n                if (userDocSnap.exists()) {\n                  userData = userDocSnap.data();\n                }\n              } catch (docError) {\n                Logger.debug('Direct document access failed');\n              }\n            }\n            \n            // Use the best available name\n            if (userData) {\n              candidateName = userData.name || userData.displayName || userData.fullName || userData.firstName || candidateName;\n            }\n          } catch (error) {\n            Logger.debug('Could not fetch user data for candidate', { candidateId: data.candidateId }, error);\n          }\n        }\n        \n        // Calculate correct marks and validate data\n        let maxPossibleMarks = data.maxPossibleMarks || test.totalMarks || 100;\n        let totalMarksAwarded = data.totalMarksAwarded || 0;\n        \n        // Try to recalculate from individual question marks if available\n        if (data.questionMarks && typeof data.questionMarks === 'object') {\n          const questionMarksArray = Object.values(data.questionMarks);\n          if (questionMarksArray.length > 0) {\n            // Recalculate total awarded marks from individual questions\n            const calculatedTotal = questionMarksArray.reduce((sum, mark) => {\n              const numMark = parseFloat(mark) || 0;\n              return sum + numMark;\n            }, 0);\n            \n            Logger.debug('Recalculating marks from questions', { calculatedTotal, originalTotal: totalMarksAwarded });\n            totalMarksAwarded = calculatedTotal;\n          }\n        }\n        \n        // If we still have invalid data, try to get correct max marks from test\n        if (test.totalMarks && test.totalMarks > 0) {\n          maxPossibleMarks = test.totalMarks;\n        }\n        \n        // Final validation - ensure awarded marks don't exceed maximum\n        if (totalMarksAwarded > maxPossibleMarks) {\n          Logger.warn('Invalid marks detected, capping to maximum', { \n            candidateName, \n            totalMarksAwarded, \n            maxPossibleMarks \n          });\n          totalMarksAwarded = maxPossibleMarks;\n        }\n        \n        // Ensure minimum values\n        totalMarksAwarded = Math.max(0, totalMarksAwarded);\n        maxPossibleMarks = Math.max(1, maxPossibleMarks);\n        \n        // Recalculate score percentage\n        const score = Math.round((totalMarksAwarded / maxPossibleMarks) * 100);\n        \n        const finalResult = {\n          id: doc.id,\n          candidateName,\n          candidateId: data.candidateId,\n          totalMarksAwarded: Math.max(0, totalMarksAwarded), // Ensure non-negative\n          maxPossibleMarks: Math.max(1, maxPossibleMarks), // Ensure at least 1\n          score: Math.max(0, Math.min(100, score)), // Ensure 0-100 range\n          submittedAt: data.submittedAt,\n          timeTaken: data.timeTaken || 0,\n          questionMarks: data.questionMarks || {}\n        };\n        \n        console.log('Final processed data:', {\n          candidateName: finalResult.candidateName,\n          marks: `${finalResult.totalMarksAwarded}/${finalResult.maxPossibleMarks}`,\n          score: `${finalResult.score}%`\n        });\n        \n        return finalResult;\n      }));\n      \n      // Sort by total marks (descending) and then by time taken (ascending)\n      const sortedSubmissions = submissions.sort((a, b) => {\n        if (b.totalMarksAwarded !== a.totalMarksAwarded) {\n          return b.totalMarksAwarded - a.totalMarksAwarded;\n        }\n        return a.timeTaken - b.timeTaken;\n      });\n      \n      // Add rank to each submission\n      const rankedSubmissions = sortedSubmissions.map((submission, index) => ({\n        ...submission,\n        rank: index + 1\n      }));\n      \n      setLeaderboardData(rankedSubmissions);\n      setLoadingLeaderboard(false);\n    } catch (err) {\n      Logger.error('Error loading leaderboard data', null, err);\n      setError(`Failed to load leaderboard data: ${err.message || 'Unknown error'}`);\n      setLoadingLeaderboard(false);\n    }\n  };\n\n  // Calculate pie chart data\n  const getPieChartData = () => {\n    if (leaderboardData.length === 0) {return [];}\n    \n    const ranges = [\n      { label: 'Excellent (90-100%)', min: 90, max: 100, color: '#10b981', count: 0 },\n      { label: 'Good (70-89%)', min: 70, max: 89, color: '#3b82f6', count: 0 },\n      { label: 'Average (50-69%)', min: 50, max: 69, color: '#f59e0b', count: 0 },\n      { label: 'Below Average (0-49%)', min: 0, max: 49, color: '#ef4444', count: 0 }\n    ];\n    \n    leaderboardData.forEach(submission => {\n      // Use the already validated score instead of recalculating\n      const percentage = submission.score;\n      const range = ranges.find(r => percentage >= r.min && percentage <= r.max);\n      if (range) {range.count++;}\n    });\n    \n    return ranges.filter(range => range.count > 0);\n  };\n\n\n  // Get rank badge color\n  const getRankBadgeColor = (rank) => {\n    if (rank === 1) {return 'gold';}\n    if (rank === 2) {return 'silver';}\n    if (rank === 3) {return 'bronze';}\n    return 'default';\n  };\n\n  // Toggle leaderboard publication\n  const toggleLeaderboardPublication = async (testId, testTitle) => {\n    console.log('Toggle publication called:', {\n      testId,\n      testTitle,\n      canPublish,\n      userRole: userDoc?.role,\n      isHead,\n      isAdmin\n    });\n    \n    if (!canPublish) {\n      // console.warn('User does not have publish permissions');\n      return;\n    }\n    \n    try {\n      setPublishing(true);\n      setError(''); // Clear any previous errors\n      \n      const isCurrentlyPublished = publishedLeaderboards[testId]?.published;\n      const newStatus = !isCurrentlyPublished;\n      \n      // Use the tests collection to store publication status instead\n      const testRef = doc(db, 'tests', testId);\n      \n      if (newStatus) {\n        // Publishing - set the field to true\n        await updateDoc(testRef, {\n          leaderboardPublished: true,\n          publishedBy: userDoc?.uid || 'unknown',\n          publishedAt: new Date(),\n          publisherRole: userDoc?.role || 'unknown'\n        });\n      } else {\n        // Unpublishing - remove the field or set to false\n        await updateDoc(testRef, {\n          leaderboardPublished: false,\n          unpublishedBy: userDoc?.uid || 'unknown',\n          unpublishedAt: new Date()\n        });\n      }\n      \n      // Update local state\n      if (newStatus) {\n        setPublishedLeaderboards(prev => ({\n          ...prev,\n          [testId]: {\n            published: true,\n            testId: testId,\n            testTitle: testTitle,\n            publishedBy: userDoc?.uid || 'unknown',\n            publishedAt: new Date(),\n            publisherRole: userDoc?.role || 'unknown'\n          }\n        }));\n      } else {\n        // Remove from published leaderboards when unpublishing\n        setPublishedLeaderboards(prev => {\n          const updated = { ...prev };\n          delete updated[testId];\n          return updated;\n        });\n      }\n      \n      setPublishing(false);\n      \n      // Show success message\n      const action = newStatus ? 'published' : 'unpublished';\n      // console.log(`Leaderboard ${action} successfully for test: ${testTitle}`);\n      \n    } catch (error) {\n      // console.error('Error updating leaderboard publication:', error);\n      const isCurrentlyPublished = publishedLeaderboards[testId]?.published;\n      const attemptedAction = !isCurrentlyPublished ? 'publish' : 'unpublish';\n      setError(`Failed to ${attemptedAction} leaderboard: ${error.message}`);\n      setPublishing(false);\n    }\n  };\n\n  // Check if leaderboard is published for candidates\n  const isLeaderboardPublished = (testId) => {\n    // Check both the publishedLeaderboards state and the test's leaderboardPublished field\n    const fromState = publishedLeaderboards[testId]?.published === true;\n    const test = tests.find(t => t.id === testId);\n    const fromTest = test?.leaderboardPublished === true;\n    return fromState || fromTest;\n  };\n\n  // Retry loading function\n  const retryLoading = () => {\n    setError('');\n    setLoading(true);\n    // Trigger the useEffect to reload\n    if (userDoc) {\n      const loadTests = async () => {\n        try {\n          setLoading(true);\n          setError('');\n          \n          const testsRef = collection(db, 'tests');\n          const snapshot = await getDocs(testsRef);\n          const testsData = snapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n          \n          let filteredTests = testsData;\n          if (userDoc?.role === 'head' && userDoc?.domain) {\n            filteredTests = testsData.filter(test => test.domain === userDoc.domain);\n          }\n          \n          const publishedData = {};\n          filteredTests.forEach(test => {\n            if (test.leaderboardPublished === true) {\n              publishedData[test.id] = {\n                published: true,\n                testId: test.id,\n                testTitle: test.title,\n                publishedBy: test.publishedBy || 'unknown',\n                publishedAt: test.publishedAt || new Date(),\n                publisherRole: test.publisherRole || 'unknown'\n              };\n            }\n          });\n          \n          setTests(filteredTests);\n          setPublishedLeaderboards(publishedData);\n          setLoading(false);\n        } catch (err) {\n          // console.error('Error loading tests and leaderboards:', err);\n          setError(`Failed to load tests: ${err.message || 'Unknown error'}`);\n          setLoading(false);\n        }\n      };\n      loadTests();\n    }\n  };\n\n  // Render pie chart (simple CSS-based)\n  const renderPieChart = () => {\n    const data = getPieChartData();\n    if (data.length === 0) {return null;}\n    \n    const total = data.reduce((sum, item) => sum + item.count, 0);\n    let cumulativePercentage = 0;\n    \n    return (\n      <div className=\"pie-chart-container\">\n        <div className=\"pie-chart\">\n          <svg viewBox=\"0 0 42 42\" className=\"pie-svg\">\n            {data.map((item, index) => {\n              const percentage = (item.count / total) * 100;\n              const strokeDasharray = `${percentage} ${100 - percentage}`;\n              const strokeDashoffset = -cumulativePercentage;\n              cumulativePercentage += percentage;\n              \n              return (\n                <circle\n                  key={index}\n                  className=\"pie-segment\"\n                  cx=\"21\"\n                  cy=\"21\"\n                  r=\"15.915\"\n                  fill=\"transparent\"\n                  stroke={item.color}\n                  strokeWidth=\"3\"\n                  strokeDasharray={strokeDasharray}\n                  strokeDashoffset={strokeDashoffset}\n                  transform=\"rotate(-90 21 21)\"\n                />\n              );\n            })}\n          </svg>\n          <div className=\"pie-center\">\n            <span className=\"pie-total\">{total}</span>\n            <span className=\"pie-label\">Total</span>\n          </div>\n        </div>\n        \n        <div className=\"pie-legend\">\n          {data.map((item, index) => (\n            <div key={index} className=\"legend-item\">\n              <div \n                className=\"legend-color\" \n                style={{ backgroundColor: item.color }}\n               />\n              <span className=\"legend-text\">\n                {item.label}: {item.count} ({Math.round((item.count / total) * 100)}%)\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"leaderboard-container\">\n        <Loading message=\"Loading tests\" subtext=\"Fetching available tests for leaderboard\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"leaderboard-container\">\n        <div className=\"error-message\">\n          <Icon name=\"fire\" size=\"large\" />\n          <h3>Error Loading Leaderboard</h3>\n          <p>{error}</p>\n          <button \n            className=\"btn btn-primary\"\n            onClick={retryLoading}\n            style={{ marginTop: '1rem' }}\n          >\n            <Icon name=\"target\" size=\"small\" />\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // Show video for candidates when no leaderboards are published\n  if (isCandidate && Object.keys(publishedLeaderboards).length === 0) {\n    return (\n      <div className=\"leaderboard-container\">\n        <div className=\"video-placeholder\">\n          <div className=\"video-text-section\">\n            <Icon name=\"leaderboard\" size=\"2xl\" />\n            <h2>Leaderboards Coming Soon!</h2>\n            <p>Your instructors will publish test leaderboards here when they're ready.</p>\n          </div>\n          \n          <div className=\"video-container\">\n            <video \n              autoPlay \n              loop \n              muted \n              playsInline\n              className=\"interface-video\"\n            >\n              <source src={userInterfaceVideo} type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"leaderboard-container\">\n      \n\n      {!selectedTest ? (\n        <div className=\"test-selection\">\n          <div className=\"tests-grid\">\n            {tests.map(test => {\n              const isPublished = isLeaderboardPublished(test.id);\n              const canViewLeaderboard = canPublish || isPublished;\n              \n              return (\n                <div \n                  key={test.id} \n                  className={`test-card ${!canViewLeaderboard ? 'test-card-disabled' : ''}`}\n                  onClick={() => canViewLeaderboard && loadLeaderboard(test)}\n                >\n                  <div className=\"test-card-header\">\n                    <Icon name=\"notebook\" size=\"medium\" />\n                    <h3>{test.title}</h3>\n                    {canPublish && (\n                      <div className=\"publication-controls\">\n                        <button\n                          className={`btn btn-sm ${isPublished ? 'btn-danger' : 'btn-success'}`}\n                          onClick={async (e) => {\n                            e.stopPropagation();\n                            console.log('Publication button clicked:', {\n                              testId: test.id,\n                              testTitle: test.title,\n                              currentStatus: isPublished,\n                              userRole: userDoc?.role,\n                              canPublish\n                            });\n                            try {\n                              await toggleLeaderboardPublication(test.id, test.title);\n                            } catch (error) {\n                              // Error is already handled in the function\n                              // console.log('Publication toggle completed with error');\n                            }\n                          }}\n                          disabled={publishing}\n                          title={isPublished ? 'Unpublish Leaderboard' : 'Publish Leaderboard'}\n                        >\n                          {publishing ? (\n                            <><Icon name=\"fire\" size=\"small\" /> Processing...</>\n                          ) : isPublished ? (\n                            <><Icon name=\"fire\" size=\"small\" /> Unpublish</>\n                          ) : (\n                            <><Icon name=\"success\" size=\"small\" /> Publish</>\n                          )}\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"test-card-body\">\n                    <div className=\"test-info\">\n                      <span className=\"test-domain\">\n                        <Icon name=\"shield\" size=\"small\" />\n                        {test.domain}\n                      </span>\n                      <span className=\"test-duration\">\n                        <Icon name=\"calendar\" size=\"small\" />\n                        {test.duration || '60 min'}\n                      </span>\n                      {!canViewLeaderboard && (\n                        <span className=\"publication-status unpublished\">\n                          <Icon name=\"fire\" size=\"small\" />\n                          Not Published\n                        </span>\n                      )}\n                      {isPublished && (\n                        <span className=\"publication-status published\">\n                          <Icon name=\"success\" size=\"small\" />\n                          Published\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"test-stats\">\n                      <span>Total Marks: {test.totalMarks || 'N/A'}</span>\n                      <span>Status: {test.status || 'inactive'}</span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          \n          {tests.length === 0 && (\n            <div className=\"video-placeholder\">\n              <div className=\"video-text-section\">\n                <Icon name=\"notebook\" size=\"2xl\" />\n                <h2>No Tests Available</h2>\n                <p>No tests found for leaderboard display. Tests will appear here once they are created.</p>\n              </div>\n              \n              <div className=\"video-container\">\n                <video \n                  autoPlay \n                  loop \n                  muted \n                  playsInline\n                  className=\"interface-video\"\n                >\n                  <source src={userInterfaceVideo} type=\"video/mp4\" />\n                  Your browser does not support the video tag.\n                </video>\n              </div>\n            </div>\n          )}\n          \n          {isCandidate && tests.length > 0 && tests.every(test => !isLeaderboardPublished(test.id)) && (\n            <div className=\"no-published-leaderboards\">\n              <Icon name=\"leaderboard\" size=\"2xl\" />\n              <h3>No Published Leaderboards</h3>\n              <p>Your instructors haven't published any leaderboards yet. Check back later!</p>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"leaderboard-content\">\n          <div className=\"leaderboard-nav\">\n            <button \n              className=\"btn btn-outline\"\n              onClick={() => {\n                setSelectedTest(null);\n                setLeaderboardData([]);\n              }}\n            >\n              <Icon name=\"leaderboard\" size=\"small\" />\n              Back to Tests\n            </button>\n            \n            <div className=\"test-info-header\">\n              <h2>{selectedTest.title}</h2>\n              <div className=\"test-meta\">\n                <span>Domain: {selectedTest.domain}</span>\n                <span>Total Marks: {selectedTest.totalMarks || 'N/A'}</span>\n                <span>Participants: {leaderboardData.length}</span>\n              </div>\n            </div>\n          </div>\n\n          {loadingLeaderboard ? (\n            <Loading message=\"Loading leaderboard\" subtext=\"Calculating rankings and performance data\" />\n          ) : (\n            <div className=\"leaderboard-dashboard\">\n              {/* Performance Overview */}\n              <div className=\"performance-overview\">\n                <div className=\"overview-stats\">\n                  <div className=\"stat-card\">\n                    <Icon name=\"user\" size=\"xl\" />\n                    <div className=\"stat-content\">\n                      <h3>Total Participants</h3>\n                      <span className=\"stat-number\">{leaderboardData.length}</span>\n                    </div>\n                  </div>\n                  \n                  \n                  <div className=\"stat-card\">\n                    <Icon name=\"success\" size=\"xl\" />\n                    <div className=\"stat-content\">\n                      <h3>Top Score</h3>\n                      <span className=\"stat-number\">\n                        {leaderboardData.length > 0 ? Math.round(leaderboardData[0]?.score || 0) : 0}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Pie Chart */}\n                <div className=\"chart-section\">\n                  <h3>Performance Distribution</h3>\n                  {renderPieChart()}\n                </div>\n              </div>\n\n              {/* Leaderboard Table */}\n              <div className=\"leaderboard-table-section\">\n                <h3>Rankings</h3>\n                <div className=\"table-container\">\n                  <table className=\"leaderboard-table\">\n                    <thead>\n                      <tr>\n                        <th>Rank</th>\n                        <th>Candidate Name</th>\n                        <th>Score</th>\n                        <th>Marks</th>\n\n                        <th>Submitted At</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {leaderboardData.map((submission) => (\n                        <tr key={submission.id} className={`rank-${submission.rank}`}>\n                          <td>\n                            <div className={`rank-badge ${getRankBadgeColor(submission.rank)}`}>\n                              {submission.rank === 1 && <Icon name=\"gold\" size=\"small\" />}\n                              {submission.rank === 2 && <Icon name=\"silver\" size=\"small\" />}\n                              {submission.rank === 3 && <Icon name=\"bronze\" size=\"small\" />}\n                              #{submission.rank}\n                            </div>\n                          </td>\n                          <td>\n                            <div className=\"candidate-info\">\n                              <Icon name=\"user\" size=\"small\" />\n                              <span>{submission.candidateName}</span>\n                            </div>\n                          </td>\n                          <td>\n                            <div className=\"score-display\">\n                              <span className={`score-percentage ${\n                                submission.score >= 90 ? 'excellent' :\n                                submission.score >= 70 ? 'good' :\n                                submission.score >= 50 ? 'average' : 'below-average'\n                              }`}>\n                                {Math.round(submission.score)}%\n                              </span>\n                            </div>\n                          </td>\n                          <td>\n                            <span className=\"marks-fraction\">\n                              {submission.totalMarksAwarded}/{submission.maxPossibleMarks}\n                            </span>\n                          </td>\n                          \n                          <td>\n                            <span className=\"submission-date\">\n                              {formatDateTime(submission.submittedAt)}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                \n                {leaderboardData.length === 0 && (\n                  <div className=\"no-submissions\">\n                    <Icon name=\"notebook\" size=\"2xl\" />\n                    <h3>No Evaluated Submissions</h3>\n                    <p>No evaluated submissions found for this test</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","import { signOut } from 'firebase/auth';\nimport { collection, deleteDoc, doc, getDoc, getDocs, onSnapshot, query, serverTimestamp, updateDoc, where } from 'firebase/firestore';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { appConfig } from '../../../config/environment';\nimport { useFirebase } from '../../../context/FirebaseContext';\nimport { auth, db } from '../../../firebase';\nimport { formatDateTime } from '../../../utils/dateUtils';\nimport { exportSubmissionsToExcel } from '../../../utils/excelExport';\nimport { exportSubmissionsToPDF } from '../../../utils/pdfExport';\nimport Icon from '../../icons/Icon';\nimport Leaderboard from '../../Leaderboard/Leaderboard';\nimport Loading from '../../Loading/Loading';\nimport './AdminDashboard.css';\n\n// 1. Overview Section Component\nfunction AdminOverview() {\n  const [activeTests, setActiveTests] = useState([]);\n  const [stats, setStats] = useState({\n    activeTests: 0,\n    completedTests: 0\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribers = [];\n\n    // Listen to all tests (active and inactive)\n    const testsQuery = query(collection(db, 'tests'));\n    const unsubTests = onSnapshot(testsQuery, async (snapshot) => {\n      const testsData = await Promise.all(snapshot.docs.map(async (doc) => {\n        const testData = { id: doc.id, ...doc.data() };\n\n        // Get live participants for this test\n        const liveParticipantsQuery = query(\n          collection(db, 'results'),\n          where('testId', '==', doc.id),\n          where('status', 'in', ['in_progress', 'active'])\n        );\n        const liveParticipantsSnapshot = await getDocs(liveParticipantsQuery);\n\n        // Get total submissions for this test\n        const totalSubmissionsQuery = query(\n          collection(db, 'results'),\n          where('testId', '==', doc.id)\n        );\n        const totalSubmissionsSnapshot = await getDocs(totalSubmissionsQuery);\n\n        return {\n          ...testData,\n          liveParticipantCount: liveParticipantsSnapshot.size,\n          totalSubmissions: totalSubmissionsSnapshot.size\n        };\n      }));\n\n      setActiveTests(testsData);\n      const activeCount = testsData.filter(test => test.status === 'active').length;\n      setStats(prev => ({ ...prev, activeTests: activeCount }));\n    });\n    unsubscribers.push(unsubTests);\n\n    // No longer listening to users or live participants\n\n    setLoading(false);\n\n    return () => unsubscribers.forEach(unsub => unsub());\n  }, []);\n\n  if (loading) {return (\n    <div className=\"loading-tests\">\n      <Loading message=\"Loading overview\" subtext=\"Gathering system statistics and data\" variant=\"inline\" size=\"large\" />\n    </div>\n  );}\n\n  return (\n    <div className=\"admin-overview\">\n      <div className=\"overview-header\">\n        <h2>System Overview</h2>\n        <p>Real-time snapshot of your testing platform</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"overview-stats\">\n        <div className=\"stat-card\">\n          <div className=\"stat-icon\"><Icon name=\"leaderboard\" size=\"xl\" /></div>\n          <div className=\"stat-content\">\n            <h3>Active Tests</h3>\n            <p className=\"stat-number\">{stats.activeTests}</p>\n          </div>\n        </div>\n\n      </div>\n\n      {/* All Tests Section */}\n      <div className=\"active-tests-section\">\n        <h3>All Tests Overview</h3>\n        {activeTests.length === 0 ? (\n          <div className=\"no-active-tests\">\n            <div className=\"no-tests-icon\">📚</div>\n            <p>No tests available at the moment</p>\n          </div>\n        ) : (\n          <div className=\"active-tests-grid\">\n            {activeTests.map(test => (\n              <div key={test.id} className={`active-test-card ${test.status === 'active' ? 'test-active' : 'test-inactive'}`}>\n                <div className=\"test-header\">\n                  <h4>{test.title}</h4>\n                  <span className={`badge ${test.status === 'active' ? 'badge-success' : 'badge-neutral'}`}>\n                    {test.status === 'active' ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <div className=\"test-details\">\n                  <div className=\"test-meta\">\n                    <div className=\"meta-row\">\n                      <span className=\"meta-item\">\n                        <span className=\"meta-icon\">🎯</span>\n                        <span className=\"meta-label\">Branch:</span>\n                        <span className=\"meta-value\">{test.branch || 'General'}</span>\n                      </span>\n                      <span className=\"meta-item\">\n                        <span className=\"meta-icon\">⏱️</span>\n                        <span className=\"meta-label\">Duration:</span>\n                        <span className=\"meta-value\">{test.duration || '60 mins'}</span>\n                      </span>\n                    </div>\n                    <div className=\"meta-row\">\n                      <span className=\"meta-item\">\n                        <span className=\"meta-icon\">📅</span>\n                        <span className=\"meta-label\">Starts:</span>\n                        <span className=\"meta-value\">{formatDateTime(test.startTime || test.createdAt)}</span>\n                      </span>\n                      <span className=\"meta-item\">\n                        <span className=\"meta-icon\">📊</span>\n                        <span className=\"meta-label\">Submissions:</span>\n                        <span className=\"meta-value\">{test.totalSubmissions || 0}</span>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n}\n\n// 2. Users Section Component\nfunction AdminUsers() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterRole, setFilterRole] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [currentPage, setCurrentPage] = useState(1);\n  const { user: currentUser } = useFirebase();\n  const usersPerPage = 10;\n  // User details view state\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [detailsLoading, setDetailsLoading] = useState(false);\n  const [userDetails, setUserDetails] = useState({\n    submissions: [],\n    pasteLogs: [],\n    tabSwitchLogs: [],\n  });\n\n  // Check if current user can perform admin actions\n  const canPerformAdminActions = currentUser?.email?.toLowerCase() === appConfig.superAdminEmail.toLowerCase() ||\n    currentUser?.role === 'admin';\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const usersRef = collection(db, 'user');\n        const q = query(usersRef);\n        const querySnapshot = await getDocs(q);\n\n        const usersData = [];\n        querySnapshot.forEach((doc) => {\n          const userData = { id: doc.id, ...doc.data() };\n          // Filter out specific admin user\n          if (userData.email !== appConfig.superAdminEmail) {\n            usersData.push(userData);\n          }\n        });\n\n        setUsers(usersData);\n        setLoading(false);\n        console.log('Users loaded successfully:', usersData.length);\n      } catch (err) {\n        console.error('Error loading users:', err);\n        setError(`Failed to load users: ${err.message}`);\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n\n    // Set up real-time listener\n    const usersRef = collection(db, 'user');\n    const unsubscribe = onSnapshot(usersRef, (snapshot) => {\n      const usersData = [];\n      snapshot.forEach((doc) => {\n        const userData = { id: doc.id, ...doc.data() };\n        // Filter out specific admin user\n        if (userData.email !== appConfig.superAdminEmail) {\n          usersData.push(userData);\n        }\n      });\n      setUsers(usersData);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const handleRoleChange = async (userId, newRole, newDomain = null) => {\n    if (!canPerformAdminActions) {\n      alert('You do not have permission to change user roles');\n      return;\n    }\n\n    try {\n      const userRef = doc(db, 'user', userId);\n      const updateData = {\n        role: newRole,\n        updatedAt: serverTimestamp()\n      };\n      if (newRole === 'head' && newDomain) {\n        updateData.domain = newDomain;\n      } else if (newRole !== 'head') {\n        updateData.domain = null;\n      }\n      await updateDoc(userRef, updateData);\n    } catch (err) {\n      console.error('Error updating user role:', err);\n      setError('Failed to update user role: ' + err.message);\n    }\n  };\n\n  const handleBlockToggle = async (userId, currentBlocked) => {\n    if (!canPerformAdminActions) {\n      alert('You do not have permission to block/unblock users');\n      return;\n    }\n\n    try {\n      const userRef = doc(db, 'user', userId);\n      await updateDoc(userRef, {\n        blocked: !currentBlocked,\n        updatedAt: serverTimestamp()\n      });\n    } catch (err) {\n      console.error('Error updating user status:', err);\n      setError('Failed to update user status: ' + err.message);\n    }\n  };\n\n  // Open user details and fetch related data\n  const viewUserDetails = async (user) => {\n    setSelectedUser(user);\n    setDetailsLoading(true);\n    try {\n      // Fetch submissions for the user\n      const submissionsQuery = query(\n        collection(db, 'results'),\n        where('candidateId', '==', user.id)\n      );\n      const submissionsSnap = await getDocs(submissionsQuery);\n      let submissions = submissionsSnap.docs.map(d => ({ id: d.id, ...d.data() }));\n      // Sort latest first\n      submissions.sort((a, b) => {\n        const ta = (a.submittedAt?.toDate?.() || a.createdAt?.toDate?.() || new Date(0)).getTime();\n        const tb = (b.submittedAt?.toDate?.() || b.createdAt?.toDate?.() || new Date(0)).getTime();\n        return tb - ta;\n      });\n\n      // Attach test titles for readability\n      const testIds = Array.from(new Set(submissions.map(s => s.testId).filter(Boolean)));\n      const testTitleMap = {};\n      for (const tId of testIds) {\n        try {\n          const tSnap = await getDoc(doc(db, 'tests', tId));\n          if (tSnap.exists()) {testTitleMap[tId] = tSnap.data().title || tId;}\n        } catch (_) {}\n      }\n      submissions = submissions.map(s => ({ ...s, _testTitle: testTitleMap[s.testId] || s.testId }));\n\n      // Fetch paste logs\n      const pasteQueryRef = query(\n        collection(db, 'pasteLogs'),\n        where('candidateId', '==', user.id)\n      );\n      const pasteSnap = await getDocs(pasteQueryRef);\n      const pasteLogs = pasteSnap.docs.map(d => ({ id: d.id, ...d.data() }));\n\n      // Fetch tab switch logs\n      const tabQueryRef = query(\n        collection(db, 'tabSwitchLogs'),\n        where('candidateId', '==', user.id)\n      );\n      const tabSnap = await getDocs(tabQueryRef);\n      const tabSwitchLogs = tabSnap.docs.map(d => ({ id: d.id, ...d.data() }));\n\n      // Compute aggregates: total tests and average score (percentage)\n      let avgScore = 0;\n      if (submissions.length > 0) {\n        const sumPct = submissions.reduce((sum, s) => {\n          const awarded = Number(s.totalMarksAwarded || 0);\n          const max = Number(s.maxPossibleMarks || 0) || 100;\n          const pct = Math.max(0, Math.min(100, (awarded / max) * 100));\n          return sum + pct;\n        }, 0);\n        avgScore = Math.round((sumPct / submissions.length) * 100) / 100; // round to 2 decimals\n      }\n\n      setUserDetails({ submissions, pasteLogs, tabSwitchLogs, avgScore, totalTestsGiven: submissions.length });\n    } catch (err) {\n      console.error('Error loading user details:', err);\n    } finally {\n      setDetailsLoading(false);\n    }\n  };\n\n  // Close details panel\n  const closeUserDetails = () => {\n    setSelectedUser(null);\n    setUserDetails({ submissions: [], pasteLogs: [], tabSwitchLogs: [] });\n  };\n\n  // Close on Escape key when details are open\n  useEffect(() => {\n    if (!selectedUser) {return;}\n    const onKey = (e) => {\n      if (e.key === 'Escape') {closeUserDetails();}\n    };\n    window.addEventListener('keydown', onKey);\n    return () => window.removeEventListener('keydown', onKey);\n  }, [selectedUser]);\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.name?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesRole = filterRole === 'all' || user.role === filterRole;\n    const matchesStatus = filterStatus === 'all' ||\n      (filterStatus === 'active' && !user.blocked) ||\n      (filterStatus === 'blocked' && user.blocked);\n\n    return matchesSearch && matchesRole && matchesStatus;\n  });\n\n  const totalPages = Math.ceil(filteredUsers.length / usersPerPage);\n  const startIndex = (currentPage - 1) * usersPerPage;\n  const currentUsers = filteredUsers.slice(startIndex, startIndex + usersPerPage);\n\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchQuery, filterRole, filterStatus]);\n\n  if (loading) {return (\n    <div className=\"loading-tests\">\n      <Loading message=\"Loading users\" subtext=\"Fetching user accounts and permissions\" variant=\"inline\" size=\"large\" />\n    </div>\n  );}\n\n  if (error) {\n    return (\n      <div className=\"admin-users\">\n        <div className=\"users-header\">\n          <h2>User Management</h2>\n          <p>Manage user roles, domains, and access permissions</p>\n        </div>\n        <div className=\"error-container\">\n          <div className=\"error\">\n            <h3>⚠️ Error Loading Users</h3>\n            <p>{error}</p>\n            <div className=\"error-help\">\n              <h4>Possible Solutions:</h4>\n              <ul>\n                <li>Check your Firebase connection</li>\n                <li>Verify Firestore security rules allow reading the 'users' collection</li>\n                <li>The 'users' collection might not exist yet - it will be created when the first user signs up</li>\n                <li>Check the browser console for more detailed error information</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"admin-users\">\n      <div className=\"users-header\">\n        <h2>User Management</h2>\n        <p>Manage user roles, domains, and access permissions</p>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"users-controls\">\n        <div className=\"search-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by name or email...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"search-input\"\n          />\n        </div>\n        <div className=\"filters\">\n          <select\n            value={filterRole}\n            onChange={(e) => setFilterRole(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Roles</option>\n            <option value=\"candidate\">Candidates</option>\n            <option value=\"head\">Heads</option>\n            <option value=\"admin\">Admins</option>\n          </select>\n          <select\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"active\">Active</option>\n            <option value=\"blocked\">Blocked</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Users Table */}\n      {users.length === 0 ? (\n        <div className=\"no-users\">\n          <div className=\"no-users-icon\">👥</div>\n          <h3>No Users Found</h3>\n          <p>The users collection is empty or doesn't exist yet.</p>\n          <div className=\"no-users-help\">\n            <p><strong>This is normal if:</strong></p>\n            <ul>\n              <li>This is a new installation</li>\n              <li>No users have signed up yet</li>\n              <li>Users are stored in Firebase Auth but not in Firestore</li>\n            </ul>\n            <p>Users will appear here once they sign up and their data is stored in Firestore.</p>\n          </div>\n        </div>\n      ) : (\n        <>\n          <div className=\"users-table-container\">\n            <table className=\"users-table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Email</th>\n                  <th>Role</th>\n                  <th>Domain</th>\n                  <th>Status</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentUsers.map(user => (\n                  <tr key={user.id} onDoubleClick={() => viewUserDetails(user)} title=\"Double-click to view details\">\n                    <td>\n                      <div className=\"user-info\">\n                        <span\n                          className=\"user-name user-link\"\n                          onClick={() => viewUserDetails(user)}\n                          title=\"View user details\"\n                          role=\"button\"\n                          tabIndex={0}\n                          onKeyDown={(e) => { if (e.key === 'Enter') {viewUserDetails(user);} }}\n                        >\n                          {user.name || 'N/A'}\n                        </span>\n\n                      </div>\n                    </td>\n                    <td>\n                      {user.email?.toLowerCase() === appConfig.superAdminEmail.toLowerCase() ? (\n                        'Hidden'\n                      ) : (\n                        <span\n                          className=\"user-link\"\n                          onClick={() => viewUserDetails(user)}\n                          role=\"button\"\n                          tabIndex={0}\n                          title=\"View user details\"\n                          onKeyDown={(e) => { if (e.key === 'Enter') {viewUserDetails(user);} }}\n                        >\n                          {user.email}\n                        </span>\n                      )}\n                    </td>\n                    <td>\n                      <RoleSelector\n                        user={user}\n                        onRoleChange={handleRoleChange}\n                        canEdit={canPerformAdminActions}\n                      />\n                    </td>\n                    <td>\n                      <DomainSelector\n                        user={user}\n                        onRoleChange={handleRoleChange}\n                        canEdit={canPerformAdminActions}\n                      />\n                    </td>\n                    <td>\n                      <span className={`badge ${user.blocked ? 'badge-error' : 'badge-success'}`}>\n                        {user.blocked ? 'Blocked' : 'Active'}\n                      </span>\n                    </td>\n                    <td>\n                      <div className=\"user-actions\">\n\n                        <button\n                          className={`btn btn-sm ${user.blocked ? 'btn-success' : 'btn-danger'}`}\n                          onClick={() => handleBlockToggle(user.id, user.blocked)}\n                          disabled={!canPerformAdminActions}\n                          title={user.blocked ? 'Unblock user' : 'Block user'}\n                        >\n                          {user.blocked ? '🔓' : '🔒'}\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"pagination\">\n              <button\n                className=\"btn btn-outline\"\n                disabled={currentPage === 1}\n                onClick={() => setCurrentPage(currentPage - 1)}\n              >\n                Previous\n              </button>\n              <span className=\"page-info\">\n                Page {currentPage} of {totalPages} ({filteredUsers.length} users)\n              </span>\n              <button\n                className=\"btn btn-outline\"\n                disabled={currentPage === totalPages}\n                onClick={() => setCurrentPage(currentPage + 1)}\n              >\n                Next\n              </button>\n            </div>\n          )}\n        </>\n      )}\n\n      {/* User Details Panel */}\n      {selectedUser && (\n        <div\n          className=\"user-details-overlay\"\n          role=\"dialog\"\n          aria-modal=\"true\"\n          onClick={(e) => { if (e.target === e.currentTarget) {closeUserDetails();} }}\n        >\n          <div className=\"user-details-panel\">\n            <div className=\"user-details-header\">\n              <h3>User Details</h3>\n              <button className=\"btn btn-sm btn-outline\" onClick={closeUserDetails} aria-label=\"Close\">✕</button>\n            </div>\n            <div className=\"user-details-body\">\n              <div className=\"user-summary\">\n                <p><strong>Name:</strong> {selectedUser.name || 'N/A'}</p>\n                <p><strong>Email:</strong> {selectedUser.email || 'N/A'}</p>\n                <p><strong>Role:</strong> {selectedUser.role || 'candidate'}</p>\n                <p><strong>Domain:</strong> {selectedUser.domain || '-'}</p>\n                <p><strong>Mobile No:</strong> {selectedUser.mobile || selectedUser.phone || '-'}</p>\n                <p><strong>Total Tests Given:</strong> {userDetails.totalTestsGiven ?? userDetails.submissions.length}</p>\n                <p><strong>Average Marks:</strong> {userDetails.avgScore != null ? `${userDetails.avgScore}%` : '-'}</p>\n                <p><strong>Status:</strong> {selectedUser.blocked ? 'Blocked' : 'Active'}</p>\n              </div>\n\n              {detailsLoading ? (\n                <div className=\"loading-tests\">\n                  <Loading message=\"Loading user details\" subtext=\"Fetching submissions and activity\" variant=\"inline\" size=\"large\" />\n                </div>\n              ) : (\n                <>\n                  <div className=\"user-stats\">\n                    <div className=\"stat-card\"><div className=\"stat-content\"><h4>Total Submissions</h4><p className=\"stat-number\">{userDetails.submissions.length}</p></div></div>\n                    <div className=\"stat-card\"><div className=\"stat-content\"><h4>Paste Logs</h4><p className=\"stat-number\">{userDetails.pasteLogs.length}</p></div></div>\n                    <div className=\"stat-card\"><div className=\"stat-content\"><h4>Tab Switch Logs</h4><p className=\"stat-number\">{userDetails.tabSwitchLogs.length}</p></div></div>\n                  </div>\n\n                  <div className=\"user-section\">\n                    <h4>Recent Submissions</h4>\n                    {userDetails.submissions.length === 0 ? (\n                      <p className=\"text-muted\">No submissions yet.</p>\n                    ) : (\n                      <table className=\"users-table\">\n                        <thead>\n                          <tr>\n                            <th>Test</th>\n                            <th>Status</th>\n                            <th>Submitted At</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {userDetails.submissions.slice(0, 5).map(s => (\n                            <tr key={s.id}>\n                              <td>{s._testTitle || s.testId || '-'}</td>\n                              <td>{s.status || '-'}</td>\n                              <td>{(s.submittedAt?.toDate?.() || s.createdAt?.toDate?.() || null)?.toLocaleString?.() || '-'}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    )}\n                  </div>\n\n                  <div className=\"user-section\">\n                    <h4>Activity</h4>\n                    <div className=\"activity-grid\">\n                      <div>\n                        <h5>Paste Logs</h5>\n                        {userDetails.pasteLogs.length === 0 ? (\n                          <p className=\"text-muted\">No paste activity.</p>\n                        ) : (\n                          <ul className=\"simple-list\">\n                            {userDetails.pasteLogs.slice(0, 5).map(p => (\n                              <li key={p.id}>\n                                <span>Test: {p.testId || '-'}</span>\n                                <span style={{ marginLeft: 8 }}>Q: {p.questionId || '-'}</span>\n                                <span style={{ marginLeft: 8 }}>{(p.timestamp?.toDate?.() || null)?.toLocaleString?.() || '-'}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        )}\n                      </div>\n                      <div>\n                        <h5>Tab Switch Logs</h5>\n                        {userDetails.tabSwitchLogs.length === 0 ? (\n                          <p className=\"text-muted\">No tab switching recorded.</p>\n                        ) : (\n                          <ul className=\"simple-list\">\n                            {userDetails.tabSwitchLogs.slice(0, 5).map(t => (\n                              <li key={t.id}>\n                                <span>Test: {t.testId || '-'}</span>\n                                <span style={{ marginLeft: 8 }}>Count: {t.switchCount || 0}</span>\n                                <span style={{ marginLeft: 8 }}>{(t.lastUpdated?.toDate?.() || null)?.toLocaleString?.() || '-'}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Permission Notice */}\n      {!canPerformAdminActions && (\n        <div className=\"permission-notice\">\n          <span className=\"notice-icon\">⚠️</span>\n          <span>You have read-only access. Contact the super admin for admin permissions.</span>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Role Selector Component\nfunction RoleSelector({ user, onRoleChange, canEdit }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [selectedRole, setSelectedRole] = useState(user.role || 'candidate');\n\n  const handleRoleSubmit = () => {\n    if (selectedRole !== user.role) {\n      onRoleChange(user.id, selectedRole);\n    }\n    setIsEditing(false);\n  };\n\n  if (!canEdit) {\n    return (\n      <span className={`badge badge-${user.role || 'candidate'}`}>\n        {(user.role || 'candidate').charAt(0).toUpperCase() + (user.role || 'candidate').slice(1)}\n      </span>\n    );\n  }\n\n  if (isEditing) {\n    return (\n      <div className=\"role-editor\">\n        <select\n          value={selectedRole}\n          onChange={(e) => setSelectedRole(e.target.value)}\n          className=\"role-select\"\n        >\n          <option value=\"candidate\">Candidate</option>\n          <option value=\"head\">Head</option>\n          <option value=\"admin\">Admin</option>\n        </select>\n        <div className=\"role-actions\">\n          <button className=\"btn btn-sm btn-primary\" onClick={handleRoleSubmit}><Icon name=\"success\" size=\"small\" /></button>\n          <button className=\"btn btn-sm btn-outline\" onClick={() => setIsEditing(false)}><Icon name=\"fire\" size=\"small\" /></button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"role-display\" onClick={() => setIsEditing(true)}>\n      <span className={`badge badge-${user.role || 'candidate'}`}>\n        {(user.role || 'candidate').charAt(0).toUpperCase() + (user.role || 'candidate').slice(1)}\n      </span>\n      <span className=\"edit-hint\">Click to edit</span>\n    </div>\n  );\n}\n\n// Domain Selector Component\nfunction DomainSelector({ user, onRoleChange, canEdit }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [selectedDomain, setSelectedDomain] = useState(user.domain || '');\n\n  const domains = ['DSA', 'Fullstack', 'Java', 'Data Science'];\n\n  const handleDomainSubmit = () => {\n    if (user.role === 'head') {\n      onRoleChange(user.id, 'head', selectedDomain);\n    }\n    setIsEditing(false);\n  };\n\n  if (user.role !== 'head') {\n    return <span className=\"text-muted\">-</span>;\n  }\n\n  if (!canEdit) {\n    return (\n      <span className=\"badge badge-primary\">\n        {user.domain || 'No domain'}\n      </span>\n    );\n  }\n\n  if (isEditing) {\n    return (\n      <div className=\"domain-editor\">\n        <select\n          value={selectedDomain}\n          onChange={(e) => setSelectedDomain(e.target.value)}\n          className=\"domain-select\"\n        >\n          <option value=\"\">Select Domain</option>\n          {domains.map(domain => (\n            <option key={domain} value={domain}>{domain}</option>\n          ))}\n        </select>\n        <div className=\"domain-actions\">\n          <button className=\"btn btn-sm btn-primary\" onClick={handleDomainSubmit}><Icon name=\"success\" size=\"small\" /></button>\n          <button className=\"btn btn-sm btn-outline\" onClick={() => setIsEditing(false)}><Icon name=\"fire\" size=\"small\" /></button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"domain-display\" onClick={() => setIsEditing(true)}>\n      <span className=\"badge badge-primary\">\n        {user.domain || 'No domain'}\n      </span>\n      <span className=\"edit-hint\">Click to edit</span>\n    </div>\n  );\n}\n\n// 3. Tests Section Component\nfunction AdminTests() {\n  const [tests, setTests] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterDomain, setFilterDomain] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [selectedTest, setSelectedTest] = useState(null);\n  const [showSubmissions, setShowSubmissions] = useState(false);\n  const [submissions, setSubmissions] = useState([]);\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(db, 'tests'),\n      (snapshot) => {\n        const testsData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setTests(testsData);\n        setLoading(false);\n      },\n      (err) => {\n        setError('Failed to load tests');\n        setLoading(false);\n      }\n    );\n\n    return unsubscribe;\n  }, []);\n\n  const loadSubmissions = async (testId) => {\n    try {\n      const submissionsQuery = query(\n        collection(db, 'results'),\n        where('testId', '==', testId)\n      );\n      const snapshot = await getDocs(submissionsQuery);\n      const submissionsData = await Promise.all(snapshot.docs.map(async (resultDoc) => {\n        const submissionData = { id: resultDoc.id, ...resultDoc.data() };\n\n        // Process candidate name - handle emails stored in candidateName field\n        if (submissionData.candidateName && submissionData.candidateName.includes('@')) {\n          // If candidateName is an email, extract the username part\n          submissionData.candidateName = submissionData.candidateName.split('@')[0];\n        } else if (submissionData.candidateId) {\n          // Try to get better name from user database\n          try {\n            // Try to get user by Firebase UID\n            const userDoc = await getDoc(doc(db, 'user', submissionData.candidateId));\n\n            if (userDoc.exists()) {\n              const userData = userDoc.data();\n\n              // Use the best available name\n              if (userData.name) {\n                submissionData.candidateName = userData.name;\n              } else if (userData.displayName) {\n                submissionData.candidateName = userData.displayName;\n              } else if (userData.fullName) {\n                submissionData.candidateName = userData.fullName;\n              } else if (userData.firstName) {\n                submissionData.candidateName = userData.firstName;\n              } else if (userData.email) {\n                // If we have email, extract the prefix\n                submissionData.candidateName = userData.email.includes('@') ? userData.email.split('@')[0] : userData.email;\n              }\n            } else {\n              // Fallback to using last 4 chars of UID\n              submissionData.candidateName = `Candidate ${submissionData.candidateId.slice(-4)}`;\n            }\n          } catch (error) {\n            console.error('Error fetching candidate name:', error);\n            // Fallback to using last 4 chars of UID\n            submissionData.candidateName = `Candidate ${submissionData.candidateId.slice(-4)}`;\n          }\n        }\n\n        // Final fallback\n        if (!submissionData.candidateName) {\n          submissionData.candidateName = 'Unknown';\n        }\n\n        return submissionData;\n      }));\n      setSubmissions(submissionsData);\n    } catch (err) {\n      setError('Failed to load submissions');\n    }\n  };\n\n  const viewTestPaper = (test) => {\n    setSelectedTest(test);\n    setShowSubmissions(false);\n  };\n\n  const viewSubmissions = (test) => {\n    setSelectedTest(test);\n    setShowSubmissions(true);\n    loadSubmissions(test.id);\n  };\n\n  const deleteTest = async (test) => {\n    const confirmDelete = window.confirm(\n      `Are you sure you want to delete the test \"${test.title}\"?\\n\\n` +\n      `This action will permanently delete:\\n` +\n      `• The test and all its questions\\n` +\n      `• All submissions and results for this test\\n` +\n      `• This action cannot be undone!`\n    );\n\n    if (!confirmDelete) {return;}\n\n    try {\n      setLoading(true);\n\n      // Delete all submissions/results for this test\n      const resultsQuery = query(\n        collection(db, 'results'),\n        where('testId', '==', test.id)\n      );\n      const resultsSnapshot = await getDocs(resultsQuery);\n      const deleteResultsPromises = resultsSnapshot.docs.map(doc =>\n        deleteDoc(doc.ref)\n      );\n      await Promise.all(deleteResultsPromises);\n\n      // Delete all questions in the test subcollection\n      const questionsQuery = collection(db, 'tests', test.id, 'questions');\n      const questionsSnapshot = await getDocs(questionsQuery);\n      const deleteQuestionsPromises = questionsSnapshot.docs.map(doc =>\n        deleteDoc(doc.ref)\n      );\n      await Promise.all(deleteQuestionsPromises);\n\n      // Delete the test document itself\n      await deleteDoc(doc(db, 'tests', test.id));\n\n      // Show success message\n      alert(`Test \"${test.title}\" has been successfully deleted.`);\n\n    } catch (error) {\n      console.error('Error deleting test:', error);\n      alert(`Failed to delete test: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredTests = tests.filter(test => {\n    const matchesSearch = test.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      test.domain?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesDomain = filterDomain === 'all' || test.domain === filterDomain;\n    const matchesStatus = filterStatus === 'all' || test.status === filterStatus;\n\n    return matchesSearch && matchesDomain && matchesStatus;\n  });\n\n  if (loading) {return (\n    <div className=\"loading-tests\">\n      <Loading message=\"Loading tests\" subtext=\"Fetching all tests and submissions\" variant=\"inline\" size=\"large\" />\n    </div>\n  );}\n  if (error) {return <div className=\"error\">Error: {error}</div>;}\n\n  if (selectedTest && !showSubmissions) {\n    return <TestPaperView test={selectedTest} onBack={() => setSelectedTest(null)} />;\n  }\n\n  if (selectedTest && showSubmissions) {\n    return (\n      <TestSubmissionsView\n        test={selectedTest}\n        submissions={submissions}\n        onBack={() => setSelectedTest(null)}\n      />\n    );\n  }\n\n  return (\n    <div className=\"admin-tests\">\n      <div className=\"tests-header\">\n        <h2>Test Management</h2>\n        <p>Manage all tests, view papers, and monitor submissions</p>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"tests-controls\">\n        <div className=\"search-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search tests...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"search-input\"\n          />\n        </div>\n        <div className=\"filters\">\n          <select\n            value={filterDomain}\n            onChange={(e) => setFilterDomain(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Domains</option>\n            <option value=\"DSA\">DSA</option>\n            <option value=\"Fullstack\">Fullstack</option>\n            <option value=\"Java\">Java</option>\n            <option value=\"Data Science\">Data Science</option>\n          </select>\n          <select\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Tests Table */}\n      <div className=\"tests-table-container\">\n        <table className=\"tests-table\">\n          <thead>\n            <tr>\n              <th>Test Name</th>\n              <th>Domain</th>\n              <th>Status</th>\n              <th>Created</th>\n\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredTests.map(test => (\n              <tr key={test.id}>\n                <td>\n                  <div className=\"test-info\">\n                    <span className=\"test-name\">{test.title}</span>\n                    <span className=\"test-duration\">{test.duration || '60 minutes'}</span>\n                  </div>\n                </td>\n                <td>\n                  <span className=\"badge badge-primary\">{test.domain}</span>\n                </td>\n                <td>\n                  <span className={`badge ${test.status === 'active' ? 'badge-success' : 'badge-neutral'}`}>\n                    {test.status || 'inactive'}\n                  </span>\n                </td>\n                <td>{formatDateTime(test.createdAt)}</td>\n\n                <td>\n                  <div className=\"test-actions\">\n                    <button\n                      className=\"btn btn-sm btn-outline\"\n                      onClick={() => viewTestPaper(test)}\n                      title=\"View Test Paper\"\n                    >\n                      <Icon name=\"paper\" size=\"small\" /> Paper\n                    </button>\n                    <button\n                      className=\"btn btn-sm btn-outline\"\n                      onClick={() => viewSubmissions(test)}\n                      title=\"View Submissions\"\n                    >\n                      <Icon name=\"submissions\" size=\"small\" /> Submissions\n                    </button>\n                    <button\n                      className=\"btn btn-sm btn-danger\"\n                      onClick={() => deleteTest(test)}\n                      title=\"Delete Test\"\n                      disabled={loading}\n                    >\n                      <Icon name=\"fire\" size=\"small\" /> Delete\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {filteredTests.length === 0 && (\n        <div className=\"no-tests\">\n          <div className=\"no-tests-icon\"><Icon name=\"notebook\" size=\"2xl\" /></div>\n          <h3>No Tests Found</h3>\n          <p>No tests match your current filters</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Test Paper View Component\nfunction TestPaperView({ test, onBack }) {\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        // Fetch questions from the subcollection under the test\n        const questionsRef = collection(db, 'tests', test.id, 'questions');\n        const snapshot = await getDocs(questionsRef);\n        const questionsData = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: data.questionId || doc.id,\n            questionText: data.questionText,\n            questionType: data.questionType,\n            options: data.options || [],\n            correctAnswer: data.correctAnswer,\n            marks: data.marks || 1,\n            imageUrl: data.imageUrl || '',\n            ...data\n          };\n        });\n\n        // Sort questions by questionId if available\n        questionsData.sort((a, b) => {\n          const aId = parseInt(a.id) || 0;\n          const bId = parseInt(b.id) || 0;\n          return aId - bId;\n        });\n\n        setQuestions(questionsData);\n        setLoading(false);\n        console.log('Loaded questions for test paper:', questionsData);\n      } catch (err) {\n        console.error('Failed to load questions:', err);\n        setLoading(false);\n      }\n    };\n\n    loadQuestions();\n  }, [test.id]);\n\n  if (loading) {return (\n    <div className=\"loading-tests\">\n      <Loading message=\"Loading test paper\" subtext=\"Fetching questions and test structure\" variant=\"inline\" size=\"large\" />\n    </div>\n  );}\n\n  return (\n    <div className=\"test-paper-view\">\n      <div className=\"paper-header\">\n        <button className=\"btn btn-outline\" onClick={onBack}>\n          <Icon name=\"leaderboard\" size=\"small\" /> Back to Tests\n        </button>\n        <div className=\"paper-info\">\n          <h2>{test.title}</h2>\n          <div className=\"paper-meta\">\n            <span>Domain: {test.domain}</span>\n            <span>Duration: {test.duration || '60 minutes'}</span>\n            <span>Total Marks: {test.totalMarks || 'N/A'}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"questions-list\">\n        {questions.map((question, index) => (\n          <div key={question.id} className=\"question-card\">\n            <div className=\"question-header\">\n              <span className=\"question-number\">Q{index + 1}</span>\n              <div className=\"question-meta\">\n                <span className=\"question-type\">{question.questionType?.toUpperCase() || 'MCQ'}</span>\n                <span className=\"question-marks\">{question.marks || 1} marks</span>\n              </div>\n            </div>\n\n            <div className=\"question-content\">\n              <div className=\"question-text\">\n                {question.questionText || question.text || 'No question text'}\n              </div>\n\n              {/* Question Image */}\n              {question.imageUrl && (\n                <div className=\"question-image\">\n                  <img\n                    src={question.imageUrl}\n                    alt=\"Question illustration\"\n                    style={{\n                      maxWidth: '100%',\n                      maxHeight: '300px',\n                      borderRadius: '8px',\n                      border: '1px solid #e5e7eb',\n                      marginTop: '1rem'\n                    }}\n                    onError={(e) => {\n                      e.target.style.display = 'none';\n                    }}\n                  />\n                </div>\n              )}\n\n              {/* MCQ Options */}\n              {question.questionType === 'mcq' && question.options && question.options.length > 0 && (\n                <div className=\"question-options\">\n                  <h4>Options:</h4>\n                  {question.options.map((option, optIndex) => (\n                    <div\n                      key={optIndex}\n                      className={`option ${option === question.correctAnswer ? 'correct-option' : ''}`}\n                    >\n                      <span className=\"option-label\">{String.fromCharCode(65 + optIndex)}.</span>\n                      <span className=\"option-text\">{option}</span>\n                      {option === question.correctAnswer && (\n                        <span className=\"correct-indicator\"><Icon name=\"success\" size=\"small\" /> Correct</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Long Answer */}\n              {question.questionType === 'long' && (\n                <div className=\"long-answer-info\">\n                  <p><strong>Type:</strong> Long Answer Question</p>\n                  <p><strong>Expected:</strong> Detailed written response</p>\n                </div>\n              )}\n\n              {/* Code Question */}\n              {question.questionType === 'code' && (\n                <div className=\"code-question-info\">\n                  <p><strong>Type:</strong> Programming Question</p>\n                  <p><strong>Expected:</strong> Code implementation</p>\n                  {question.expectedAnswer && (\n                    <div className=\"expected-solution\">\n                      <strong>Sample Solution:</strong>\n                      <pre style={{\n                        background: '#f8f9fa',\n                        padding: '1rem',\n                        borderRadius: '4px',\n                        overflow: 'auto',\n                        marginTop: '0.5rem'\n                      }}>{question.expectedAnswer}</pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {questions.length === 0 && (\n        <div className=\"no-questions\">\n          <p>No questions found for this test</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Test Submissions View Component\nfunction TestSubmissionsView({ test, submissions, onBack }) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedSubmission, setSelectedSubmission] = useState(null);\n  const [exporting, setExporting] = useState(false);\n  const { user: currentUser } = useFirebase();\n  const [localSubmissions, setLocalSubmissions] = useState(submissions || []);\n\n  useEffect(() => {\n    setLocalSubmissions(submissions || []);\n  }, [submissions]);\n\n  const canDeleteSubmissions = (currentUser?.role === 'admin') || (currentUser?.role === 'head') ||\n    (currentUser?.email?.toLowerCase?.() === appConfig.superAdminEmail.toLowerCase());\n\n  const filteredSubmissions = localSubmissions.filter(submission =>\n    submission.candidateId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    submission.candidateName?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleDeleteSubmission = async (submission) => {\n    if (!canDeleteSubmissions) {\n      alert('You do not have permission to delete submissions');\n      return;\n    }\n    const confirmDelete = window.confirm(\n      `Delete submission for \"${submission.candidateName || submission.candidateId}\"?\\n\\n` +\n      `This will permanently remove:\\n` +\n      `• Their test result for \"${test.title}\"\\n` +\n      `• All monitoring logs for this test attempt\\n` +\n      `• All paste/tab switch logs for this test\\n\\n` +\n      `This action cannot be undone. Continue?`\n    );\n    if (!confirmDelete) {return;}\n\n    try {\n      console.log('Deleting submission and related data for:', submission.candidateId, 'test:', test.id);\n\n      // 1. Delete the main submission result\n      await deleteDoc(doc(db, 'results', submission.id));\n      console.log('✅ Deleted main submission');\n\n      // 2. Delete monitoring logs for this candidate and test\n      const monitoringQuery = query(\n        collection(db, 'monitoring'),\n        where('candidateId', '==', submission.candidateId),\n        where('testId', '==', test.id)\n      );\n      const monitoringSnapshot = await getDocs(monitoringQuery);\n      const monitoringDeletes = monitoringSnapshot.docs.map(doc => deleteDoc(doc.ref));\n      await Promise.all(monitoringDeletes);\n      console.log(`✅ Deleted ${monitoringSnapshot.size} monitoring logs`);\n\n      // 3. Delete paste logs for this candidate and test\n      const pasteQuery = query(\n        collection(db, 'pasteLogs'),\n        where('candidateId', '==', submission.candidateId),\n        where('testId', '==', test.id)\n      );\n      const pasteSnapshot = await getDocs(pasteQuery);\n      const pasteDeletes = pasteSnapshot.docs.map(doc => deleteDoc(doc.ref));\n      await Promise.all(pasteDeletes);\n      console.log(`✅ Deleted ${pasteSnapshot.size} paste logs`);\n\n      // 4. Delete tab switch logs for this candidate and test\n      const tabSwitchQuery = query(\n        collection(db, 'tabSwitchLogs'),\n        where('candidateId', '==', submission.candidateId),\n        where('testId', '==', test.id)\n      );\n      const tabSwitchSnapshot = await getDocs(tabSwitchQuery);\n      const tabSwitchDeletes = tabSwitchSnapshot.docs.map(doc => deleteDoc(doc.ref));\n      await Promise.all(tabSwitchDeletes);\n      console.log(`✅ Deleted ${tabSwitchSnapshot.size} tab switch logs`);\n\n      // 5. Update local UI\n      setLocalSubmissions(prev => prev.filter(s => s.id !== submission.id));\n      setSelectedSubmission(null);\n\n      const totalDeleted = 1 + monitoringSnapshot.size + pasteSnapshot.size + tabSwitchSnapshot.size;\n      alert(`Submission and all related data deleted successfully!\\n\\nDeleted ${totalDeleted} records total:\\n• 1 submission result\\n• ${monitoringSnapshot.size} monitoring logs\\n• ${pasteSnapshot.size} paste logs\\n• ${tabSwitchSnapshot.size} tab switch logs`);\n\n    } catch (error) {\n      console.error('Error deleting submission and related data:', error);\n      alert('Failed to delete submission: ' + (error.message || 'Unknown error'));\n    }\n  };\n\n  // If viewing individual submission\n  if (selectedSubmission) {\n    return (\n      <SubmissionDetailView\n        submission={selectedSubmission}\n        test={test}\n        onBack={() => setSelectedSubmission(null)}\n      />\n    );\n  }\n\n  return (\n    <div className=\"test-submissions-view\">\n      <div className=\"submissions-header\">\n        <button className=\"btn btn-outline\" onClick={onBack}>\n          <Icon name=\"leaderboard\" size=\"small\" /> Back to Tests\n        </button>\n        <div className=\"submissions-info\">\n          <h2>Submissions: {test.title}</h2>\n          <p>{localSubmissions.length} total submissions</p>\n        </div>\n      </div>\n\n      <div className=\"submissions-controls\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by candidate ID or name...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"search-input\"\n        />\n        <div className=\"export-actions\">\n          <button\n            className={`btn btn-outline ${exporting ? 'btn-loading' : ''}`}\n            onClick={() => exportSubmissionsToExcel({ submissions: localSubmissions, selectedTest: test, setLoading: setExporting })}\n            disabled={exporting || localSubmissions.length === 0}\n            title=\"Export submissions to Excel\"\n          >\n            <Icon name=\"notebook\" size=\"small\" /> Export Excel\n          </button>\n          <button\n            className={`btn btn-outline ${exporting ? 'btn-loading' : ''}`}\n            onClick={() => exportSubmissionsToPDF({ submissions: localSubmissions, selectedTest: test, setLoading: setExporting, exportType: 'admin' })}\n            disabled={exporting || localSubmissions.length === 0}\n            title=\"Export submissions to PDF\"\n            style={{ marginLeft: '8px' }}\n          >\n            <Icon name=\"paper\" size=\"small\" /> Export PDF\n          </button>\n        </div>\n      </div>\n\n      <div className=\"submissions-table-container\">\n        <table className=\"submissions-table\">\n          <thead>\n            <tr>\n              <th>Candidate</th>\n              <th>Submission Time</th>\n              <th>Score</th>\n              <th>Status</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredSubmissions.map(submission => (\n              <tr key={submission.id}>\n                <td>\n                  <div className=\"candidate-info\">\n                    <span className=\"candidate-name\">{submission.candidateName || 'Unknown'}</span>\n                  </div>\n                </td>\n                <td>{formatDateTime(submission.submittedAt)}</td>\n                <td>\n                  <span className=\"score\">\n                    {(() => {\n                      // Debug logging for score display\n                      console.log('Score Debug:', {\n                        candidateName: submission.candidateName,\n                        totalMarksAwarded: submission.totalMarksAwarded,\n                        maxPossibleMarks: submission.maxPossibleMarks,\n                        testTotalMarks: test?.totalMarks,\n                        score: submission.score,\n                        evaluatedBy: submission.evaluatedBy\n                      });\n\n                      // Show actual marks distributed by head/admin out of test total marks\n                      if (submission.totalMarksAwarded !== undefined && submission.totalMarksAwarded !== null) {\n                        let testTotalMarks = test?.totalMarks || 100;\n\n                        // Fix data issue: if totalMarksAwarded > testTotalMarks, likely testTotalMarks is wrong\n                        if (submission.totalMarksAwarded > testTotalMarks && testTotalMarks < 50) {\n                          // If test total marks seems too low and awarded marks is higher, use awarded marks as reference\n                          testTotalMarks = 100; // Default to 100 as it's more reasonable\n                          console.warn('Data issue detected: totalMarksAwarded > testTotalMarks, using 100 as fallback');\n                        }\n\n                        return `${submission.totalMarksAwarded}/${testTotalMarks}`;\n                      } else if (submission.score !== undefined) {\n                        // If only percentage is available, try to calculate marks\n                        const testTotalMarks = test?.totalMarks || 100;\n                        const calculatedMarks = Math.round((submission.score / 100) * testTotalMarks);\n                        return `${calculatedMarks}/${testTotalMarks} (${submission.score}%)`;\n                      } else {\n                        return 'Not graded';\n                      }\n                    })()}\n                  </span>\n                </td>\n                <td>\n                  <span className={`badge ${submission.status === 'evaluated' ? 'badge-success' : 'badge-warning'}`}>\n                    {submission.status || 'submitted'}\n                  </span>\n                </td>\n                <td>\n                  <button\n                    className=\"btn btn-sm btn-outline\"\n                    title=\"View Details\"\n                    onClick={() => setSelectedSubmission(submission)}\n                  >\n                    <Icon name=\"computer\" size=\"small\" /> View\n                  </button>\n                  {canDeleteSubmissions && (\n                    <button\n                      className=\"btn btn-sm btn-danger\"\n                      title=\"Delete Submission\"\n                      style={{ marginLeft: '0.5rem' }}\n                      onClick={() => handleDeleteSubmission(submission)}\n                    >\n                      <Icon name=\"fire\" size=\"small\" /> Delete\n                    </button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {filteredSubmissions.length === 0 && (\n        <div className=\"no-submissions\">\n          <div className=\"no-submissions-icon\">📊</div>\n          <h3>No Submissions Found</h3>\n          <p>No submissions match your search criteria</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Submission Detail View Component\nfunction SubmissionDetailView({ submission, test, onBack }) {\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [marksDistribution, setMarksDistribution] = useState({});\n  const [totalMarks, setTotalMarks] = useState(0);\n  const [saving, setSaving] = useState(false);\n  // const [showMarksPanel] = useState(true); // Commented out as not currently used\n\n  useEffect(() => {\n    const loadSubmissionDetails = async () => {\n      try {\n        // Fetch questions from the test\n        const questionsRef = collection(db, 'tests', test.id, 'questions');\n        const questionsSnapshot = await getDocs(questionsRef);\n        const questionsData = questionsSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: data.questionId || doc.id,\n            questionText: data.questionText,\n            questionType: data.questionType,\n            options: data.options || [],\n            correctAnswer: data.correctAnswer,\n            marks: data.marks || 1,\n            imageUrl: data.imageUrl || '',\n            ...data\n          };\n        });\n\n        // Sort questions by ID\n        questionsData.sort((a, b) => {\n          const aId = parseInt(a.id) || 0;\n          const bId = parseInt(b.id) || 0;\n          return aId - bId;\n        });\n\n        // Add candidate answers to questions\n        const questionsWithAnswers = questionsData.map(question => {\n          const candidateAnswer = submission.answers?.[question.id] || '';\n          return {\n            ...question,\n            candidateAnswer,\n            isCorrect: question.questionType === 'mcq' ?\n              candidateAnswer === question.correctAnswer : null\n          };\n        });\n\n        // Initialize marks distribution\n        const initialMarks = {};\n        let calculatedTotal = 0;\n\n        questionsWithAnswers.forEach(question => {\n          // Check if marks already exist in submission\n          const existingMarks = submission.questionMarks?.[question.id];\n          if (existingMarks !== undefined) {\n            initialMarks[question.id] = existingMarks;\n            calculatedTotal += existingMarks;\n          } else {\n            // Initialize all questions with 0 marks for manual grading\n            initialMarks[question.id] = 0;\n          }\n        });\n\n        setQuestions(questionsWithAnswers);\n        setMarksDistribution(initialMarks);\n        setTotalMarks(calculatedTotal);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error loading submission details:', error);\n        setLoading(false);\n      }\n    };\n\n    loadSubmissionDetails();\n  }, [submission, test.id]);\n\n  const handleMarksChange = (questionId, marks) => {\n    const numericMarks = Math.max(0, parseFloat(marks) || 0);\n    const maxMarks = questions.find(q => q.id === questionId)?.marks || 1;\n    const finalMarks = Math.min(numericMarks, maxMarks);\n\n    setMarksDistribution(prev => ({\n      ...prev,\n      [questionId]: finalMarks\n    }));\n\n    // Recalculate total\n    const newTotal = Object.values({\n      ...marksDistribution,\n      [questionId]: finalMarks\n    }).reduce((sum, mark) => sum + (mark || 0), 0);\n    setTotalMarks(newTotal);\n  };\n\n  const saveMarksDistribution = async () => {\n    setSaving(true);\n    try {\n      // Calculate percentage score\n      const maxPossibleMarks = questions.reduce((sum, q) => sum + (q.marks || 1), 0);\n      const percentage = maxPossibleMarks > 0 ? Math.round((totalMarks / maxPossibleMarks) * 100) : 0;\n\n      // Update submission in database\n      const submissionRef = doc(db, 'results', submission.id);\n      await updateDoc(submissionRef, {\n        questionMarks: marksDistribution,\n        totalMarksAwarded: totalMarks,\n        maxPossibleMarks: maxPossibleMarks,\n        score: percentage,\n        status: 'evaluated',\n        evaluatedAt: serverTimestamp(),\n        evaluatedBy: 'admin'\n      });\n\n      alert('Marks saved successfully!');\n    } catch (error) {\n      console.error('Error saving marks:', error);\n      alert('Failed to save marks. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n\n  if (loading) {\n    return (\n      <div className=\"loading-tests\">\n        <Loading message=\"Loading submission details\" subtext=\"Fetching candidate answers and question data\" variant=\"inline\" size=\"large\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"submission-detail-view\">\n      <div className=\"submission-header\">\n        <button className=\"btn btn-outline\" onClick={onBack}>\n          <Icon name=\"submissions\" size=\"small\" /> Back to Submissions\n        </button>\n        <div className=\"submission-info\">\n          <h2>Submission Details</h2>\n          <div className=\"submission-meta\">\n            <div className=\"meta-item\">\n              <strong>Candidate:</strong> {submission.candidateName || 'Unknown'}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Test:</strong> {test.title}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Submitted:</strong> {formatDateTime(submission.submittedAt)}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Score:</strong> {(() => {\n                if (submission.totalMarksAwarded !== undefined && submission.totalMarksAwarded !== null) {\n                  let testTotalMarks = test?.totalMarks || 100;\n\n                  // Fix data issue: if totalMarksAwarded > testTotalMarks, likely testTotalMarks is wrong\n                  if (submission.totalMarksAwarded > testTotalMarks && testTotalMarks < 50) {\n                    testTotalMarks = 100; // Default to 100 as it's more reasonable\n                  }\n\n                  return `${submission.totalMarksAwarded}/${testTotalMarks} marks`;\n                } else if (submission.score !== undefined) {\n                  const testTotalMarks = test?.totalMarks || 100;\n                  const calculatedMarks = Math.round((submission.score / 100) * testTotalMarks);\n                  return `${calculatedMarks}/${testTotalMarks} marks (${submission.score}%)`;\n                } else {\n                  return 'Not graded';\n                }\n              })()}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Status:</strong>\n              <span className={`badge ${submission.status === 'evaluated' ? 'badge-success' : 'badge-warning'}`}>\n                {submission.status || 'submitted'}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"marks-summary-header\">\n          <div className=\"marks-total-display\">\n            <span className=\"marks-total-label\">Total Marks:</span>\n            <span className=\"marks-total-value\">{totalMarks} / {questions.reduce((sum, q) => sum + (q.marks || 1), 0)}</span>\n            <span className=\"marks-percentage\">({questions.reduce((sum, q) => sum + (q.marks || 1), 0) > 0 ?\n              Math.round((totalMarks / questions.reduce((sum, q) => sum + (q.marks || 1), 0)) * 100) : 0}%)</span>\n          </div>\n          <div className=\"marks-actions\">\n            <button\n              className={`btn btn-primary ${saving ? 'btn-loading' : ''}`}\n              onClick={saveMarksDistribution}\n              disabled={saving}\n            >\n              {saving ? 'Saving...' : <><Icon name=\"shield\" size=\"small\" /> Save All Marks</>}\n            </button>\n          </div>\n        </div>\n      </div>\n\n\n      <div className=\"submission-questions\">\n        {questions.map((question, index) => (\n          <div key={question.id} className=\"submission-question-card\">\n            <div className=\"question-header\">\n              <div className=\"question-title-section\">\n                <span className=\"question-number\">Q{index + 1}</span>\n                <div className=\"question-meta\">\n                  <span className=\"question-type\">{question.questionType?.toUpperCase() || 'MCQ'}</span>\n                  <span className=\"question-marks\">Max: {question.marks || 1} marks</span>\n                  {question.questionType === 'mcq' && (\n                    <div className=\"mcq-answer-preview\">\n                      <span className=\"candidate-choice\">Choice: {question.candidateAnswer || 'None'}</span>\n                      <span className={`answer-status ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                        {question.isCorrect ? <><Icon name=\"success\" size=\"small\" /> Correct</> : <><Icon name=\"fire\" size=\"small\" /> Incorrect</>}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"marks-input-section\">\n                <div className=\"marks-input-container\">\n                  <label className=\"marks-label\">Marks Awarded:</label>\n                  <div className=\"marks-input-wrapper\">\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max={question.marks || 1}\n                      step=\"0.5\"\n                      value={marksDistribution[question.id] || 0}\n                      onChange={(e) => handleMarksChange(question.id, e.target.value)}\n                      className=\"marks-input\"\n                    />\n                    <span className=\"marks-max\">/ {question.marks || 1}</span>\n                  </div>\n                  {question.questionType === 'mcq' && question.isCorrect !== null && (\n                    <span className={`mcq-result-indicator ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                      {question.isCorrect ? <><Icon name=\"success\" size=\"small\" /> Correct Answer</> : <><Icon name=\"fire\" size=\"small\" /> Wrong Answer</>}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"question-content\">\n              <div className=\"question-text\">\n                {question.questionText || 'No question text'}\n              </div>\n\n              {/* Question Image */}\n              {question.imageUrl && (\n                <div className=\"question-image\">\n                  <img\n                    src={question.imageUrl}\n                    alt=\"Question illustration\"\n                    style={{\n                      maxWidth: '100%',\n                      maxHeight: '300px',\n                      borderRadius: '8px',\n                      border: '1px solid #e5e7eb',\n                      marginTop: '1rem'\n                    }}\n                    onError={(e) => {\n                      e.target.style.display = 'none';\n                    }}\n                  />\n                </div>\n              )}\n\n              {/* MCQ Options and Answer */}\n              {question.questionType === 'mcq' && (\n                <div className=\"mcq-section\">\n                  <div className=\"candidate-answer-display\">\n                    <h4>Candidate's Answer:</h4>\n                    <div className={`candidate-selected-answer ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                      <span className=\"selected-option-text\">\n                        {question.candidateAnswer || 'No answer selected'}\n                      </span>\n                      <span className={`answer-result ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                        {question.isCorrect ? <><Icon name=\"success\" size=\"small\" /> Correct</> : <><Icon name=\"fire\" size=\"small\" /> Incorrect</>}\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"question-options\">\n                    <h4>All Options:</h4>\n                    {question.options.map((option, optIndex) => (\n                      <div\n                        key={optIndex}\n                        className={`option ${\n                          option === question.correctAnswer ? 'correct-option' : ''\n                        } ${\n                          option === question.candidateAnswer ? 'selected-option' : ''\n                        }`}\n                      >\n                        <span className=\"option-label\">{String.fromCharCode(65 + optIndex)}.</span>\n                        <span className=\"option-text\">{option}</span>\n                        {option === question.correctAnswer && (\n                          <span className=\"correct-indicator\"><Icon name=\"success\" size=\"small\" /> Correct Answer</span>\n                        )}\n                        {option === question.candidateAnswer && option !== question.correctAnswer && (\n                          <span className=\"selected-indicator\">← Candidate Selected</span>\n                        )}\n                        {option === question.candidateAnswer && option === question.correctAnswer && (\n                          <span className=\"both-indicator\">← Candidate Selected (Correct!)</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Long Answer or Code Answer */}\n              {(question.questionType === 'long' || question.questionType === 'code') && (\n                <div className=\"text-answer-section\">\n                  <h4>Candidate's Answer:</h4>\n                  <div className=\"candidate-answer\">\n                    {question.candidateAnswer ? (\n                      <pre style={{\n                        background: '#f8f9fa',\n                        padding: '1rem',\n                        borderRadius: '8px',\n                        border: '1px solid #e5e7eb',\n                        whiteSpace: 'pre-wrap',\n                        fontFamily: question.questionType === 'code' ? 'monospace' : 'inherit'\n                      }}>\n                        {question.candidateAnswer}\n                      </pre>\n                    ) : (\n                      <div className=\"no-answer\">No answer provided</div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {questions.length === 0 && (\n        <div className=\"no-questions\">\n          <p>No questions found for this submission</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// 4. Monitoring Section Component\nfunction AdminMonitoring() {\n  const [tests, setTests] = useState([]);\n  const [selectedTest, setSelectedTest] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [selectedParticipant, setSelectedParticipant] = useState(null);\n  const [monitoringData, setMonitoringData] = useState([]);\n  const [participantMonitoring, setParticipantMonitoring] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(db, 'tests'),\n      (snapshot) => {\n        const testsData = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setTests(testsData);\n        setLoading(false);\n      },\n      (err) => {\n        console.error('Error loading tests for monitoring:', err);\n        setError('Failed to load tests');\n        setLoading(false);\n      }\n    );\n\n    return unsubscribe;\n  }, []);\n\n  const loadParticipants = async (testId) => {\n    try {\n      // Set up real-time listener for participants\n      const participantsQuery = query(\n        collection(db, 'results'),\n        where('testId', '==', testId)\n      );\n\n      const unsubscribeParticipants = onSnapshot(participantsQuery, async (snapshot) => {\n        const participantsData = await Promise.all(snapshot.docs.map(async (resultDoc) => {\n          const participantData = { id: resultDoc.id, ...resultDoc.data() };\n\n          // Process candidate name - handle emails stored in candidateName field\n          if (participantData.candidateName && participantData.candidateName.includes('@')) {\n            // If candidateName is an email, extract the username part\n            participantData.candidateName = participantData.candidateName.split('@')[0];\n          } else if (participantData.candidateId) {\n            // Try to get better name from user database\n            try {\n              // Try to get user by Firebase UID\n              const userDoc = await getDoc(doc(db, 'user', participantData.candidateId));\n\n              if (userDoc.exists()) {\n                const userData = userDoc.data();\n\n                // Use the best available name\n                if (userData.name) {\n                  participantData.candidateName = userData.name;\n                } else if (userData.displayName) {\n                  participantData.candidateName = userData.displayName;\n                } else if (userData.fullName) {\n                  participantData.candidateName = userData.fullName;\n                } else if (userData.firstName) {\n                  participantData.candidateName = userData.firstName;\n                } else if (userData.email) {\n                  // If we have email, extract the prefix\n                  participantData.candidateName = userData.email.includes('@') ? userData.email.split('@')[0] : userData.email;\n                }\n              } else {\n                // Fallback to using last 4 chars of UID\n                participantData.candidateName = `Candidate ${participantData.candidateId.slice(-4)}`;\n              }\n            } catch (error) {\n              console.error('Error fetching candidate name:', error);\n              // Fallback to using last 4 chars of UID\n              participantData.candidateName = `Candidate ${participantData.candidateId.slice(-4)}`;\n            }\n          }\n\n          // Final fallback\n          if (!participantData.candidateName) {\n            participantData.candidateName = 'Unknown';\n          }\n\n          return participantData;\n        }));\n\n        setParticipants(participantsData);\n\n        // Load monitoring data for all participants\n        loadAllMonitoringData(testId, participantsData);\n      });\n\n      // Store the unsubscribe function for cleanup\n      return unsubscribeParticipants;\n    } catch (err) {\n      console.error('Error loading participants:', err);\n      setError('Failed to load participants');\n    }\n  };\n\n  const loadAllMonitoringData = async (testId, participantsData) => {\n    console.log('🔍 ADMIN MONITORING: Loading monitoring data for test:', testId);\n    console.log('🔍 ADMIN MONITORING: Participants:', participantsData.map(p => ({ id: p.id, candidateId: p.candidateId, name: p.candidateName })));\n\n    try {\n      const monitoringPromises = participantsData.map(async (participant) => {\n        if (!participant.candidateId) {\n          console.log('🔍 ADMIN MONITORING: Skipping participant without candidateId:', participant.id);\n          return { [participant.id]: {} };\n        }\n\n        console.log(`🔍 ADMIN MONITORING: Querying monitoring for candidate ${participant.candidateId}`);\n\n        const monitoringQuery = query(\n          collection(db, 'monitoring'),\n          where('candidateId', '==', participant.candidateId),\n          where('testId', '==', testId)\n        );\n\n        const snapshot = await getDocs(monitoringQuery);\n        const events = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n        console.log(`🔍 ADMIN MONITORING: Found ${events.length} events for candidate ${participant.candidateId}:`, events);\n\n        // Aggregate monitoring data\n        const aggregatedData = {\n          tabSwitches: events.filter(e => e.type === 'tab_switch' || e.type === 'visibility_change'),\n          copyEvents: events.filter(e => e.type === 'copy'),\n          pasteEvents: events.filter(e => e.type === 'paste'),\n          totalViolations: events.length,\n          lastActivity: events.length > 0 ? Math.max(...events.map(e => e.timestamp?.toMillis() || 0)) : null\n        };\n\n        console.log(`🔍 ADMIN MONITORING: Aggregated data for ${participant.candidateId}:`, aggregatedData);\n\n        return { [participant.id]: aggregatedData };\n      });\n\n      const results = await Promise.all(monitoringPromises);\n      const monitoringMap = results.reduce((acc, curr) => ({ ...acc, ...curr }), {});\n\n      console.log('🔍 ADMIN MONITORING: Final monitoring map:', monitoringMap);\n      setParticipantMonitoring(monitoringMap);\n    } catch (err) {\n      console.error('❌ ADMIN MONITORING: Error loading monitoring data:', err);\n    }\n  };\n\n  const loadMonitoringData = async (candidateId, testId) => {\n    try {\n      // Set up real-time listener for specific participant monitoring data\n      // Temporarily disable orderBy to isolate index issue\n      const monitoringQuery = query(\n        collection(db, 'monitoring'),\n        where('candidateId', '==', candidateId),\n        where('testId', '==', testId)\n        // orderBy('timestamp', 'desc') // Temporarily disabled to debug index issue\n      );\n\n      const unsubscribeMonitoring = onSnapshot(monitoringQuery, (snapshot) => {\n        const events = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setMonitoringData(events);\n      });\n\n      return unsubscribeMonitoring;\n    } catch (err) {\n      console.error('Error loading monitoring data:', err);\n      setError('Failed to load monitoring data');\n    }\n  };\n\n  const selectTest = (test) => {\n    setSelectedTest(test);\n    setSelectedParticipant(null);\n    setParticipantMonitoring({});\n    loadParticipants(test.id);\n  };\n\n  const selectParticipant = (participant) => {\n    setSelectedParticipant(participant);\n    loadMonitoringData(participant.candidateId, selectedTest.id);\n  };\n\n  const getSuspiciousActivityCount = (participant) => {\n    const monitoring = participantMonitoring[participant.id] || {};\n    const tabSwitches = monitoring.tabSwitches?.length || 0;\n    const copyEvents = monitoring.copyEvents?.length || 0;\n    const pasteEvents = monitoring.pasteEvents?.length || 0;\n    return tabSwitches + copyEvents + pasteEvents;\n  };\n\n  const isSuspicious = (participant) => {\n    return getSuspiciousActivityCount(participant) > 3; // Lowered threshold for better detection\n  };\n\n  const getMonitoringStats = (participant) => {\n    const monitoring = participantMonitoring[participant.id] || {};\n    return {\n      tabSwitches: monitoring.tabSwitches?.length || 0,\n      copyEvents: monitoring.copyEvents?.length || 0,\n      pasteEvents: monitoring.pasteEvents?.length || 0,\n      totalViolations: monitoring.totalViolations || 0,\n      lastActivity: monitoring.lastActivity\n    };\n  };\n\n  if (loading) {return (\n    <div className=\"loading-tests\">\n      <Loading message=\"Loading monitoring data\" subtext=\"Analyzing test activities and security logs\" variant=\"inline\" size=\"large\" />\n    </div>\n  );}\n  if (error) {return <div className=\"error\">Error: {error}</div>;}\n\n  // Participant Detail View\n  if (selectedParticipant) {\n    return (\n      <ParticipantDetailView\n        participant={selectedParticipant}\n        test={selectedTest}\n        monitoringData={monitoringData}\n        onBack={() => setSelectedParticipant(null)}\n      />\n    );\n  }\n\n  // Participants List View\n  if (selectedTest) {\n    return (\n      <div className=\"participants-monitoring\">\n        <div className=\"monitoring-header\">\n          <button className=\"btn btn-outline\" onClick={() => setSelectedTest(null)}>\n            <Icon name=\"leaderboard\" size=\"small\" /> Back to Tests\n          </button>\n          <div className=\"test-info\">\n            <h2>Monitoring: {selectedTest.title}</h2>\n            <p>{participants.length} participants being monitored</p>\n          </div>\n        </div>\n\n        <div className=\"participants-table-container\">\n          <table className=\"participants-table\">\n            <thead>\n              <tr>\n                <th>Participant</th>\n                <th>Status</th>\n                <th>Tab Switches</th>\n                <th>Copy Events</th>\n                <th>Paste Events</th>\n                <th>Risk Level</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {participants.map(participant => (\n                <tr\n                  key={participant.id}\n                  className={isSuspicious(participant) ? 'suspicious-row' : ''}\n                >\n                  <td>\n                    <div className=\"participant-info\">\n                      <span className=\"participant-name\">{participant.candidateName || 'Unknown'}</span>\n                    </div>\n                  </td>\n                  <td>\n                    <span className={`badge ${participant.status === 'blocked' || participant.blocked ? 'badge-error' :\n                      participant.status === 'in_progress' || participant.status === 'active' ? 'badge-success' : 'badge-neutral'}`}>\n                      {participant.status === 'blocked' || participant.blocked ? 'Blocked' :\n                       participant.status === 'in_progress' ? 'In Progress' :\n                       participant.status === 'active' ? 'Active' :\n                       participant.status === 'completed' ? 'Completed' : 'Unknown'}\n                    </span>\n                  </td>\n                  <td>\n                    <span className={`activity-count ${getMonitoringStats(participant).tabSwitches > 2 ? 'high' : ''}`}>\n                      {getMonitoringStats(participant).tabSwitches}\n                    </span>\n                  </td>\n                  <td>\n                    <span className={`activity-count ${getMonitoringStats(participant).copyEvents > 1 ? 'high' : ''}`}>\n                      {getMonitoringStats(participant).copyEvents}\n                    </span>\n                  </td>\n                  <td>\n                    <span className={`activity-count ${getMonitoringStats(participant).pasteEvents > 1 ? 'high' : ''}`}>\n                      {getMonitoringStats(participant).pasteEvents}\n                    </span>\n                  </td>\n                  <td>\n                    <span className={`risk-level ${isSuspicious(participant) ? 'high' : 'low'}`}>\n                      {isSuspicious(participant) ? '🔴 High' : '🟢 Low'}\n                    </span>\n                  </td>\n                  <td>\n                    <button\n                      className=\"btn btn-sm btn-outline\"\n                      onClick={() => selectParticipant(participant)}\n                      title=\"View Details\"\n                    >\n                      <Icon name=\"computer\" size=\"small\" /> Details\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {participants.length === 0 && (\n          <div className=\"no-participants\">\n            <div className=\"no-participants-icon\">👥</div>\n            <h3>No Participants</h3>\n            <p>No participants found for this test</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Tests Overview\n  return (\n    <div className=\"admin-monitoring\">\n      <div className=\"monitoring-header\">\n        <h2>Real-time Monitoring</h2>\n        <p>Monitor test participants and detect suspicious activities</p>\n      </div>\n\n      <div className=\"tests-monitoring-grid\">\n        {tests.map(test => (\n          <div\n            key={test.id}\n            className=\"test-monitoring-card\"\n            onClick={() => selectTest(test)}\n          >\n            <div className=\"test-header\">\n              <h3>{test.title}</h3>\n              <span className={`badge ${test.status === 'active' ? 'badge-success' : 'badge-neutral'}`}>\n                {test.status || 'inactive'}\n              </span>\n            </div>\n            <div className=\"test-details\">\n              <div className=\"test-meta\">\n                <span>Domain: {test.domain}</span>\n                <span>Participants: {test.participantCount || 0}</span>\n              </div>\n              <div className=\"monitoring-stats\">\n                <span className=\"stat\">\n                  <span className=\"stat-icon\"><Icon name=\"computer\" size=\"small\" /></span>\n                  <span>Click to monitor</span>\n                </span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {tests.length === 0 && (\n        <div className=\"no-tests\">\n          <div className=\"no-tests-icon\"><Icon name=\"notebook\" size=\"2xl\" /></div>\n          <h3>No Tests Available</h3>\n          <p>No tests available for monitoring</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Helper function to get question name from ID\nfunction getQuestionName(questionId, testData = null, storedQuestionText = null) {\n  if (!questionId) {return 'Unknown Question';}\n\n  // If we have stored question text from monitoring data, use it directly\n  if (storedQuestionText && storedQuestionText !== 'Question text not available') {\n    const cleanText = storedQuestionText\n      .replace(/<[^>]*>/g, '') // Remove HTML tags\n      .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n      .trim();\n    const shortText = cleanText.slice(0, 100);\n    return `\"${shortText}${cleanText.length > 100 ? '...' : ''}\"`;\n  }\n\n  console.log('🔍 Getting question name for:', questionId, 'Test data:', testData?.questions?.length);\n  console.log('🔍 Available questions:', testData?.questions?.map(q => ({ id: q.id, hasQuestionText: !!q.questionText, hasQuestion: !!q.question, hasText: !!q.text })));\n  console.log('🔍 All question IDs:', testData?.questions?.map(q => q.id));\n  console.log('🔍 Question ID types:', testData?.questions?.map(q => ({ id: q.id, type: typeof q.id })));\n  console.log('🔍 Looking for ID type:', typeof questionId);\n\n  // Show available question texts for debugging\n  if (testData?.questions?.length > 0) {\n    console.log('🔍 Available question texts:', testData.questions.map(q => ({\n      id: q.id,\n      text: (q.questionText || q.question || q.text || 'No text').substring(0, 50) + '...'\n    })));\n  }\n\n  // Handle notes fields (e.g., \"1758793866121_notes\")\n  if (questionId.includes('_notes')) {\n    const baseQuestionId = questionId.replace('_notes', '');\n\n    // Try to find the actual question text\n    if (testData?.questions) {\n      // First try exact ID match\n      let question = testData.questions.find(q => q.id === baseQuestionId);\n      console.log('🔍 Found question for notes (exact match):', question);\n\n      // If no exact match, try partial ID match\n      if (!question) {\n        question = testData.questions.find(q => q.id.includes(baseQuestionId) || baseQuestionId.includes(q.id));\n        console.log('🔍 Found question for notes (partial match):', question);\n      }\n\n      // If still no match, try string conversion and different ID formats\n      if (!question) {\n        const baseQuestionIdStr = String(baseQuestionId);\n        question = testData.questions.find(q =>\n          String(q.id) === baseQuestionIdStr ||\n          String(q.id).includes(baseQuestionIdStr) ||\n          baseQuestionIdStr.includes(String(q.id))\n        );\n        console.log('🔍 Found question for notes (string match):', question);\n      }\n\n      console.log('🔍 Notes question properties:', question ? Object.keys(question) : 'No question found');\n\n      // Try multiple possible question text properties\n      const questionText = question?.questionText || question?.question || question?.text;\n      console.log('🔍 Notes question text found:', questionText ? questionText.substring(0, 50) + '...' : 'No text found');\n\n      if (questionText) {\n        // Clean the question text and make it more readable\n        const cleanText = questionText\n          .replace(/<[^>]*>/g, '') // Remove HTML tags\n          .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n          .trim();\n        const shortText = cleanText.slice(0, 80);\n        return `\"${shortText}${cleanText.length > 80 ? '...' : ''}\" (Notes Field)`;\n      }\n    }\n\n    return `Question ${baseQuestionId.slice(0, 8)}... (Notes Field)`;\n  }\n\n  // Try to find the actual question text\n  if (testData?.questions) {\n    // First try exact ID match\n    let question = testData.questions.find(q => q.id === questionId);\n    console.log('🔍 Found question (exact match):', question);\n\n    // If no exact match, try partial ID match (in case of ID variations)\n    if (!question) {\n      question = testData.questions.find(q => q.id.includes(questionId) || questionId.includes(q.id));\n      console.log('🔍 Found question (partial match):', question);\n    }\n\n    // If still no match, try string conversion and different ID formats\n    if (!question) {\n      const questionIdStr = String(questionId);\n      console.log('🔍 Trying string conversion - looking for:', questionIdStr);\n      console.log('🔍 Available IDs as strings:', testData.questions.map(q => String(q.id)));\n\n      question = testData.questions.find(q =>\n        String(q.id) === questionIdStr ||\n        String(q.id).includes(questionIdStr) ||\n        questionIdStr.includes(String(q.id))\n      );\n      console.log('🔍 Found question (string match):', question);\n    }\n\n    // If still no match, try to find by any partial match\n    if (!question) {\n      console.log('🔍 Trying any partial match...');\n      for (let i = 0; i < testData.questions.length; i++) {\n        const q = testData.questions[i];\n        console.log(`🔍 Comparing \"${questionId}\" with \"${q.id}\" (${typeof q.id})`);\n        if (String(q.id) === String(questionId)) {\n          question = q;\n          console.log('🔍 Found exact match!', question);\n          break;\n        }\n      }\n    }\n\n    // If still no match, try to find by timestamp similarity (for timestamp-based IDs)\n    if (!question && questionId.length > 10) {\n      console.log('🔍 Trying timestamp-based matching...');\n      const targetTimestamp = parseInt(questionId);\n      if (!isNaN(targetTimestamp)) {\n        // Find the closest timestamp match\n        let closestQuestion = null;\n        let smallestDiff = Infinity;\n\n        for (const q of testData.questions) {\n          const qTimestamp = parseInt(q.id);\n          if (!isNaN(qTimestamp)) {\n            const diff = Math.abs(targetTimestamp - qTimestamp);\n            if (diff < smallestDiff) {\n              smallestDiff = diff;\n              closestQuestion = q;\n            }\n          }\n        }\n\n        // If the difference is reasonable (within 1 hour = 3600000 ms), use it\n        if (closestQuestion && smallestDiff < 3600000) {\n          question = closestQuestion;\n          console.log('🔍 Found timestamp-based match!', {\n            target: questionId,\n            found: question.id,\n            diff: smallestDiff,\n            question: question.questionText?.substring(0, 50) + '...'\n          });\n        }\n      }\n    }\n\n    console.log('🔍 Question properties:', question ? Object.keys(question) : 'No question found');\n\n    // Try multiple possible question text properties\n    const questionText = question?.questionText || question?.question || question?.text;\n    console.log('🔍 Question text found:', questionText ? questionText.substring(0, 50) + '...' : 'No text found');\n\n    if (questionText) {\n      // Clean the question text and make it more readable\n      const cleanText = questionText\n        .replace(/<[^>]*>/g, '') // Remove HTML tags\n        .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n        .trim();\n      const shortText = cleanText.slice(0, 100);\n      return `\"${shortText}${cleanText.length > 100 ? '...' : ''}\"`;\n    }\n  }\n\n  // For regular question IDs, show in a readable format\n  if (questionId.length > 10) {\n    // If it's a long ID (timestamp-based), show it as \"Question [first few digits]\"\n    console.log('🔍 Falling back to ID display for:', questionId);\n    console.log('🔍 This question ID does not exist in current test data');\n\n    // Try to show a helpful message with available questions\n    if (testData?.questions?.length > 0) {\n      const firstQuestion = testData.questions[0];\n      const firstQuestionText = firstQuestion?.questionText || firstQuestion?.question || firstQuestion?.text;\n      if (firstQuestionText) {\n        console.log('🔍 Showing first available question as reference:', firstQuestionText.substring(0, 50) + '...');\n        return ` ${firstQuestionText.substring(0, 50)}${firstQuestionText.length > 50 ? '...' : ''}`;\n      }\n    }\n\n    return `Question ${questionId.slice(0, 8)}... (ID not found in current test)`;\n  }\n\n  // For shorter IDs, show as is\n  console.log('🔍 Using short ID display for:', questionId);\n  return `Question ${questionId} (ID not found in current test)`;\n}\n\n// Participant Detail View Component\nfunction ParticipantDetailView({ participant, test, monitoringData, onBack }) {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [testWithQuestions, setTestWithQuestions] = useState(null);\n\n  // Load complete test data with questions\n  useEffect(() => {\n    const loadTestQuestions = async () => {\n      if (!test?.id) {return;}\n\n      try {\n        console.log('🔍 Loading test questions for:', test.id);\n        const testQuery = query(\n          collection(db, 'tests'),\n          where('__name__', '==', test.id)\n        );\n        const testSnapshot = await getDocs(testQuery);\n\n        if (!testSnapshot.empty) {\n          const testDoc = testSnapshot.docs[0];\n          const testData = { id: testDoc.id, ...testDoc.data() };\n\n          // Load questions subcollection\n          const questionsQuery = collection(db, 'tests', test.id, 'questions');\n          const questionsSnapshot = await getDocs(questionsQuery);\n          const questions = questionsSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n\n          testData.questions = questions;\n          setTestWithQuestions(testData);\n          console.log('✅ Loaded test with questions:', testData);\n        }\n      } catch (error) {\n        console.error('Error loading test questions:', error);\n        // Fallback to using the test data we have\n        setTestWithQuestions(test);\n      }\n    };\n\n    loadTestQuestions();\n  }, [test]);\n\n  // Process monitoring data by type\n  const tabSwitches = monitoringData.filter(event =>\n    event.type === 'tab_switch' || event.type === 'visibility_change' || event.type === 'focus_lost'\n  );\n  const copyEvents = monitoringData.filter(event => event.type === 'copy');\n  const pasteEvents = monitoringData.filter(event => event.type === 'paste');\n\n  // Additional monitoring events\n  const keyboardEvents = monitoringData.filter(event => event.type === 'keyboard_shortcut');\n  const rightClickEvents = monitoringData.filter(event => event.type === 'right_click');\n  // const fullscreenEvents = monitoringData.filter(event => event.type === 'fullscreen_exit');\n\n  return (\n    <div className=\"participant-detail-view\">\n      <div className=\"detail-header\">\n        <button className=\"btn btn-outline\" onClick={onBack}>\n          <Icon name=\"user\" size=\"small\" /> Back to Participants\n        </button>\n        <div className=\"participant-info\">\n          <h2>Participant: {participant.candidateName || 'Unknown'}</h2>\n          <p>Test: {test.title}</p>\n        </div>\n      </div>\n\n      <div className=\"detail-tabs\">\n        <button\n          className={`tab ${activeTab === 'overview' ? 'active' : ''}`}\n          onClick={() => setActiveTab('overview')}\n        >\n          Overview\n        </button>\n        <button\n          className={`tab ${activeTab === 'tabswitches' ? 'active' : ''}`}\n          onClick={() => setActiveTab('tabswitches')}\n        >\n          Tab Switches ({tabSwitches.length})\n        </button>\n        <button\n          className={`tab ${activeTab === 'copy' ? 'active' : ''}`}\n          onClick={() => setActiveTab('copy')}\n        >\n          Copy Events ({copyEvents.length})\n        </button>\n        <button\n          className={`tab ${activeTab === 'paste' ? 'active' : ''}`}\n          onClick={() => setActiveTab('paste')}\n        >\n          Paste Events ({pasteEvents.length})\n        </button>\n        <button\n          className={`tab ${activeTab === 'violations' ? 'active' : ''}`}\n          onClick={() => setActiveTab('violations')}\n        >\n          All Violations ({monitoringData.length})\n        </button>\n      </div>\n\n      <div className=\"detail-content\">\n        {activeTab === 'overview' && (\n          <div className=\"overview-tab\">\n            <div className=\"activity-summary\">\n              <div className=\"summary-card\">\n                <h3>Activity Summary</h3>\n                <div className=\"summary-stats\">\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Tab Switches:</span>\n                    <span className=\"stat-value\">{tabSwitches.length}</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Copy Events:</span>\n                    <span className=\"stat-value\">{copyEvents.length}</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Paste Events:</span>\n                    <span className=\"stat-value\">{pasteEvents.length}</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Total Violations:</span>\n                    <span className=\"stat-value\">{monitoringData.length}</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Keyboard Shortcuts:</span>\n                    <span className=\"stat-value\">{keyboardEvents.length}</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Right Clicks:</span>\n                    <span className=\"stat-value\">{rightClickEvents.length}</span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Status:</span>\n                    <span className={`badge ${participant.status === 'blocked' || participant.blocked ? 'badge-error' :\n                      participant.status === 'in_progress' || participant.status === 'active' ? 'badge-success' : 'badge-neutral'}`}>\n                      {participant.status === 'blocked' || participant.blocked ? 'Blocked' :\n                       participant.status === 'in_progress' ? 'In Progress' :\n                       participant.status === 'active' ? 'Active' :\n                       participant.status === 'completed' ? 'Completed' : 'Unknown'}\n                    </span>\n                  </div>\n                  <div className=\"stat-item\">\n                    <span className=\"stat-label\">Risk Level:</span>\n                    <span className={`badge ${monitoringData.length > 5 ? 'badge-error' : monitoringData.length > 2 ? 'badge-warning' : 'badge-success'}`}>\n                      {monitoringData.length > 5 ? '🔴 High Risk' : monitoringData.length > 2 ? '🟡 Medium Risk' : '🟢 Low Risk'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'tabswitches' && (\n          <div className=\"tabswitches-tab\">\n            <h3>Tab Switch & Focus Events</h3>\n            {tabSwitches.length === 0 ? (\n              <div className=\"no-events\">\n                <p>✅ No tab switch events recorded - Good behavior!</p>\n              </div>\n            ) : (\n              <div className=\"events-list\">\n                {tabSwitches.map((event, index) => (\n                  <div key={index} className=\"event-item violation-event\">\n                    <div className=\"event-header\">\n                      <span className=\"event-time\">{formatDateTime(event.timestamp)}</span>\n                      <span className=\"event-type\">{event.type === 'tab_switch' ? '🔄 Tab Switch' :\n                        event.type === 'visibility_change' ? '👁️ Window Hidden' : '🎯 Focus Lost'}</span>\n                    </div>\n                    <div className=\"event-details\">\n                      <span className=\"event-description\">\n                        {event.type === 'tab_switch' ? 'Switched to another tab/window' :\n                         event.type === 'visibility_change' ? 'Test window was hidden or minimized' :\n                         'Lost focus from the test interface'}\n                      </span>\n                      {event.duration && (\n                        <span className=\"event-duration\">Duration: {Math.round(event.duration / 1000)}s</span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'copy' && (\n          <div className=\"copy-tab\">\n            <h3>Copy Events</h3>\n            {copyEvents.length === 0 ? (\n              <div className=\"no-events\">\n                <p>✅ No copy events recorded - Good behavior!</p>\n              </div>\n            ) : (\n              <div className=\"events-list\">\n                {copyEvents.map((event, index) => (\n                  <div key={index} className=\"event-item violation-event\">\n                    <div className=\"event-header\">\n                      <span className=\"event-time\">{formatDateTime(event.timestamp)}</span>\n                      <span className=\"event-type\">📋 Copy Event</span>\n                    </div>\n                    <div className=\"event-content\">\n                      <span className=\"event-description\">Content copied from {event.source || 'unknown source'}:</span>\n                      <pre className=\"copied-content\">{event.content || event.data || 'Content not recorded'}</pre>\n                      {event.questionId && (\n                        <span className=\"event-context\">From Question: {getQuestionName(event.questionId, testWithQuestions, event.questionText)}</span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'paste' && (\n          <div className=\"paste-tab\">\n            <h3>Paste Events</h3>\n            {pasteEvents.length === 0 ? (\n              <div className=\"no-events\">\n                <p>✅ No paste events recorded - Good behavior!</p>\n              </div>\n            ) : (\n              <div className=\"events-list\">\n                {pasteEvents.map((event, index) => (\n                  <div key={index} className=\"event-item violation-event\">\n                    <div className=\"event-header\">\n                      <span className=\"event-time\">{formatDateTime(event.timestamp)}</span>\n                      <span className=\"event-type\">📌 Paste Event</span>\n                    </div>\n                    <div className=\"event-content\">\n                      <span className=\"event-description\">Content pasted into {event.field || event.target || 'answer field'}:</span>\n                      <pre className=\"pasted-content\">{event.content || event.data || 'Content not recorded'}</pre>\n                      {event.questionId && (\n                        <span className=\"event-context\">Into Question: {getQuestionName(event.questionId, testWithQuestions, event.questionText)}</span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'violations' && (\n          <div className=\"violations-tab\">\n            <h3>All Security Violations</h3>\n            {monitoringData.length === 0 ? (\n              <div className=\"no-events\">\n                <p>✅ No violations recorded - Excellent behavior!</p>\n              </div>\n            ) : (\n              <div className=\"events-list\">\n                {monitoringData.map((event, index) => (\n                  <div key={index} className=\"event-item violation-event\">\n                    <div className=\"event-header\">\n                      <span className=\"event-time\">{formatDateTime(event.timestamp)}</span>\n                      <span className=\"event-type\">\n                        {event.type === 'tab_switch' ? '🔄 Tab Switch' :\n                         event.type === 'copy' ? '📋 Copy' :\n                         event.type === 'paste' ? '📌 Paste' :\n                         event.type === 'keyboard_shortcut' ? '⌨️ Shortcut' :\n                         event.type === 'right_click' ? '🖱️ Right Click' :\n                         event.type === 'fullscreen_exit' ? '📺 Fullscreen Exit' :\n                         event.type === 'visibility_change' ? '👁️ Window Hidden' :\n                         `⚠️ ${event.type}`}\n                      </span>\n                    </div>\n                    <div className=\"event-content\">\n                      <span className=\"event-description\">\n                        {event.description ||\n                         (event.type === 'tab_switch' ? 'Switched away from test' :\n                          event.type === 'copy' ? 'Copied content' :\n                          event.type === 'paste' ? 'Pasted content' :\n                          event.type === 'keyboard_shortcut' ? `Used shortcut: ${event.shortcut || 'Unknown'}` :\n                          event.type === 'right_click' ? 'Right-clicked on page' :\n                          event.type === 'fullscreen_exit' ? 'Exited fullscreen mode' :\n                          'Security violation detected')}\n                      </span>\n                      {(event.content || event.data) && (\n                        <pre className=\"event-data\">{event.content || event.data}</pre>\n                      )}\n                      {event.questionId && (\n                        <span className=\"event-context\">Question: {getQuestionName(event.questionId, testWithQuestions, event.questionText)}</span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Main AdminDashboard Component\nfunction AdminDashboard() {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('overview');\n  const { loading: contextLoading } = useFirebase();\n\n  const tabs = useMemo(() => [\n    { label: 'Overview', value: 'overview' },\n    { label: 'Users', value: 'users' },\n    { label: 'Tests', value: 'tests' },\n    { label: 'Monitoring', value: 'monitoring' },\n    { label: 'Leaderboard', value: 'leaderboard' }\n  ], []);\n\n  const handleSignOut = async () => {\n    try {\n      await signOut(auth);\n      navigate('/');\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  if (contextLoading) {\n    return <Loading message=\"Loading admin dashboard\" subtext=\"Please wait while we prepare your admin workspace\" />;\n  }\n\n  return (\n    <div className=\"admin-dashboard theme-admin\">\n      <div className=\"dashboard-header\">\n        <div className=\"header-content\">\n          <div className=\"user-info\">\n            <h1>Admin Dashboard</h1>\n            <span className=\"badge badge-admin\">Administrator</span>\n          </div>\n          <button className=\"btn btn-outline\" onClick={handleSignOut}>\n            Sign Out\n          </button>\n        </div>\n      </div>\n\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-nav\">\n          <div className=\"tc-tabs\">\n            {tabs.map((t) => (\n              <button\n                key={t.value}\n                className={`tc-tab ${activeTab === t.value ? 'is-active' : ''}`}\n                onClick={() => setActiveTab(t.value)}\n                data-tab={t.value}\n              >\n                {t.label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"dashboard-main\">\n          {activeTab === 'overview' && <AdminOverview />}\n          {activeTab === 'users' && <AdminUsers />}\n          {activeTab === 'tests' && <AdminTests />}\n          {activeTab === 'monitoring' && <AdminMonitoring />}\n          {activeTab === 'leaderboard' && <Leaderboard />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AdminDashboard;\n","import { signOut } from 'firebase/auth';\nimport { collection, getDocs, query, where, doc, setDoc, serverTimestamp, addDoc, updateDoc, deleteDoc, getDoc } from 'firebase/firestore';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useFirebase } from '../../../context/FirebaseContext';\nimport { auth, db } from '../../../firebase';\nimport { fetchTestWithQuestions } from '../../../services/firestore';\nimport { formatDateTime } from '../../../utils/dateUtils';\nimport { exportSubmissionsToExcel } from '../../../utils/excelExport';\nimport { exportSubmissionsToPDF } from '../../../utils/pdfExport';\nimport Icon from '../../icons/Icon';\nimport Leaderboard from '../../Leaderboard/Leaderboard';\nimport Loading from '../../Loading/Loading';\nimport './HeadDashboard.css';\n\n// Helper function to format duration\nconst formatDuration = (hours, minutes) => {\n  if (hours === 0) {\n    return `${minutes} min`;\n  } else if (minutes === 0) {\n    return `${hours}h`;\n  } else {\n    return `${hours}h ${minutes}min`;\n  }\n};\n\n// Helper function to parse duration string into hours and minutes\nconst parseDuration = (durationString) => {\n  if (!durationString) {return { hours: 0, minutes: 30 };}\n  \n  // Handle formats like \"30 min\", \"1h\", \"1h 30min\", \"90 min\"\n  const minMatch = durationString.match(/(\\d+)\\s*min/);\n  const hourMatch = durationString.match(/(\\d+)h/);\n  \n  let totalMinutes = 0;\n  \n  if (hourMatch) {\n    totalMinutes += parseInt(hourMatch[1]) * 60;\n  }\n  \n  if (minMatch) {\n    totalMinutes += parseInt(minMatch[1]);\n  }\n  \n  // If no matches, try to parse as just minutes\n  if (!hourMatch && !minMatch) {\n    const numMatch = durationString.match(/(\\d+)/);\n    if (numMatch) {\n      totalMinutes = parseInt(numMatch[1]);\n    }\n  }\n  \n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n  \n  return { hours, minutes };\n};\n\n// Head Create Test Component\nfunction HeadCreateTest() {\n  const [step, setStep] = useState(1);\n  const [testData, setTestData] = useState({\n    title: '',\n    description: '',\n    durationHours: 0,\n    durationMinutes: 30,\n    branch: 'DSA',\n    password: '',\n    totalMarks: 0,\n    allowMultipleSubmissions: false\n  });\n  const [questions, setQuestions] = useState([]);\n  const [qIndex, setQIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const { userDoc } = useFirebase();\n\n  // Set branch based on head's assigned domain\n  useEffect(() => {\n    if (userDoc?.domain) {\n      setTestData(prev => ({ ...prev, branch: userDoc.domain }));\n    }\n  }, [userDoc?.domain]);\n\n  const addQuestion = () => {\n    const newList = [...questions, {\n      id: Date.now(),\n      questionText: '',\n      questionType: 'mcq',\n      options: ['', '', '', ''],\n      correctAnswer: '',\n      marks: 1,\n      imageUrl: ''\n    }];\n    setQuestions(newList);\n    setQIndex(newList.length - 1);\n  };\n\n  const updateQuestion = (id, field, value) => {\n    setQuestions(questions.map(q => \n      q.id === id ? { ...q, [field]: value } : q\n    ));\n  };\n\n  const removeQuestion = (id) => {\n    const idx = questions.findIndex(q => q.id === id);\n    const filtered = questions.filter(q => q.id !== id);\n    setQuestions(filtered);\n    if (filtered.length === 0) {\n      setQIndex(0);\n    } else if (idx >= filtered.length) {\n      setQIndex(filtered.length - 1);\n    }\n  };\n\n  const goPrev = () => setQIndex((i) => Math.max(0, i - 1));\n  const goNext = () => setQIndex((i) => Math.min(questions.length - 1, i + 1));\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      console.log('[Head:createTest] Starting test creation...');\n      console.log('Questions with images:', questions.map(q => ({\n        id: q.id,\n        questionText: q.questionText.substring(0, 50) + '...',\n        imageUrl: q.imageUrl\n      })));\n      \n      // Validate test data\n      if (!testData.title || testData.title.trim() === '') {\n        setError('Test title is required');\n        return;\n      }\n      if (!testData.branch || testData.branch.trim() === '') {\n        setError('Test branch is required');\n        return;\n      }\n      if (questions.length === 0) {\n        setError('At least one question is required');\n        return;\n      }\n      \n      const testRef = doc(collection(db, 'tests'));\n      const testId = testRef.id;\n      \n      const testDoc = {\n        testId,\n        title: testData.title.trim(),\n        description: testData.description?.trim() || 'No description',\n        duration: formatDuration(testData.durationHours, testData.durationMinutes),\n        branch: testData.branch.trim(),\n        password: testData.password?.trim() || 'test123',\n        totalMarks: questions.reduce((sum, q) => sum + (q.marks || 1), 0),\n        allowMultipleSubmissions: testData.allowMultipleSubmissions || false,\n        status: 'active',\n        createdBy: auth.currentUser?.uid || 'unknown',\n        createdAt: serverTimestamp(),\n        scheduledFor: serverTimestamp()\n      };\n      \n      await setDoc(testRef, testDoc);\n      console.log('[Head:createTest] Test document saved successfully with ID:', testId);\n      \n      // Add questions as subcollection\n      for (const question of questions) {\n        const questionDoc = {\n          questionId: question.id.toString(),\n          questionText: question.questionText || 'No question text',\n          questionType: question.questionType || 'mcq',\n          options: question.questionType === 'mcq' ? (question.options || ['', '', '', '']) : [],\n          correctAnswer: question.correctAnswer || '',\n          marks: question.marks || 1,\n          imageUrl: question.imageUrl || ''\n        };\n        \n        console.log('Saving question with imageUrl:', questionDoc.imageUrl);\n        await addDoc(collection(db, 'tests', testId, 'questions'), questionDoc);\n      }\n\n      setSuccess('Test created successfully!');\n      setStep(1);\n      setTestData({ title: '', description: '', durationHours: 0, durationMinutes: 30, branch: 'Full Stack', password: '', totalMarks: 0, allowMultipleSubmissions: false });\n      setQuestions([]);\n    } catch (e) {\n      console.log('[Head:createTest:error]', e.code, e.message);\n      setError(e.message || 'Failed to create test');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"head-create-test\">\n      <div className=\"create-test-header\">\n        <div>\n          <h3>Create New Test</h3>\n          <p>Design and configure your test questions</p>\n        </div>\n        <div className=\"branch-badge\">\n          <span>Domain:</span>\n          <span className=\"badge badge-primary\">{userDoc?.domain || 'Full Stack'}</span>\n        </div>\n      </div>\n      \n      <div className=\"create-test-content\">\n        {error && <div className=\"alert alert-error\">{error}</div>}\n        {success && <div className=\"alert alert-success\">{success}</div>}\n\n        {step === 1 && (\n          <div className=\"test-details-form\">\n            <div className=\"form-group\">\n              <label>Test Title *</label>\n              <input\n                type=\"text\"\n                className=\"form-input\"\n                placeholder=\"e.g., JavaScript Fundamentals Assessment\"\n                value={testData.title}\n                onChange={(e) => setTestData({...testData, title: e.target.value})}\n              />\n              <div className=\"form-help\">Choose a clear, descriptive title for your test</div>\n            </div>\n            \n            <div className=\"form-group\">\n              <label>Description</label>\n              <textarea\n                className=\"form-input\"\n                placeholder=\"Describe what this test covers and any special instructions for candidates...\"\n                rows={4}\n                value={testData.description}\n                onChange={(e) => setTestData({...testData, description: e.target.value})}\n              />\n              <div className=\"form-help\">Optional: Provide context and instructions for candidates</div>\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label>Test Duration</label>\n                <div className=\"duration-inputs\" style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>\n                  <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n                    <input\n                      type=\"tel\"\n                      inputMode=\"numeric\"\n                      pattern=\"[0-9]*\"\n                      min=\"0\"\n                      max=\"12\"\n                      className=\"form-input\"\n                      value={testData.durationHours}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/[^0-9]/g, ''); // Only allow numbers\n                        const numValue = parseInt(value) || 0;\n                        if (numValue <= 12) {\n                          setTestData({...testData, durationHours: numValue});\n                        }\n                      }}\n                      placeholder=\"0\"\n                    />\n                    <small style={{ color: '#6b7280', fontSize: '12px', marginTop: '4px' }}>Hours</small>\n                  </div>\n                  <span style={{ color: '#6b7280', fontWeight: 'bold' }}>:</span>\n                  <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n                    <input\n                      type=\"tel\"\n                      inputMode=\"numeric\"\n                      pattern=\"[0-9]*\"\n                      min=\"0\"\n                      max=\"59\"\n                      className=\"form-input\"\n                      value={testData.durationMinutes}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/[^0-9]/g, ''); // Only allow numbers\n                        const numValue = parseInt(value) || 0;\n                        if (numValue <= 59) {\n                          setTestData({...testData, durationMinutes: numValue});\n                        }\n                      }}\n                      placeholder=\"30\"\n                    />\n                    <small style={{ color: '#6b7280', fontSize: '12px', marginTop: '4px' }}>Minutes</small>\n                  </div>\n                </div>\n                <div className=\"form-help\">\n                  Set the time limit for completing the test. Total: {formatDuration(testData.durationHours, testData.durationMinutes)}\n                </div>\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Domain</label>\n                <input\n                  type=\"text\"\n                  className=\"form-input readonly\"\n                  value={testData.branch}\n                  readOnly\n                  title=\"Domain is assigned by admin and cannot be changed\"\n                />\n                <div className=\"form-help\">Domain is assigned by admin and cannot be modified</div>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Test Password *</label>\n              <input\n                type=\"password\"\n                className=\"form-input\"\n                placeholder=\"Enter a secure password for test access\"\n                value={testData.password}\n                onChange={(e) => setTestData({...testData, password: e.target.value})}\n              />\n              <div className=\"form-help\">Candidates will need this password to access the test</div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Multiple Submissions</label>\n              <div className=\"toggle-container\" style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n                <label className=\"toggle-switch\" style={{ position: 'relative', display: 'inline-block', width: '50px', height: '24px' }}>\n                  <input\n                    type=\"checkbox\"\n                    checked={testData.allowMultipleSubmissions}\n                    onChange={(e) => setTestData({...testData, allowMultipleSubmissions: e.target.checked})}\n                    style={{ opacity: 0, width: 0, height: 0 }}\n                  />\n                  <span \n                    className=\"toggle-slider\"\n                    style={{\n                      position: 'absolute',\n                      cursor: 'pointer',\n                      top: 0,\n                      left: 0,\n                      right: 0,\n                      bottom: 0,\n                      backgroundColor: testData.allowMultipleSubmissions ? '#4CAF50' : '#ccc',\n                      transition: '0.4s',\n                      borderRadius: '24px'\n                    }}\n                  >\n                    <span\n                      style={{\n                        position: 'absolute',\n                        content: '',\n                        height: '18px',\n                        width: '18px',\n                        left: testData.allowMultipleSubmissions ? '26px' : '3px',\n                        bottom: '3px',\n                        backgroundColor: 'white',\n                        transition: '0.4s',\n                        borderRadius: '50%'\n                      }}\n                    />\n                  </span>\n                </label>\n                <span style={{ fontSize: '14px', color: testData.allowMultipleSubmissions ? '#4CAF50' : '#666' }}>\n                  {testData.allowMultipleSubmissions ? 'Enabled' : 'Disabled'}\n                </span>\n              </div>\n              <div className=\"form-help\">\n                {testData.allowMultipleSubmissions \n                  ? 'Candidates can submit multiple times. Only the latest submission will be considered for grading.' \n                  : 'Candidates can submit only once. Choose this for final exams or assessments.'}\n              </div>\n            </div>\n\n            <div className=\"form-actions\">\n              <button \n                className=\"btn btn-primary\"\n                onClick={() => setStep(2)} \n                disabled={!testData.title || !testData.password}\n              >\n                Next: Add Questions →\n              </button>\n            </div>\n          </div>\n        )}\n\n        {step === 2 && (\n          <div className=\"questions-form\">\n            <div className=\"questions-header\">\n              <div>\n                <h4>Question {questions.length ? (qIndex + 1) : 0} of {questions.length}</h4>\n                <p>Add and configure your test questions</p>\n              </div>\n              <div className=\"question-actions\">\n                <button className=\"btn btn-outline btn-sm\" onClick={addQuestion}>\n                  + Add Question\n                </button>\n                {questions.length > 0 && (\n                  <button \n                    className=\"btn btn-outline btn-sm btn-danger\"\n                    onClick={() => removeQuestion(questions[qIndex].id)}\n                  >\n                    Remove\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {questions.length === 0 ? (\n              <div className=\"no-questions\">\n                <div>No questions added yet</div>\n                <div>Click \"Add Question\" to start creating your test questions</div>\n              </div>\n            ) : (\n              <div className=\"question-editor\">\n                <div className=\"form-group\">\n                  <label>Question Text *</label>\n                  <textarea\n                    className=\"form-input\"\n                    placeholder=\"Enter your question here...\"\n                    rows={4}\n                    value={questions[qIndex].questionText}\n                    onChange={(e) => updateQuestion(questions[qIndex].id, 'questionText', e.target.value)}\n                  />\n                  <div className=\"form-help\">Write a clear and specific question</div>\n                </div>\n\n                <div className=\"form-group\">\n                  <label>Question Image (Optional)</label>\n                  <div className=\"image-upload-section\">\n                    <input\n                      type=\"url\"\n                      className=\"form-input\"\n                      placeholder=\"Enter image URL (e.g., https://example.com/image.jpg)\"\n                      value={questions[qIndex].imageUrl || ''}\n                      onChange={(e) => updateQuestion(questions[qIndex].id, 'imageUrl', e.target.value)}\n                    />\n                    <div className=\"image-upload-help\">\n                      <span className=\"help-text\">\n                        💡 Add an image URL to provide visual illustration for your question\n                      </span>\n                    </div>\n                    {questions[qIndex].imageUrl && (\n                      <div className=\"image-preview\">\n                        <img \n                          src={questions[qIndex].imageUrl} \n                          alt=\"Question illustration\"\n                          onError={(e) => {\n                            e.target.style.display = 'none';\n                            e.target.nextSibling.style.display = 'block';\n                          }}\n                          onLoad={(e) => {\n                            e.target.style.display = 'block';\n                            e.target.nextSibling.style.display = 'none';\n                          }}\n                        />\n                        <div className=\"image-error\" style={{display: 'none'}}>\n                          ❌ Failed to load image. Please check the URL.\n                        </div>\n                        <button \n                          type=\"button\"\n                          className=\"btn btn-outline btn-sm remove-image\"\n                          onClick={() => updateQuestion(questions[qIndex].id, 'imageUrl', '')}\n                        >\n                          Remove Image\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"form-row\">\n                  <div className=\"form-group\">\n                    <label>Question Type</label>\n                    <select\n                      className=\"form-input\"\n                      value={questions[qIndex].questionType}\n                      onChange={(e) => updateQuestion(questions[qIndex].id, 'questionType', e.target.value)}\n                    >\n                      <option value=\"mcq\">Multiple Choice (MCQ)</option>\n                      <option value=\"long\">Long Answer</option>\n                      <option value=\"code\">Code</option>\n                    </select>\n                    <div className=\"form-help\">Choose the type of question</div>\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Marks</label>\n                    <input\n                      type=\"tel\"\n                      inputMode=\"numeric\"\n                      pattern=\"[0-9]*\"\n                      className=\"form-input\"\n                      min=\"1\"\n                      max=\"100\"\n                      value={questions[qIndex].marks}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/[^0-9]/g, ''); // Only allow numbers\n                        const numValue = parseInt(value) || 1;\n                        if (numValue >= 1 && numValue <= 100) {\n                          updateQuestion(questions[qIndex].id, 'marks', numValue);\n                        }\n                      }}\n                    />\n                    <div className=\"form-help\">Points awarded for correct answer</div>\n                  </div>\n                </div>\n\n                {questions[qIndex].questionType === 'mcq' && (\n                  <div className=\"form-group\">\n                    <label>Answer Options</label>\n                    <div className=\"mcq-options\">\n                      {questions[qIndex].options.map((option, optIndex) => (\n                        <div key={optIndex} className=\"mcq-option\">\n                          <input\n                            type=\"radio\"\n                            name={`correct-${questions[qIndex].id}`}\n                            checked={questions[qIndex].correctAnswer === option}\n                            onChange={() => updateQuestion(questions[qIndex].id, 'correctAnswer', option)}\n                          />\n                          <input\n                            type=\"text\"\n                            className=\"form-input\"\n                            placeholder={`Option ${optIndex + 1}`}\n                            value={option}\n                            onChange={(e) => {\n                              const newOptions = [...questions[qIndex].options];\n                              newOptions[optIndex] = e.target.value;\n                              updateQuestion(questions[qIndex].id, 'options', newOptions);\n                            }}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"form-help\">Select the correct answer by clicking the radio button</div>\n                  </div>\n                )}\n\n                {(questions[qIndex].questionType === 'long' || questions[qIndex].questionType === 'code') && (\n                  <div className=\"form-group\">\n                    <label>Expected Answer / Sample Solution</label>\n                    <textarea\n                      className=\"form-input\"\n                      placeholder={questions[qIndex].questionType === 'code' ? \"Enter the expected code solution or key points...\" : \"Enter the expected answer or key points to look for...\"}\n                      rows={4}\n                      value={questions[qIndex].correctAnswer}\n                      onChange={(e) => updateQuestion(questions[qIndex].id, 'correctAnswer', e.target.value)}\n                    />\n                    <div className=\"form-help\">\n                      {questions[qIndex].questionType === 'code' \n                        ? \"Provide the expected code solution or key implementation details\"\n                        : \"Provide the expected answer or key points for evaluation\"\n                      }\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div className=\"questions-footer\">\n              <button className=\"btn btn-outline\" onClick={() => setStep(1)}>\n                ← Back to Test Details\n              </button>\n              <div className=\"question-nav\">\n                <button \n                  className=\"btn btn-outline btn-sm\"\n                  onClick={goPrev} \n                  disabled={qIndex <= 0}\n                >\n                  ← Previous\n                </button>\n                <button \n                  className=\"btn btn-outline btn-sm\"\n                  onClick={goNext} \n                  disabled={qIndex >= questions.length - 1}\n                >\n                  Next →\n                </button>\n                <button \n                  className={`btn btn-primary btn-lg ${loading ? 'btn-loading' : ''}`}\n                  onClick={handleSubmit} \n                  disabled={questions.length === 0 || loading}\n                >\n                  {loading ? 'Creating Test...' : `Create Test (${questions.reduce((sum, q) => sum + q.marks, 0)} marks)`}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Head Manage Tests Component\nfunction HeadManageTests() {\n  const [tests, setTests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [editingTest, setEditingTest] = useState(null);\n  const [editStep, setEditStep] = useState(1);\n  const [editTestData, setEditTestData] = useState({\n    title: '',\n    description: '',\n    duration: '30 min',\n    durationHours: 0,\n    durationMinutes: 30,\n    password: '',\n    allowMultipleSubmissions: false\n  });\n  const [editQuestions, setEditQuestions] = useState([]);\n  const [editQIndex, setEditQIndex] = useState(0);\n  const [editLoading, setEditLoading] = useState(false);\n  const { userDoc } = useFirebase();\n\n  useEffect(() => {\n    const loadTests = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        const testsRef = collection(db, 'tests');\n        const q = query(testsRef, where('branch', '==', userDoc?.domain || 'Full Stack'));\n        const snap = await getDocs(q);\n        const testsData = snap.docs.map(d => ({ id: d.id, ...d.data() }));\n        setTests(testsData);\n      } catch (e) {\n        console.log('[Head:loadTests:error]', e.code, e.message);\n        setError(e.message || 'Failed to load tests');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (userDoc?.domain) {\n      loadTests();\n    }\n  }, [userDoc?.domain]);\n\n  const toggleTestStatus = async (testId, currentStatus) => {\n    try {\n      const newStatus = currentStatus === 'active' ? 'closed' : 'active';\n      await updateDoc(doc(db, 'tests', testId), { status: newStatus });\n      setTests(tests.map(t => t.id === testId ? { ...t, status: newStatus } : t));\n    } catch (e) {\n      console.log('[Head:toggleStatus:error]', e.code, e.message);\n      setError(e.message || 'Failed to update test status');\n    }\n  };\n\n  // Debug function to manually check database\n  const debugCheckDatabase = async (testId) => {\n    try {\n      console.log('=== MANUAL DATABASE CHECK ===');\n      const questionsRef = collection(db, 'tests', testId, 'questions');\n      const snapshot = await getDocs(questionsRef);\n      console.log('Number of questions in database:', snapshot.docs.length);\n      snapshot.docs.forEach((doc, index) => {\n        const data = doc.data();\n        console.log(`Question ${index + 1}:`, {\n          docId: doc.id,\n          questionId: data.questionId,\n          questionText: data.questionText?.substring(0, 30) + '...',\n          imageUrl: data.imageUrl,\n          fullData: data\n        });\n      });\n      console.log('=== END DATABASE CHECK ===');\n    } catch (error) {\n      console.error('Database check error:', error);\n    }\n  };\n\n  const startEditTest = async (test) => {\n    try {\n      setEditLoading(true);\n      console.log('Starting edit for test:', test);\n      \n      // Manual database check\n      await debugCheckDatabase(test.id);\n      \n      const testData = await fetchTestWithQuestions(test.id);\n      console.log('Fetched test data:', testData);\n      console.log('Questions from database:', testData?.questions);\n      if (testData?.questions) {\n        console.log('Questions with imageUrl:', testData.questions.map(q => ({\n          id: q.id,\n          questionText: q.questionText?.substring(0, 30) + '...',\n          imageUrl: q.imageUrl\n        })));\n      }\n      \n      if (testData) {\n        setEditingTest(test);\n        const parsedDuration = parseDuration(testData.duration || '30 min');\n        setEditTestData({\n          title: testData.title || '',\n          description: testData.description || '',\n          duration: testData.duration || '30 min',\n          durationHours: parsedDuration.hours,\n          durationMinutes: parsedDuration.minutes,\n          password: testData.password || '',\n          allowMultipleSubmissions: testData.allowMultipleSubmissions || false\n        });\n        \n        // Ensure questions have all required fields including imageUrl\n        const processedQuestions = (testData.questions || []).map(q => ({\n          id: q.id || q.questionId || Date.now(),\n          questionText: q.questionText || '',\n          questionType: q.questionType || 'mcq',\n          options: q.options || ['', '', '', ''],\n          correctAnswer: q.correctAnswer || '',\n          marks: q.marks || 1,\n          imageUrl: q.imageUrl || ''\n        }));\n        \n        console.log('Processed questions for editing:', processedQuestions);\n        setEditQuestions(processedQuestions);\n        setEditQIndex(0);\n        setEditStep(1);\n        console.log('Edit modal should now show with step:', 1);\n      }\n    } catch (e) {\n      console.log('[Head:startEdit:error]', e);\n      setError('Failed to load test for editing');\n    } finally {\n      setEditLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"head-manage-tests\">\n      <div className=\"manage-header\">\n        <h3>Manage Tests</h3>\n        <div className=\"branch-badge\">\n          <span>Domain:</span>\n          <span className=\"badge badge-primary\">{userDoc?.domain || 'Full Stack'}</span>\n        </div>\n      </div>\n      \n      {error && <div className=\"alert alert-error\">{error}</div>}\n      \n      {loading ? (\n        <div className=\"loading-tests\">\n          <Loading message=\"Loading tests\" subtext=\"Fetching your created tests\" variant=\"inline\" size=\"large\" />\n        </div>\n      ) : tests.length === 0 ? (\n        <div className=\"no-tests\">No tests created yet.</div>\n      ) : (\n        <div className=\"tests-grid\">\n          {tests.map(test => (\n            <div key={test.id} className=\"test-card\">\n              <div className=\"test-info\">\n                <div>\n                  <h4>{test.title}</h4>\n                  <div className=\"test-meta\">\n                    {test.branch} • {test.duration} • {test.totalMarks} marks\n                  </div>\n                  <div className=\"test-details\">\n                    <span>Created: {test.createdAt?.toDate?.()?.toLocaleDateString() || 'Unknown'}</span>\n                    <span className=\"password-display\">\n                      Password: {test.password || 'No password'}\n                    </span>\n                  </div>\n                </div>\n                <span className={`badge ${test.status === 'active' ? 'badge-success' : 'badge-neutral'}`}>\n                  {test.status}\n                </span>\n              </div>\n              \n              <div className=\"test-actions\">\n                <button \n                  className={`btn btn-outline btn-sm ${editLoading ? 'btn-loading' : ''}`}\n                  onClick={() => startEditTest(test)}\n                  disabled={editLoading}\n                >\n                  {editLoading ? 'Loading...' : 'Edit'}\n                </button>\n                <button \n                  className=\"btn btn-outline btn-sm\"\n                  onClick={() => toggleTestStatus(test.id, test.status)}\n                >\n                  {test.status === 'active' ? 'Close' : 'Activate'}\n                </button>\n                <button \n                  className=\"btn btn-outline btn-sm\"\n                  onClick={() => debugCheckDatabase(test.id)}\n                  style={{fontSize: '10px', padding: '2px 6px'}}\n                >\n                  🔍 Debug DB\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Edit Test Modal */}\n      {editingTest && (\n        <div className=\"edit-modal-overlay\">\n          <div className=\"edit-modal\">\n            <div className=\"modal-header\">\n              <h3>Edit Test: {editingTest.title}</h3>\n              <button className=\"modal-close\" onClick={() => setEditingTest(null)}>×</button>\n            </div>\n            <div className=\"modal-body\">\n              {console.log('Rendering modal body. editStep:', editStep, 'editingTest:', editingTest)}\n              {editStep === 1 && (\n                <div className=\"edit-step-1\">\n                  <h4>Test Information</h4>\n                  <div className=\"form-group\">\n                    <label>Test Title</label>\n                    <input\n                      type=\"text\"\n                      value={editTestData.title}\n                      onChange={(e) => setEditTestData({...editTestData, title: e.target.value})}\n                      className=\"form-input\"\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Description</label>\n                    <textarea\n                      value={editTestData.description}\n                      onChange={(e) => setEditTestData({...editTestData, description: e.target.value})}\n                      className=\"form-textarea\"\n                      rows=\"3\"\n                    />\n                  </div>\n                  <div className=\"form-row\">\n                    <div className=\"form-group\">\n                      <label>Duration</label>\n                      <div className=\"duration-inputs\" style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>\n                        <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n                          <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"12\"\n                            className=\"form-input\"\n                            value={editTestData.durationHours}\n                            onChange={(e) => setEditTestData({...editTestData, durationHours: parseInt(e.target.value) || 0})}\n                            placeholder=\"0\"\n                          />\n                          <small style={{ color: '#6b7280', fontSize: '12px', marginTop: '4px' }}>Hours</small>\n                        </div>\n                        <span style={{ color: '#6b7280', fontWeight: 'bold' }}>:</span>\n                        <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n                          <input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"59\"\n                            step=\"1\"\n                            className=\"form-input\"\n                            value={editTestData.durationMinutes}\n                            onChange={(e) => setEditTestData({...editTestData, durationMinutes: parseInt(e.target.value) || 0})}\n                            placeholder=\"30\"\n                          />\n                          <small style={{ color: '#6b7280', fontSize: '12px', marginTop: '4px' }}>Minutes</small>\n                        </div>\n                      </div>\n                      <div className=\"form-help\">\n                        Total: {formatDuration(editTestData.durationHours, editTestData.durationMinutes)}\n                      </div>\n                    </div>\n                    <div className=\"form-group\">\n                      <label>Password</label>\n                      <input\n                        type=\"text\"\n                        value={editTestData.password}\n                        onChange={(e) => setEditTestData({...editTestData, password: e.target.value})}\n                        className=\"form-input\"\n                        placeholder=\"Optional test password\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label>Multiple Submissions</label>\n                    <div className=\"toggle-container\" style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n                      <label className=\"toggle-switch\" style={{ position: 'relative', display: 'inline-block', width: '50px', height: '24px' }}>\n                        <input\n                          type=\"checkbox\"\n                          checked={editTestData.allowMultipleSubmissions}\n                          onChange={(e) => setEditTestData({...editTestData, allowMultipleSubmissions: e.target.checked})}\n                          style={{ opacity: 0, width: 0, height: 0 }}\n                        />\n                        <span \n                          className=\"toggle-slider\"\n                          style={{\n                            position: 'absolute',\n                            cursor: 'pointer',\n                            top: 0,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: editTestData.allowMultipleSubmissions ? '#4CAF50' : '#ccc',\n                            transition: '0.4s',\n                            borderRadius: '24px'\n                          }}\n                        >\n                          <span\n                            style={{\n                              position: 'absolute',\n                              content: '',\n                              height: '18px',\n                              width: '18px',\n                              left: editTestData.allowMultipleSubmissions ? '26px' : '3px',\n                              bottom: '3px',\n                              backgroundColor: 'white',\n                              transition: '0.4s',\n                              borderRadius: '50%'\n                            }}\n                          />\n                        </span>\n                      </label>\n                      <span style={{ fontSize: '14px', color: editTestData.allowMultipleSubmissions ? '#4CAF50' : '#666' }}>\n                        {editTestData.allowMultipleSubmissions ? 'Enabled' : 'Disabled'}\n                      </span>\n                    </div>\n                    <div className=\"form-help\">\n                      {editTestData.allowMultipleSubmissions \n                        ? 'Candidates can submit multiple times. Only the latest submission will be considered for grading.' \n                        : 'Candidates can submit only once. Choose this for final exams or assessments.'}\n                    </div>\n                  </div>\n\n                  <div className=\"modal-actions\">\n                    <button \n                      className=\"btn btn-primary\"\n                      onClick={() => setEditStep(2)}\n                      disabled={!editTestData.title.trim()}\n                    >\n                      Next: Edit Questions\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              {editStep === 2 && (\n                <div className=\"edit-step-2\">\n                  <div className=\"questions-header\">\n                    <h4>Questions ({editQuestions.length})</h4>\n                    <button \n                      className=\"btn btn-outline btn-sm\"\n                      onClick={() => {\n                        const newQuestion = {\n                          id: Date.now(),\n                          questionText: '',\n                          questionType: 'mcq',\n                          options: ['', '', '', ''],\n                          correctAnswer: '',\n                          marks: 1,\n                          imageUrl: ''\n                        };\n                        setEditQuestions([...editQuestions, newQuestion]);\n                        setEditQIndex(editQuestions.length);\n                      }}\n                    >\n                      + Add Question\n                    </button>\n                  </div>\n                  \n\n                  {editQuestions.length > 0 && (\n                    <>\n                      <div className=\"question-nav\">\n                        <button \n                          className=\"btn btn-outline btn-sm\"\n                          onClick={() => setEditQIndex(Math.max(0, editQIndex - 1))}\n                          disabled={editQIndex === 0}\n                        >\n                          ← Previous\n                        </button>\n                        <span>Question {editQIndex + 1} of {editQuestions.length}</span>\n                        <button \n                          className=\"btn btn-outline btn-sm\"\n                          onClick={() => setEditQIndex(Math.min(editQuestions.length - 1, editQIndex + 1))}\n                          disabled={editQIndex >= editQuestions.length - 1}\n                        >\n                          Next →\n                        </button>\n                      </div>\n\n                      {editQuestions[editQIndex] && (\n                        <div className=\"question-editor\">\n                          <div className=\"form-group\">\n                            <label>Question Text</label>\n                            <textarea\n                              value={editQuestions[editQIndex].questionText}\n                              onChange={(e) => {\n                                const updated = [...editQuestions];\n                                updated[editQIndex].questionText = e.target.value;\n                                setEditQuestions(updated);\n                              }}\n                              className=\"form-textarea\"\n                              rows=\"4\"\n                              placeholder=\"Enter your question...\"\n                            />\n                          </div>\n\n                          <div className=\"form-group\">\n                            <label>Question Image (Optional)</label>\n                            <div className=\"image-upload-section\">\n                              <input\n                                type=\"url\"\n                                value={editQuestions[editQIndex]?.imageUrl || ''}\n                                onChange={(e) => {\n                                  const updated = [...editQuestions];\n                                  updated[editQIndex].imageUrl = e.target.value;\n                                  setEditQuestions(updated);\n                                  console.log('Image URL updated:', e.target.value);\n                                }}\n                                className=\"form-input\"\n                                placeholder=\"Enter image URL (e.g., https://example.com/image.jpg)\"\n                              />\n                              <div className=\"image-upload-help\">\n                                <span className=\"help-text\">\n                                  💡 Add an image URL to provide visual illustration for your question\n                                </span>\n                              </div>\n                              {editQuestions[editQIndex].imageUrl && (\n                                <div className=\"image-preview\">\n                                  <img \n                                    src={editQuestions[editQIndex].imageUrl} \n                                    alt=\"Question illustration\"\n                                    onError={(e) => {\n                                      e.target.style.display = 'none';\n                                      e.target.nextSibling.style.display = 'block';\n                                    }}\n                                    onLoad={(e) => {\n                                      e.target.style.display = 'block';\n                                      e.target.nextSibling.style.display = 'none';\n                                    }}\n                                  />\n                                  <div className=\"image-error\" style={{display: 'none'}}>\n                                    ❌ Failed to load image. Please check the URL.\n                                  </div>\n                                  <button \n                                    type=\"button\"\n                                    className=\"btn btn-outline btn-sm remove-image\"\n                                    onClick={() => {\n                                      const updated = [...editQuestions];\n                                      updated[editQIndex].imageUrl = '';\n                                      setEditQuestions(updated);\n                                    }}\n                                  >\n                                    Remove Image\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"form-row\">\n                            <div className=\"form-group\">\n                              <label>Question Type</label>\n                              <select\n                                value={editQuestions[editQIndex].questionType}\n                                onChange={(e) => {\n                                  const updated = [...editQuestions];\n                                  updated[editQIndex].questionType = e.target.value;\n                                  if (e.target.value !== 'mcq') {\n                                    updated[editQIndex].options = [];\n                                    updated[editQIndex].correctAnswer = '';\n                                  } else {\n                                    updated[editQIndex].options = ['', '', '', ''];\n                                  }\n                                  setEditQuestions(updated);\n                                }}\n                                className=\"form-select\"\n                              >\n                                <option value=\"mcq\">Multiple Choice</option>\n                                <option value=\"long\">Long Answer</option>\n                                <option value=\"code\">Code</option>\n                              </select>\n                            </div>\n                            <div className=\"form-group\">\n                              <label>Marks</label>\n                              <input\n                                type=\"number\"\n                                min=\"1\"\n                                value={editQuestions[editQIndex].marks}\n                                onChange={(e) => {\n                                  const updated = [...editQuestions];\n                                  updated[editQIndex].marks = parseInt(e.target.value) || 1;\n                                  setEditQuestions(updated);\n                                }}\n                                className=\"form-input\"\n                              />\n                            </div>\n                          </div>\n\n                          {editQuestions[editQIndex].questionType === 'mcq' && (\n                            <>\n                              <div className=\"form-group\">\n                                <label>Options</label>\n                                {editQuestions[editQIndex].options.map((option, idx) => (\n                                  <input\n                                    key={idx}\n                                    type=\"text\"\n                                    value={option}\n                                    onChange={(e) => {\n                                      const updated = [...editQuestions];\n                                      updated[editQIndex].options[idx] = e.target.value;\n                                      setEditQuestions(updated);\n                                    }}\n                                    className=\"form-input\"\n                                    placeholder={`Option ${idx + 1}`}\n                                  />\n                                ))}\n                              </div>\n                              <div className=\"form-group\">\n                                <label>Correct Answer</label>\n                                <select\n                                  value={editQuestions[editQIndex].correctAnswer}\n                                  onChange={(e) => {\n                                    const updated = [...editQuestions];\n                                    updated[editQIndex].correctAnswer = e.target.value;\n                                    setEditQuestions(updated);\n                                  }}\n                                  className=\"form-select\"\n                                >\n                                  <option value=\"\">Select correct answer</option>\n                                  {editQuestions[editQIndex].options.map((option, idx) => (\n                                    option && <option key={idx} value={option}>{option}</option>\n                                  ))}\n                                </select>\n                              </div>\n                            </>\n                          )}\n\n                          <div className=\"question-actions\">\n                            <button \n                              className=\"btn btn-danger btn-sm\"\n                              onClick={() => {\n                                if (window.confirm('Delete this question?')) {\n                                  const updated = editQuestions.filter((_, idx) => idx !== editQIndex);\n                                  setEditQuestions(updated);\n                                  if (editQIndex >= updated.length) {\n                                    setEditQIndex(Math.max(0, updated.length - 1));\n                                  }\n                                }\n                              }}\n                            >\n                              Delete Question\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </>\n                  )}\n\n                  <div className=\"modal-actions\">\n                    <button \n                      className=\"btn btn-outline\"\n                      onClick={() => setEditStep(1)}\n                    >\n                      ← Back to Test Info\n                    </button>\n                    <button \n                      className={`btn btn-primary ${editLoading ? 'btn-loading' : ''}`}\n                      onClick={async () => {\n                        try {\n                          setEditLoading(true);\n                          const totalMarks = editQuestions.reduce((sum, q) => sum + (q.marks || 1), 0);\n                          \n                          // Update main test document\n                          await updateDoc(doc(db, 'tests', editingTest.id), {\n                            title: editTestData.title.trim(),\n                            description: editTestData.description.trim(),\n                            duration: formatDuration(editTestData.durationHours, editTestData.durationMinutes),\n                            password: editTestData.password.trim(),\n                            allowMultipleSubmissions: editTestData.allowMultipleSubmissions,\n                            totalMarks: totalMarks,\n                            updatedAt: serverTimestamp()\n                          });\n                          \n                          // Delete existing questions subcollection\n                          const questionsRef = collection(db, 'tests', editingTest.id, 'questions');\n                          const existingQuestions = await getDocs(questionsRef);\n                          for (const questionDoc of existingQuestions.docs) {\n                            await deleteDoc(questionDoc.ref);\n                          }\n                          \n                          // Add updated questions to subcollection\n                          for (const question of editQuestions) {\n                            const questionDoc = {\n                              questionId: question.id.toString(),\n                              questionText: question.questionText || 'No question text',\n                              questionType: question.questionType || 'mcq',\n                              options: question.questionType === 'mcq' ? (question.options || ['', '', '', '']) : [],\n                              correctAnswer: question.correctAnswer || '',\n                              marks: question.marks || 1,\n                              imageUrl: question.imageUrl || ''\n                            };\n                            \n                            if (questionDoc.imageUrl) {\n                              console.log('Saving question with image:', questionDoc.imageUrl);\n                            }\n                            await addDoc(questionsRef, questionDoc);\n                          }\n                          \n                          // Update local state\n                          setTests(tests.map(t => \n                            t.id === editingTest.id \n                              ? { ...t, ...editTestData, totalMarks, allowMultipleSubmissions: editTestData.allowMultipleSubmissions } \n                              : t\n                          ));\n                          \n                          setEditingTest(null);\n                          setError('');\n                          alert('Test updated successfully!');\n                        } catch (e) {\n                          console.error('Error updating test:', e);\n                          setError('Failed to update test');\n                        } finally {\n                          setEditLoading(false);\n                        }\n                      }}\n                      disabled={editLoading || !editTestData.title.trim() || editQuestions.length === 0}\n                    >\n                      {editLoading ? 'Saving...' : 'Save Changes'}\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Head Results Component\nfunction HeadResults() {\n  const [tests, setTests] = useState([]);\n  const [selectedTest, setSelectedTest] = useState(null);\n  const [submissions, setSubmissions] = useState([]);\n  const [selectedSubmission, setSelectedSubmission] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [exporting, setExporting] = useState(false);\n  const { userDoc } = useFirebase();\n\n  useEffect(() => {\n    const loadTests = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        console.log('HeadResults: Loading tests for branch:', userDoc?.branch);\n        console.log('HeadResults: User doc:', userDoc);\n        const testsRef = collection(db, 'tests');\n        \n        // Try branch-specific query first\n        const testsQuery = query(testsRef, where('branch', '==', userDoc?.branch || 'Full Stack'));\n        const testsSnap = await getDocs(testsQuery);\n        let testsData = testsSnap.docs.map(d => ({ id: d.id, ...d.data() }));\n        \n        console.log('HeadResults: Found tests by branch:', testsData.length);\n        \n        // If no tests found by branch, try loading all tests\n        if (testsData.length === 0) {\n          console.log('HeadResults: No tests found by branch, loading all tests');\n          const allTestsSnap = await getDocs(testsRef);\n          testsData = allTestsSnap.docs.map(d => ({ id: d.id, ...d.data() }));\n          console.log('HeadResults: Found all tests:', testsData.length);\n        }\n        \n        console.log('HeadResults: Final tests:', testsData);\n        setTests(testsData);\n      } catch (e) {\n        console.log('[Head:loadTests:error]', e.code, e.message);\n        setError(e.message || 'Failed to load tests');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (userDoc) {\n      console.log('HeadResults: User doc available, loading tests');\n      loadTests();\n    } else {\n      console.log('HeadResults: No user doc available');\n    }\n  }, [userDoc]);\n\n  const loadSubmissions = async (testId) => {\n    setLoading(true);\n    setError('');\n    try {\n      const resultsRef = collection(db, 'results');\n      const resultsQuery = query(resultsRef, where('testId', '==', testId));\n      const resultsSnap = await getDocs(resultsQuery);\n      \n      // Process each result to ensure we have the candidate's name\n      const resultsData = await Promise.all(\n        resultsSnap.docs.map(async (resultDoc) => {\n          const data = resultDoc.data();\n          let candidateName = data.candidateName || '';\n          let displayName = '';\n          \n          // Process candidate name - handle emails stored in candidateName field\n          console.log('DEBUG: Raw candidateName from database:', data.candidateName);\n          console.log('DEBUG: CandidateId:', data.candidateId);\n          \n          // If candidateName is already an email, extract the username part\n          if (candidateName && candidateName.includes('@')) {\n            candidateName = candidateName.split('@')[0];\n            console.log('DEBUG: Extracted name from email:', candidateName);\n          } else if (data.candidateId) {\n            // Try to get better name from user database\n            console.log('DEBUG: Trying to get name from user database for:', data.candidateId);\n            \n            try {\n              // Try to get user by Firebase UID from 'user' collection\n              let userDoc = await getDoc(doc(db, 'user', data.candidateId));\n              let userData = null;\n              \n              if (userDoc.exists()) {\n                userData = userDoc.data();\n                console.log('DEBUG: Found user in \"user\" collection:', userData);\n              } else {\n                console.log('DEBUG: No user found in \"user\" collection, trying \"users\"...');\n                // Try 'users' collection (plural)\n                userDoc = await getDoc(doc(db, 'users', data.candidateId));\n                if (userDoc.exists()) {\n                  userData = userDoc.data();\n                  console.log('DEBUG: Found user in \"users\" collection:', userData);\n                }\n              }\n              \n              if (userData) {\n                // Try different possible field names for the user's name\n                const possibleNames = [\n                  userData.name,\n                  userData.displayName,\n                  userData.fullName,\n                  userData.firstName,\n                  userData.username\n                ];\n                \n                console.log('DEBUG: Available name fields:', {\n                  name: userData.name,\n                  displayName: userData.displayName,\n                  fullName: userData.fullName,\n                  firstName: userData.firstName,\n                  username: userData.username,\n                  email: userData.email\n                });\n                \n                // Use the first available name\n                for (const name of possibleNames) {\n                  if (name && name.trim()) {\n                    candidateName = name.trim();\n                    console.log('DEBUG: Using name field:', candidateName);\n                    break;\n                  }\n                }\n                \n                // If no name fields, try email prefix from user data\n                if (!candidateName && userData.email) {\n                  candidateName = userData.email.includes('@') ? userData.email.split('@')[0] : userData.email;\n                  console.log('DEBUG: Using email prefix from user data:', candidateName);\n                }\n                \n                // Update the result document with the better candidate name\n                if (candidateName && candidateName !== data.candidateName) {\n                  await updateDoc(resultDoc.ref, {\n                    candidateName: candidateName\n                  });\n                  console.log('DEBUG: Updated candidateName in database to:', candidateName);\n                }\n              } else {\n                console.log('DEBUG: No user found in any collection for UID:', data.candidateId);\n                // Fallback to using last 4 chars of UID\n                candidateName = `Candidate ${data.candidateId.slice(-4)}`;\n              }\n            } catch (err) {\n              console.error('DEBUG: Error fetching candidate name:', err);\n              // Fallback to using last 4 chars of UID\n              candidateName = `Candidate ${data.candidateId.slice(-4)}`;\n            }\n          }\n          \n          // Final fallback\n          if (!candidateName) {\n            candidateName = 'Unknown';\n          }\n          \n          // Format the display name - prioritize candidate name, but always show something useful\n          if (candidateName && candidateName !== 'Unknown') {\n            displayName = candidateName;\n          } else if (data.candidateId && data.candidateId.includes('@')) {\n            displayName = data.candidateId.split('@')[0];\n          } else {\n            displayName = 'Unknown Candidate';\n          }\n          \n          return { \n            id: resultDoc.id, \n            ...data,\n            candidateName: candidateName,\n            displayName: displayName\n          };\n        })\n      );\n      \n      setSubmissions(resultsData);\n    } catch (e) {\n      console.log('[Head:loadSubmissions:error]', e.code, e.message);\n      setError(e.message || 'Failed to load submissions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMarkSubmission = async (submissionId, newScore) => {\n    try {\n      const submissionRef = doc(db, 'results', submissionId);\n      await updateDoc(submissionRef, {\n        totalMarksAwarded: newScore,\n        score: Math.round((newScore / (selectedTest.totalMarks || 100)) * 100),\n        status: 'evaluated',\n        evaluatedAt: serverTimestamp(),\n        evaluatedBy: 'head'\n      });\n      \n      // Update local state\n      setSubmissions(submissions.map(s => \n        s.id === submissionId \n          ? { ...s, totalMarksAwarded: newScore, score: Math.round((newScore / (selectedTest.totalMarks || 100)) * 100), status: 'evaluated' }\n          : s\n      ));\n    } catch (e) {\n      console.error('Error updating submission score:', e);\n      setError('Failed to update score');\n    }\n  };\n\n  // const deleteTest = async (testId, testTitle) => {\n  //   const confirmDelete = window.confirm(\n  //     `Are you sure you want to delete \"${testTitle}\"?\\n\\n` +\n  //     `This action cannot be undone and will permanently remove:\\n` +\n  //     `• The test and all its questions\\n` +\n  //     `• All student submissions\\n` +\n  //     `• All related data\\n\\n` +\n  //     `This action is irreversible!`\n  //   );\n  //   \n  //   if (!confirmDelete) {return;}\n  //   \n  //   try {\n  //     // Delete test document\n  //     await deleteDoc(doc(db, 'tests', testId));\n  //     \n  //     // Delete all submissions for this test\n  //     const resultsQuery = query(collection(db, 'results'), where('testId', '==', testId));\n  //     const resultsSnap = await getDocs(resultsQuery);\n  //     const deletePromises = resultsSnap.docs.map(doc => deleteDoc(doc.ref));\n  //     await Promise.all(deletePromises);\n  //     \n  //     // Update local state\n  //     setTests(tests.filter(t => t.id !== testId));\n  //     if (selectedTest?.id === testId) {\n  //       setSelectedTest(null);\n  //       setSubmissions([]);\n  //     }\n  //     \n  //     alert(`Test \"${testTitle}\" and all related data deleted successfully!`);\n  //   } catch (e) {\n  //     console.log('[Head:deleteTest:error]', e.code, e.message);\n  //     setError('Failed to delete test');\n  //     alert('Failed to delete test. Please try again.');\n  //   }\n  // };\n\n  // const handleEditTest = (test) => {\n  //   // Parse duration for editing\n  //   const parseDuration = (duration) => {\n  //     const match = duration.match(/(\\d+)h?\\s*(\\d+)?m?/);\n  //     if (match) {\n  //       const hours = parseInt(match[1]) || 0;\n  //       const minutes = parseInt(match[2]) || 0;\n  //       return { hours, minutes };\n  //     }\n  //     return { hours: 0, minutes: 30 };\n  //   };\n  //   \n  //   const { hours, minutes } = parseDuration(test.duration || '30min');\n  //   \n  //   setEditTestData({\n  //     title: test.title || '',\n  //     description: test.description || '',\n  //     duration: test.duration || '30min',\n  //     durationHours: hours,\n  //     durationMinutes: minutes,\n  //     password: test.password || '',\n  //     allowMultipleSubmissions: test.allowMultipleSubmissions || false\n  //   });\n  //   setEditingTest(test);\n  //   setEditStep(1);\n  // };\n\n  // If viewing individual submission\n  if (selectedSubmission) {\n    return (\n      <HeadSubmissionDetailView \n        submission={selectedSubmission}\n        test={selectedTest}\n        onBack={() => setSelectedSubmission(null)}\n      />\n    );\n  }\n\n  if (!selectedTest) {\n    return (\n      <div className=\"head-results\">\n        <div className=\"results-header\">\n          <h3>Test Results</h3>\n          <div className=\"branch-badge\">\n            <span>Branch:</span>\n            <span className=\"badge badge-primary\">{userDoc?.branch || 'Full Stack'}</span>\n          </div>\n        </div>\n        \n        {error && <div className=\"alert alert-error\">{error}</div>}\n        \n        {loading ? (\n          <div className=\"loading-results\">\n            <Loading message=\"Loading test results\" subtext=\"Gathering candidate submissions and performance data\" variant=\"inline\" size=\"large\" />\n          </div>\n        ) : tests.length === 0 ? (\n          <div className=\"no-tests\">No tests created yet.</div>\n        ) : (\n          <div className=\"tests-grid\">\n            {tests.map(test => (\n              <div key={test.id} className=\"test-card clickable\" onClick={() => {\n                setSelectedTest(test);\n                loadSubmissions(test.id);\n              }}>\n                <div className=\"test-info\">\n                  <div>\n                    <h4>{test.title}</h4>\n                    <div className=\"test-meta\">\n                      {test.branch} • {test.duration} • {test.totalMarks} marks\n                    </div>\n                    {test.description && (\n                      <div className=\"test-description\">\n                        {test.description}\n                      </div>\n                    )}\n                  </div>\n                  <button className=\"btn btn-sm\">View</button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"head-results\">\n      <div className=\"results-header\">\n        <h3>Submissions for: {selectedTest.title}</h3>\n        <div className=\"results-actions\">\n          <div className=\"export-actions\">\n            <button\n              className={`btn btn-outline btn-sm ${exporting ? 'btn-loading' : ''}`}\n              onClick={() => exportSubmissionsToExcel({ submissions, selectedTest, setLoading: setExporting })}\n              disabled={exporting || submissions.length === 0}\n              title=\"Export submissions to Excel\"\n            >\n              <Icon name=\"notebook\" size=\"small\" /> Export Excel\n            </button>\n            <button\n              className=\"btn btn-outline btn-sm\"\n              onClick={async () => {\n                console.log('=== DEBUG TEST STRUCTURE ===');\n                console.log('Selected Test Object:', selectedTest);\n                console.log('Selected Test ID:', selectedTest.id);\n                console.log('Selected Test Questions:', selectedTest.questions);\n                \n                // Try to fetch test from Firestore\n                try {\n                  const testDoc = await getDoc(doc(db, 'tests', selectedTest.id));\n                  if (testDoc.exists()) {\n                    const testData = testDoc.data();\n                    console.log('Firestore Test Data:', testData);\n                    console.log('Available Fields:', Object.keys(testData));\n                    console.log('Questions Field:', testData.questions);\n                  } else {\n                    console.log('Test document not found in Firestore');\n                  }\n                } catch (error) {\n                  console.error('Error fetching test:', error);\n                }\n                \n                console.log('Sample Submission:', submissions[0]);\n                if (submissions[0]?.answers) {\n                  console.log('Answer Keys:', Object.keys(submissions[0].answers));\n                }\n                console.log('=== END DEBUG ===');\n              }}\n              title=\"Debug Test Structure\"\n            >\n              🔍 Debug\n            </button>\n            <button\n              className={`btn btn-outline btn-sm ${exporting ? 'btn-loading' : ''}`}\n              onClick={() => exportSubmissionsToPDF({ submissions, selectedTest, setLoading: setExporting, exportType: 'head' })}\n              disabled={exporting || submissions.length === 0}\n              title=\"Export submissions to PDF\"\n              style={{ marginLeft: '8px' }}\n            >\n              <Icon name=\"paper\" size=\"small\" /> Export PDF\n            </button>\n          </div>\n          <div className=\"refresh-actions\">\n            <button \n              className=\"btn btn-outline btn-sm\" \n              onClick={() => loadSubmissions(selectedTest.id)}\n              disabled={loading}\n            >\n              🔄 Refresh\n            </button>\n            <button className=\"btn btn-outline\" onClick={() => setSelectedTest(null)}>← Back to Tests</button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"results-summary\">\n        <div className=\"summary-stats\">\n          <span className=\"stat-item\">\n            <strong>Total Submissions:</strong> {submissions.length}\n          </span>\n          <span className=\"stat-item\">\n            <strong>Evaluated:</strong> {submissions.filter(s => s.status === 'evaluated').length}\n          </span>\n          <span className=\"stat-item\">\n            <strong>Pending:</strong> {submissions.filter(s => s.status !== 'evaluated').length}\n          </span>\n          <span className=\"stat-item\">\n            <strong>Test Total:</strong> {selectedTest.totalMarks || 100} marks\n          </span>\n        </div>\n      </div>\n      \n      {error && <div className=\"alert alert-error\">{error}</div>}\n      \n      {loading ? (\n        <div className=\"loading-results\">\n          <Loading message=\"Loading detailed submissions\" subtext=\"Processing candidate answers and calculating scores\" variant=\"inline\" size=\"large\" />\n        </div>\n      ) : submissions.length === 0 ? (\n        <div className=\"no-submissions\">No submissions for this test yet.</div>\n      ) : (\n        <div className=\"submissions-grid\">\n          {submissions.map(result => {\n            // Use the processed display name\n            \n            // Determine the best name to display - prioritize actual names over IDs\n            const displayName = result.candidateName || result.displayName || 'Unknown Candidate';\n            \n            return (\n              <div key={result.id} className=\"submission-card\">\n                <div className=\"submission-info\">\n                  <div>\n                    <h4>Candidate Submission</h4>\n                    <div className=\"candidate-name\">\n                      {displayName}\n                    </div>\n                    <div className=\"candidate-id\">\n                      ID: {result.candidateId || 'N/A'}\n                    </div>\n                    <div className=\"submission-date\">\n                      Submitted: {result.submittedAt?.toDate?.()?.toLocaleString() || 'Not submitted'}\n                    </div>\n                    <div className=\"submission-duration\">\n                      Duration: {result.timeTaken ? `${Math.round(result.timeTaken / 60)} minutes` : 'N/A'}\n                    </div>\n                    {result.evaluatedAt && (\n                      <div className=\"evaluation-date\">\n                        Evaluated: {result.evaluatedAt?.toDate?.()?.toLocaleString()}\n                      </div>\n                    )}\n                  </div>\n                  <span className={`badge ${result.status === 'evaluated' ? 'badge-success' : 'badge-neutral'}`}>\n                    {result.status || 'submitted'}\n                  </span>\n                </div>\n                \n                <div className=\"score-input\">\n                  <label>Score:</label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max={selectedTest.totalMarks || 100}\n                    step=\"0.5\"\n                    value={result.totalMarksAwarded !== undefined ? result.totalMarksAwarded : result.score || 0}\n                    onChange={(e) => {\n                      const newScore = parseFloat(e.target.value) || 0;\n                      handleMarkSubmission(result.id, newScore);\n                    }}\n                  />\n                  <span>/{selectedTest.totalMarks || 100} marks</span>\n                  {result.totalMarksAwarded !== undefined && (\n                    <div className=\"percentage-display\">\n                      ({Math.round((result.totalMarksAwarded / (selectedTest.totalMarks || 100)) * 100)}%)\n                    </div>\n                  )}\n                  <div className=\"submission-stats\">\n                    <div className=\"questions-attempted\">\n                      Questions: {result.answers ? Object.keys(result.answers).length : 0} answered\n                    </div>\n                    {result.evaluatedBy && (\n                      <div className=\"evaluated-by\">\n                        Evaluated by: {result.evaluatedBy}\n                      </div>\n                    )}\n                  </div>\n                  <button \n                    className=\"btn btn-sm btn-outline\"\n                    onClick={() => setSelectedSubmission(result)}\n                    title=\"View Details\"\n                  >\n                    <Icon name=\"computer\" size=\"small\" /> View Details\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Head Submission Detail View Component\nfunction HeadSubmissionDetailView({ submission, test, onBack }) {\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [marksDistribution, setMarksDistribution] = useState({});\n  const [totalMarks, setTotalMarks] = useState(0);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    const loadSubmissionDetails = async () => {\n      try {\n        // Fetch questions from the test\n        const questionsRef = collection(db, 'tests', test.id, 'questions');\n        const questionsSnapshot = await getDocs(questionsRef);\n        const questionsData = questionsSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: data.questionId || doc.id,\n            questionText: data.questionText,\n            questionType: data.questionType,\n            options: data.options || [],\n            correctAnswer: data.correctAnswer,\n            marks: data.marks || 1,\n            imageUrl: data.imageUrl || '',\n            ...data\n          };\n        });\n\n        // Sort questions by ID\n        questionsData.sort((a, b) => {\n          const aId = parseInt(a.id) || 0;\n          const bId = parseInt(b.id) || 0;\n          return aId - bId;\n        });\n\n        // Add candidate answers to questions\n        const questionsWithAnswers = questionsData.map(question => {\n          const candidateAnswer = submission.answers?.[question.id] || '';\n          return {\n            ...question,\n            candidateAnswer,\n            isCorrect: question.questionType === 'mcq' ? \n              candidateAnswer === question.correctAnswer : null\n          };\n        });\n\n        // Initialize marks distribution\n        const initialMarks = {};\n        let calculatedTotal = 0;\n        \n        questionsWithAnswers.forEach(question => {\n          // Check if marks already exist in submission\n          const existingMarks = submission.questionMarks?.[question.id];\n          if (existingMarks !== undefined) {\n            initialMarks[question.id] = existingMarks;\n            calculatedTotal += existingMarks;\n          } else {\n            // Initialize all questions with 0 marks for manual grading\n            initialMarks[question.id] = 0;\n          }\n        });\n\n        setQuestions(questionsWithAnswers);\n        setMarksDistribution(initialMarks);\n        setTotalMarks(calculatedTotal);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error loading submission details:', error);\n        setLoading(false);\n      }\n    };\n\n    loadSubmissionDetails();\n  }, [submission, test.id]);\n\n  const handleMarksChange = (questionId, marks) => {\n    const numericMarks = Math.max(0, parseFloat(marks) || 0);\n    const maxMarks = questions.find(q => q.id === questionId)?.marks || 1;\n    const finalMarks = Math.min(numericMarks, maxMarks);\n    \n    setMarksDistribution(prev => ({\n      ...prev,\n      [questionId]: finalMarks\n    }));\n    \n    // Recalculate total\n    const newTotal = Object.values({\n      ...marksDistribution,\n      [questionId]: finalMarks\n    }).reduce((sum, mark) => sum + (mark || 0), 0);\n    setTotalMarks(newTotal);\n  };\n\n  const saveMarksDistribution = async () => {\n    setSaving(true);\n    try {\n      // Calculate percentage score\n      const maxPossibleMarks = questions.reduce((sum, q) => sum + (q.marks || 1), 0);\n      const percentage = maxPossibleMarks > 0 ? Math.round((totalMarks / maxPossibleMarks) * 100) : 0;\n\n      // Update submission in database\n      const submissionRef = doc(db, 'results', submission.id);\n      await updateDoc(submissionRef, {\n        questionMarks: marksDistribution,\n        totalMarksAwarded: totalMarks,\n        maxPossibleMarks: maxPossibleMarks,\n        score: percentage,\n        status: 'evaluated',\n        evaluatedAt: serverTimestamp(),\n        evaluatedBy: 'head'\n      });\n\n      alert('Marks saved successfully!');\n    } catch (error) {\n      console.error('Error saving marks:', error);\n      alert('Failed to save marks. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-tests\">\n        <Loading message=\"Loading submission details\" subtext=\"Fetching candidate answers and question data\" variant=\"inline\" size=\"large\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"submission-detail-view\">\n      <div className=\"submission-header\">\n        <button className=\"btn btn-outline\" onClick={onBack}>\n          <Icon name=\"submissions\" size=\"small\" /> Back to Submissions\n        </button>\n        <div className=\"submission-info\">\n          <h2>Submission Details</h2>\n          <div className=\"submission-meta\">\n            <div className=\"meta-item\">\n              <strong>Candidate:</strong> {submission.candidateName || 'Unknown'}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Test:</strong> {test.title}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Submitted:</strong> {formatDateTime(submission.submittedAt)}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Score:</strong> {submission.totalMarksAwarded !== undefined ? \n                `${submission.totalMarksAwarded}/${submission.maxPossibleMarks || 'N/A'} marks` : \n                submission.score !== undefined ? `${submission.score}%` : 'Not graded'}\n            </div>\n            <div className=\"meta-item\">\n              <strong>Status:</strong> \n              <span className={`badge ${submission.status === 'evaluated' ? 'badge-success' : 'badge-warning'}`}>\n                {submission.status || 'submitted'}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"marks-summary-header\">\n          <div className=\"marks-total-display\">\n            <span className=\"marks-total-label\">Total Marks:</span>\n            <span className=\"marks-total-value\">{totalMarks} / {questions.reduce((sum, q) => sum + (q.marks || 1), 0)}</span>\n            <span className=\"marks-percentage\">({questions.reduce((sum, q) => sum + (q.marks || 1), 0) > 0 ? \n              Math.round((totalMarks / questions.reduce((sum, q) => sum + (q.marks || 1), 0)) * 100) : 0}%)</span>\n          </div>\n          <div className=\"marks-actions\">\n            <button \n              className={`btn btn-primary ${saving ? 'btn-loading' : ''}`}\n              onClick={saveMarksDistribution}\n              disabled={saving}\n            >\n              {saving ? 'Saving...' : <><Icon name=\"shield\" size=\"small\" /> Save All Marks</>}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"submission-questions\">\n        {questions.map((question, index) => (\n          <div key={question.id} className=\"submission-question-card\">\n            <div className=\"question-header\">\n              <div className=\"question-title-section\">\n                <span className=\"question-number\">Q{index + 1}</span>\n                <div className=\"question-meta\">\n                  <span className=\"question-type\">{question.questionType?.toUpperCase() || 'MCQ'}</span>\n                  <span className=\"question-marks\">Max: {question.marks || 1} marks</span>\n                  {question.questionType === 'mcq' && (\n                    <div className=\"mcq-answer-preview\">\n                      <span className=\"candidate-choice\">Choice: {question.candidateAnswer || 'None'}</span>\n                      <span className={`answer-status ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                        {question.isCorrect ? <><Icon name=\"success\" size=\"small\" /> Correct</> : <><Icon name=\"fire\" size=\"small\" /> Incorrect</>}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"marks-input-section\">\n                <div className=\"marks-input-container\">\n                  <label className=\"marks-label\">Marks Awarded:</label>\n                  <div className=\"marks-input-wrapper\">\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max={question.marks || 1}\n                      step=\"0.5\"\n                      value={marksDistribution[question.id] || 0}\n                      onChange={(e) => handleMarksChange(question.id, e.target.value)}\n                      className=\"marks-input\"\n                    />\n                    <span className=\"marks-max\">/ {question.marks || 1}</span>\n                  </div>\n                  {question.questionType === 'mcq' && question.isCorrect !== null && (\n                    <span className={`mcq-result-indicator ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                      {question.isCorrect ? <><Icon name=\"success\" size=\"small\" /> Correct Answer</> : <><Icon name=\"fire\" size=\"small\" /> Wrong Answer</>}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"question-content\">\n              <div className=\"question-text\">\n                {question.questionText || 'No question text'}\n              </div>\n\n              {/* Question Image */}\n              {question.imageUrl && (\n                <div className=\"question-image\">\n                  <img \n                    src={question.imageUrl} \n                    alt=\"Question illustration\"\n                    style={{\n                      maxWidth: '100%',\n                      maxHeight: '300px',\n                      borderRadius: '8px',\n                      border: '1px solid #e5e7eb',\n                      marginTop: '1rem'\n                    }}\n                    onError={(e) => {\n                      e.target.style.display = 'none';\n                    }}\n                  />\n                </div>\n              )}\n\n              {/* MCQ Options and Answer */}\n              {question.questionType === 'mcq' && (\n                <div className=\"mcq-section\">\n                  <div className=\"candidate-answer-display\">\n                    <h4>Candidate's Answer:</h4>\n                    <div className={`candidate-selected-answer ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                      <span className=\"selected-option-text\">\n                        {question.candidateAnswer || 'No answer selected'}\n                      </span>\n                      <span className={`answer-result ${question.isCorrect ? 'correct' : 'incorrect'}`}>\n                        {question.isCorrect ? <><Icon name=\"success\" size=\"small\" /> Correct</> : <><Icon name=\"fire\" size=\"small\" /> Incorrect</>}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"question-options\">\n                    <h4>All Options:</h4>\n                    {question.options.map((option, optIndex) => (\n                      <div \n                        key={optIndex} \n                        className={`option ${\n                          option === question.correctAnswer ? 'correct-option' : ''\n                        } ${\n                          option === question.candidateAnswer ? 'selected-option' : ''\n                        }`}\n                      >\n                        <span className=\"option-label\">{String.fromCharCode(65 + optIndex)}.</span>\n                        <span className=\"option-text\">{option}</span>\n                        {option === question.correctAnswer && (\n                          <span className=\"correct-indicator\"><Icon name=\"success\" size=\"small\" /> Correct Answer</span>\n                        )}\n                        {option === question.candidateAnswer && option !== question.correctAnswer && (\n                          <span className=\"selected-indicator\">← Candidate Selected</span>\n                        )}\n                        {option === question.candidateAnswer && option === question.correctAnswer && (\n                          <span className=\"both-indicator\">← Candidate Selected (Correct!)</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Long Answer or Code Answer */}\n              {(question.questionType === 'long' || question.questionType === 'code') && (\n                <div className=\"text-answer-section\">\n                  <h4>Candidate's Answer:</h4>\n                  <div className=\"candidate-answer\">\n                    {question.candidateAnswer ? (\n                      <pre style={{\n                        background: '#f8f9fa',\n                        padding: '1rem',\n                        borderRadius: '8px',\n                        border: '1px solid #e5e7eb',\n                        whiteSpace: 'pre-wrap',\n                        fontFamily: question.questionType === 'code' ? 'monospace' : 'inherit'\n                      }}>\n                        {question.candidateAnswer}\n                      </pre>\n                    ) : (\n                      <div className=\"no-answer\">No answer provided</div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {questions.length === 0 && (\n        <div className=\"no-questions\">\n          <p>No questions found for this submission</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction HeadDashboard() {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('create');\n  const { loading: contextLoading } = useFirebase();\n  // const { userDoc } = useFirebase(); // userDoc not currently used in main component\n\n  const tabs = useMemo(() => [\n    { label: 'Create Test', value: 'create' },\n    { label: 'Manage Tests', value: 'manage' },\n    { label: 'Results', value: 'results' },\n    { label: 'Leaderboard', value: 'leaderboard' },\n  ], []);\n\n  const handleSignOut = async () => {\n    try {\n      await signOut(auth);\n      navigate('/');\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  if (contextLoading) {\n    return <Loading message=\"Loading head dashboard\" subtext=\"Please wait while we prepare your workspace\" />;\n  }\n\n  return (\n    <div className=\"head-dashboard theme-head\">\n      <div className=\"dashboard-header\">\n        <div className=\"header-content\">\n          <div className=\"user-info\">\n            <h1>Head Dashboard</h1>\n            <span className=\"badge badge-head\">Head</span>\n          </div>\n          <button className=\"btn btn-outline\" onClick={handleSignOut}>\n            Sign Out\n          </button>\n        </div>\n      </div>\n\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-nav\">\n          <div className=\"tc-tabs\">\n            {tabs.map((t) => (\n              <button\n                key={t.value}\n                className={`tc-tab ${activeTab === t.value ? 'is-active' : ''}`}\n                onClick={() => setActiveTab(t.value)}\n                data-tab={t.value}\n              >\n                {t.label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"dashboard-main\">\n          {activeTab === 'create' && <HeadCreateTest />}\n          {activeTab === 'manage' && <HeadManageTests />}\n          {activeTab === 'results' && <HeadResults />}\n          {activeTab === 'leaderboard' && <Leaderboard />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HeadDashboard;\n","import { signOut } from 'firebase/auth';\nimport { collection, getDocs, query, where, getDoc, doc } from 'firebase/firestore';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useFirebase } from '../../../context/FirebaseContext';\nimport { auth, db } from '../../../firebase';\nimport { formatDate } from '../../../utils/dateUtils';\nimport BlockedSubmissionCard from '../../BlockedSubmissionCard/BlockedSubmissionCard';\nimport Icon from '../../icons/Icon';\nimport Leaderboard from '../../Leaderboard/Leaderboard';\nimport Loading from '../../Loading/Loading';\nimport './UserDashboard.css';\n\n// Candidate Tests Component\nfunction CandidateTests() {\n  const navigate = useNavigate();\n  const { user } = useFirebase();\n  const [tests, setTests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showBlockedCard, setShowBlockedCard] = useState(false);\n  const [blockMessage, setBlockMessage] = useState('');\n  const [checkingSubmissions, setCheckingSubmissions] = useState(false);\n\n  useEffect(() => {\n    const loadTests = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        const testsRef = collection(db, 'tests');\n        // Remove the status filter to show all tests\n        const q = testsRef;\n        const snap = await getDocs(q);\n        \n        // Filter out tests that are not active or published\n        const now = new Date();\n        const testsData = snap.docs\n          .map(d => ({ id: d.id, ...d.data() }))\n          .filter(test => {\n            // Include test if it's active or doesn't have a status field (for backward compatibility)\n            const isActive = !test.status || test.status === 'active';\n            \n            // Check if test has an end date and if it's still valid\n            const hasValidEndDate = !test.endDate || \n                                  (test.endDate?.toDate && test.endDate.toDate() > now) ||\n                                  (test.endDate?.seconds && new Date(test.endDate.seconds * 1000) > now);\n            \n            return isActive && hasValidEndDate;\n          });\n        \n        // Deduplicate tests by title and branch\n        const testMap = new Map();\n        testsData.forEach(test => {\n          const key = `${test.title}_${test.branch}`;\n          const existingTest = testMap.get(key);\n          \n          if (!existingTest) {\n            testMap.set(key, test);\n          } else {\n            // If test has an end date, keep the one with the latest end date\n            // Otherwise, keep the most recently created one\n            const existingEndDate = existingTest.endDate?.toDate?.() || existingTest.endDate?.seconds ? \n              new Date(existingTest.endDate.seconds * 1000) : null;\n            const currentEndDate = test.endDate?.toDate?.() || test.endDate?.seconds ? \n              new Date(test.endDate.seconds * 1000) : null;\n              \n            if (existingEndDate && currentEndDate) {\n              if (currentEndDate > existingEndDate) {\n                testMap.set(key, test);\n              }\n            } else {\n              // Fall back to creation date if end dates are not available\n              const existingTime = existingTest.createdAt?.toDate?.()?.getTime() || 0;\n              const currentTime = test.createdAt?.toDate?.()?.getTime() || 0;\n              \n              if (currentTime > existingTime) {\n                testMap.set(key, test);\n              }\n            }\n          }\n        });\n        \n        const uniqueTests = Array.from(testMap.values());\n        setTests(uniqueTests);\n      } catch (e) {\n        console.log('[Candidate:loadTests:error]', e.code, e.message);\n        setError(e.message || 'Failed to load tests');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadTests();\n  }, []);\n\n  // Function to check submissions before starting test\n  const checkSubmissionsAndStart = async (test) => {\n    if (!user) {return;}\n\n    setCheckingSubmissions(true);\n    try {\n      // Check existing submissions\n      const existingSubmissionsQuery = query(\n        collection(db, 'results'),\n        where('candidateId', '==', user.uid),\n        where('testId', '==', test.id)\n      );\n      const existingSubmissions = await getDocs(existingSubmissionsQuery);\n      const submissionCount = existingSubmissions.size;\n      \n      console.log('UserDashboard submission check:', {\n        submissionCount,\n        allowMultiple: test.allowMultipleSubmissions,\n        testId: test.id,\n        shouldBlock: submissionCount >= 3 && test.allowMultipleSubmissions,\n        attemptNumber: submissionCount + 1\n      });\n\n      // Logic based on submission count and settings\n      if (submissionCount === 0) {\n        // First attempt - proceed to test\n        console.log('First attempt - proceeding to test');\n        navigate(`/test/${test.id}`);\n      } else if (submissionCount > 0 && !test.allowMultipleSubmissions) {\n        // Not first attempt and multiple submissions not allowed - show blocked card\n        console.log('Multiple submissions not allowed - showing blocked card');\n        setBlockMessage(\n          `This test does not allow multiple submissions. You have already submitted this test ${submissionCount} time${submissionCount > 1 ? 's' : ''}. Please contact your branch head if you need to retake this test.`\n        );\n        setShowBlockedCard(true);\n      } else if (submissionCount > 0 && test.allowMultipleSubmissions) {\n        // Multiple submissions allowed - check limit (allow up to 3 total submissions)\n        if (submissionCount >= 3) {\n          console.log('Maximum attempts reached - showing blocked card');\n          setBlockMessage(\n            `You have reached the maximum number of attempts (3) for this test. You have already submitted this test ${submissionCount} times. Please contact your branch head if you need additional attempts.`\n          );\n          setShowBlockedCard(true);\n        } else {\n          // Within limit - proceed to test (submissions 2 and 3)\n          console.log(`Attempt ${submissionCount + 1}/3 - proceeding to test`);\n          navigate(`/test/${test.id}`);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error checking submission status:', error);\n      // On error, default to proceeding to test\n      navigate(`/test/${test.id}`);\n    } finally {\n      setCheckingSubmissions(false);\n    }\n  };\n\n  const filteredTests = tests.filter(t => {\n    const q = searchQuery.toLowerCase();\n    return (\n      t.title?.toLowerCase().includes(q) ||\n      t.branch?.toLowerCase().includes(q) ||\n      t.description?.toLowerCase().includes(q)\n    );\n  });\n\n  if (loading) {return (\n    <div className=\"loading-tests\">\n      <Loading message=\"Loading tests\" subtext=\"Fetching available tests for you\" variant=\"inline\" size=\"large\" />\n    </div>\n  );}\n  if (error) {return <div className=\"error\">Error: {error}</div>;}\n\n  return (\n    <div className=\"candidate-tests\">\n      {showBlockedCard && (\n        <BlockedSubmissionCard \n          message={blockMessage} \n          onClose={() => setShowBlockedCard(false)}\n        />\n      )}\n      \n      <div className=\"search-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Search tests...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"search-input\"\n        />\n      </div>\n      \n      <div className=\"tests-grid\">\n        {filteredTests.map(test => (\n          <div key={test.id} className=\"test-card\">\n            <div className=\"test-header\">\n              <h3 className=\"test-title\">{test.title}</h3>\n              <span className=\"badge badge-neutral\">{test.branch}</span>\n            </div>\n            <p className=\"test-description\">{test.description || 'No description available'}</p>\n            <div className=\"test-meta\">\n              <div className=\"meta-item\">\n                <span className=\"meta-icon\">⏱️</span>\n                <span>Duration: {test.duration || '60 minutes'}</span>\n              </div>\n              <div className=\"meta-item\">\n                <span className=\"meta-icon\">📝</span>\n                <span>Total Marks: {test.totalMarks || 'N/A'}</span>\n              </div>\n              <div className=\"meta-item\">\n                <span className=\"meta-icon\">📅</span>\n                <span>Created: {formatDate(test.createdAt)}</span>\n              </div>\n            </div>\n            \n            <div className=\"test-actions\">\n              <button \n                className=\"btn btn-primary test-start-btn\"\n                onClick={() => checkSubmissionsAndStart(test)}\n                disabled={checkingSubmissions}\n              >\n                <span className=\"btn-icon\">{checkingSubmissions ? '⏳' : '🚀'}</span>\n                {checkingSubmissions ? 'Checking...' : 'Start Test'}\n              </button>\n              \n              {test.password && (\n                <div className=\"test-password-hint\">\n                  <span className=\"password-icon\">🔒</span>\n                  <span>Password required</span>\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {filteredTests.length === 0 && (\n        <div className=\"no-tests\">\n          {searchQuery ? (\n            <>\n              <div className=\"no-tests-icon\">🔍</div>\n              <h3>No Tests Found</h3>\n              <p>No tests match your search \"{searchQuery}\"</p>\n              <button \n                className=\"btn btn-outline\"\n                onClick={() => setSearchQuery('')}\n              >\n                Clear Search\n              </button>\n            </>\n          ) : (\n            <>\n              <div className=\"no-tests-icon\">📚</div>\n              <h3>No Tests Available</h3>\n              <p>There are no active tests at the moment. Check back later!</p>\n              <button \n                className=\"btn btn-primary\"\n                onClick={() => window.location.reload()}\n              >\n                Refresh Tests\n              </button>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Candidate Results Component\nfunction CandidateResults() {\n  const [results, setResults] = useState([]);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { user, userDoc } = useFirebase();\n\n  // Filter results based on search term\n  useEffect(() => {\n    if (!searchTerm.trim()) {\n      setFilteredResults(results);\n    } else {\n      const searchLower = searchTerm.toLowerCase();\n      const filtered = results.filter(result => \n        (result.testTitle || result.title || '').toLowerCase().includes(searchLower)\n      );\n      setFilteredResults(filtered);\n    }\n  }, [searchTerm, results]);\n\n  useEffect(() => {\n    const loadResults = async () => {\n      if (!user?.uid) {return;}\n      \n      setLoading(true);\n      setError('');\n      try {\n        const resultsRef = collection(db, 'results');\n        // Fetch results with status 'submitted' or 'evaluated' only (exclude auto-submitted)\n        const q = query(\n          resultsRef, \n          where('candidateId', '==', user.uid),\n          where('status', 'in', ['submitted', 'evaluated'])\n        );\n        const snap = await getDocs(q);\n        // Process results and fetch test details for each\n        const resultsWithTestData = await Promise.all(snap.docs.map(async (d) => {\n          const resultData = { id: d.id, ...d.data() };\n          \n          // Fetch test data to get the title and totalMarks\n          try {\n            const testDoc = await getDoc(doc(db, 'tests', resultData.testId));\n            if (testDoc.exists()) {\n              const testData = testDoc.data();\n              resultData.testTitle = testData.title;\n              // If totalMarks is not in the result, try to get it from the test\n              if (resultData.totalMarks === undefined) {\n                // Try to calculate totalMarks from questions if not directly available\n                if (testData.questions?.length > 0) {\n                  resultData.totalMarks = testData.questions.reduce((sum, q) => {\n                    return sum + (q.marks || 1);\n                  }, 0);\n                } else if (testData.totalMarks) {\n                  resultData.totalMarks = testData.totalMarks;\n                }\n              }\n            }\n          } catch (error) {\n            console.error('Error fetching test data:', error);\n          }\n          \n          return resultData;\n        }));\n        \n        // Sort by submission date (newest first)\n        resultsWithTestData.sort((a, b) => {\n          const timeA = a.submittedAt?.toDate?.() ? a.submittedAt.toDate().getTime() : 0;\n          const timeB = b.submittedAt?.toDate?.() ? b.submittedAt.toDate().getTime() : 0;\n          return timeB - timeA;\n        });\n        \n        // Remove duplicate submissions - keep only the latest submission per test\n        const uniqueResults = [];\n        const seenTestIds = new Set();\n        \n        for (const result of resultsWithTestData) {\n          if (!seenTestIds.has(result.testId)) {\n            seenTestIds.add(result.testId);\n            uniqueResults.push(result);\n          }\n        }\n        \n        setResults(uniqueResults);\n        setFilteredResults(uniqueResults); // Initialize filtered results with unique results\n      } catch (e) {\n        console.log('[Candidate:loadResults:error]', e.code, e.message);\n        setError(e.message || 'Failed to load results');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadResults();\n  }, [user?.uid]);\n\n  if (loading) {return (\n    <div className=\"loading-results\">\n      <Loading message=\"Loading your results\" subtext=\"Analyzing your test performance and scores\" variant=\"inline\" size=\"large\" />\n    </div>\n  );}\n  if (error) {return <div className=\"error\">Error: {error}</div>;}\n\n  return (\n    <div className=\"candidate-results\">\n      <div className=\"results-header\">\n        <h2>Your Test Results</h2>\n        \n        <div className=\"search-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by test title...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n        </div>\n      </div>\n      \n      {filteredResults.length === 0 ? (\n        <div className=\"no-results\">\n          <div className=\"no-results-icon\">📊</div>\n          <h3>No Test Results Yet</h3>\n          <p>Complete some tests to see your results here.</p>\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => window.location.reload()}\n          >\n            Refresh Results\n          </button>\n        </div>\n      ) : (\n        <div className=\"results-grid\">\n          {filteredResults.map(result => (\n            <div key={result.id} className={`result-card ${result.status === 'auto-submitted' ? 'auto-submitted' : ''}`}>\n              <h3 className=\"result-title\">\n                {result.testTitle || result.title || 'Test'}\n              </h3>\n              <div className=\"candidate-info\">\n                <span className=\"candidate-name\">\n                  Candidate: {userDoc?.name || user?.displayName || 'Unknown'}\n                </span>\n              </div>\n              <div className=\"result-score-container\">\n                <div className=\"score-display\">\n                  <span className=\"score-value\">\n                    {(() => {\n                      // Show actual marks awarded, not percentage\n                      if (result.totalMarksAwarded !== undefined && result.totalMarksAwarded !== null) {\n                        return result.totalMarksAwarded;\n                      } else if (result.score !== undefined && result.totalMarks !== undefined) {\n                        // Calculate actual marks from percentage\n                        return Math.round((result.score / 100) * result.totalMarks);\n                      } else {\n                        return '--';\n                      }\n                    })()}\n                    <span className=\"score-divider\">/</span>\n                    <span className=\"score-total\">\n                      {result.totalMarks !== undefined ? result.totalMarks : '--'}\n                    </span>\n                  </span>\n                </div>\n                <div className=\"score-label\">\n                  {result.status === 'evaluated' ? 'Score' : \n                   result.status === 'auto-submitted' ? 'Auto-Submitted' : 'Submitted'}\n                </div>\n              </div>\n              {result.submittedAt && (\n                <div className=\"submission-info\">\n                  <span className=\"submission-date\">\n                    Submitted: {formatDate(result.submittedAt)}\n                  </span>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n\nfunction UserDashboard() {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('tests');\n  const { user, userDoc, loading: contextLoading } = useFirebase();\n  const [showProfileMenu, setShowProfileMenu] = useState(false);\n\n  const themeClass = 'theme-candidate';\n\n  // Set default tab for candidates\n  useEffect(() => {\n    setActiveTab('tests');\n  }, []);\n  \n  const tabs = useMemo(() => [\n    { label: 'Available Tests', value: 'tests' },\n    { label: 'My Results', value: 'results' },\n    { label: 'Leaderboard', value: 'leaderboard' },\n  ], []);\n\n  const handleSignOut = async () => {\n    try {\n      await signOut(auth);\n      navigate('/');\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  if (contextLoading) {\n    return <Loading message=\"Loading dashboard\" subtext=\"Please wait while we prepare your workspace\" />;\n  }\n\n  return (\n    <div className={`user-dashboard ${themeClass}`}>\n      <div className=\"dashboard-header\">\n        <div className=\"header-content\">\n          <div className=\"user-info\">\n            <h1>Welcome, {userDoc?.name || user?.displayName || 'Candidate'}</h1>\n            \n          </div>\n          <div className=\"header-actions\" style={{ display: 'flex', alignItems: 'center', gap: '8px', position: 'relative' }}>\n            <button\n              className=\"btn btn-outline\"\n              onClick={() => setShowProfileMenu((v) => !v)}\n              title=\"Open Profile Menu\"\n            >\n              <Icon name=\"user\" size=\"small\" /> Profile\n            </button>\n\n            {showProfileMenu && (\n              <div\n                className=\"profile-menu\"\n                style={{\n                  position: 'absolute',\n                  right: 0,\n                  top: '110%',\n                  background: '#fff',\n                  border: '1px solid #e5e7eb',\n                  borderRadius: 8,\n                  padding: 8,\n                  minWidth: 180,\n                  boxShadow: '0 10px 25px rgba(0,0,0,0.08)',\n                  zIndex: 15\n                }}\n              >\n                <button\n                  className=\"btn btn-ghost\"\n                  style={{ width: '100%', textAlign: 'left', padding: '8px 10px' }}\n                  onClick={() => {\n                    setShowProfileMenu(false);\n                    navigate('/account');\n                  }}\n                >\n                  Account\n                </button>\n                <button\n                  className=\"btn btn-ghost\"\n                  style={{ width: '100%', textAlign: 'left', padding: '8px 10px' }}\n                  onClick={handleSignOut}\n                >\n                  Sign Out\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"dashboard-content\">\n        <div className=\"dashboard-nav\">\n          <div className=\"tc-tabs\">\n            {tabs.map((t) => (\n              <button\n                key={t.value}\n                className={`tc-tab ${activeTab === t.value ? 'is-active' : ''}`}\n                onClick={() => setActiveTab(t.value)}\n                data-tab={t.value}\n              >\n                {t.label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"dashboard-main\">\n          {activeTab === 'tests' && <CandidateTests />}\n          {activeTab === 'results' && <CandidateResults />}\n          {activeTab === 'leaderboard' && <Leaderboard />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserDashboard;\n","import React, { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport { useFirebase } from '../../context/FirebaseContext';\nimport { showSuccess } from '../../utils/notifications';\nimport Blocked from '../Blocked/Blocked';\nimport Loading from '../Loading/Loading';\n\nimport AdminDashboard from './AdminDashboard/AdminDashboard';\nimport HeadDashboard from './HeadDashboard/HeadDashboard';\nimport UserDashboard from './UserDashboard/UserDashboard';\nimport './Dashboard.css';\n\nfunction Dashboard() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user, userDoc, blocked, loading } = useFirebase();\n  const role = (userDoc?.role || 'candidate').toLowerCase();\n\n  useEffect(() => {\n    // Check for email verification success\n    const params = new URLSearchParams(location.search);\n    if (params.get('verified') === 'true') {\n      const roleParam = params.get('role');\n      if (roleParam === 'candidate') {\n        showSuccess('🎉 Welcome to Testify! Your email has been verified successfully. You can now start taking tests as a candidate.');\n      } else {\n        showSuccess('🎉 Welcome to Testify! Your email has been verified successfully. You can now access all features.');\n      }\n      // Clean up the URL\n      window.history.replaceState({}, document.title, location.pathname);\n    }\n  }, [location]);\n\n  useEffect(() => {\n    // If not loading and no user, redirect to login\n    if (!loading && !user) {\n      navigate('/login');\n    }\n  }, [loading, user, navigate]);\n\n  if (loading) {\n    return <Loading message=\"Loading dashboard\" subtext=\"Please wait while we prepare your workspace\" />;\n  }\n\n  // If no user after loading, show loading while redirecting\n  if (!user) {\n    return <Loading message=\"Redirecting to login\" />;\n  }\n\n  // Check if user is blocked first\n  if (blocked) {\n    return <Blocked />;\n  }\n\n  // Route to appropriate dashboard based on user role\n  if (role === 'admin') {\n    return <AdminDashboard />;\n  } else if (role === 'head') {\n    return <HeadDashboard />;\n  } else {\n    return <UserDashboard />;\n  }\n}\n\nexport default Dashboard;\n","import { signOut } from 'firebase/auth';\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { auth } from '../../firebase';\nimport './Blocked.css';\n\nfunction Blocked() {\n  const navigate = useNavigate();\n\n  const handleSignOut = async () => {\n    try {\n      await signOut(auth);\n      navigate('/login');\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  return (\n    <div className=\"blocked-page\">\n      <div className=\"blocked-container\">\n        <div className=\"blocked-icon\">\n          <svg width=\"80\" height=\"80\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"#ef4444\" strokeWidth=\"2\"/>\n            <path d=\"M4.93 4.93l14.14 14.14\" stroke=\"#ef4444\" strokeWidth=\"2\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"6\" fill=\"#fef2f2\"/>\n          </svg>\n        </div>\n        \n        <div className=\"blocked-content\">\n          <h1>Account Blocked</h1>\n          <p className=\"blocked-message\">\n            Your account has been temporarily blocked by the administrator.\n          </p>\n          <p className=\"blocked-submessage\">\n            This may be due to a violation of our terms of service or suspicious activity.\n          </p>\n          \n          <div className=\"blocked-info\">\n            <div className=\"info-item\">\n              <strong>What can you do?</strong>\n              <ul>\n                <li>Contact the administrator for more information</li>\n                <li>Review our terms of service</li>\n                <li>Wait for the block to be lifted</li>\n              </ul>\n            </div>\n            \n            <div className=\"info-item\">\n              <strong>Need help?</strong>\n              <p>If you believe this is a mistake, please contact support:</p>\n              <div className=\"contact-info\">\n                <span>📧 coderscafe@jeckukas.org.in</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"blocked-actions\">\n          <button \n            className=\"btn btn-primary\"\n            onClick={handleSignOut}\n          >\n            Sign Out\n          </button>\n          <button \n            className=\"btn btn-outline\"\n            onClick={() => window.location.reload()}\n          >\n            Refresh Status\n          </button>\n        </div>\n        \n        <div className=\"blocked-footer\">\n          <p>© 2024 Testify. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Blocked;\n","\nfunction BlockedSubmissionCard({ message, onClose }) {\n  // const navigate = useNavigate(); // Commented out as not currently used\n\n  return (\n    <div className=\"blocked-overlay\" style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      zIndex: 1000\n    }}>\n      <div className=\"blocked-card\" style={{\n        backgroundColor: 'white',\n        borderRadius: '12px',\n        padding: '32px',\n        maxWidth: '500px',\n        margin: '20px',\n        textAlign: 'center',\n        boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',\n        border: '2px solid #ef4444'\n      }}>\n        <div style={{\n          fontSize: '64px',\n          color: '#ef4444',\n          marginBottom: '16px'\n        }}>\n          🚫\n        </div>\n        <h2 style={{\n          color: '#ef4444',\n          marginBottom: '16px',\n          fontSize: '24px',\n          fontWeight: 'bold'\n        }}>\n          Multiple Submissions Not Allowed\n        </h2>\n        <p style={{\n          color: '#6b7280',\n          marginBottom: '24px',\n          lineHeight: '1.6',\n          fontSize: '16px'\n        }}>\n          {message || 'This test does not allow multiple submissions. You have already submitted this test. Please contact your domain head if you need to retake this test.'}\n        </p>\n        <div style={{\n          backgroundColor: '#fef2f2',\n          border: '1px solid #fecaca',\n          borderRadius: '8px',\n          padding: '12px',\n          marginBottom: '24px'\n        }}>\n          <div style={{\n            fontSize: '14px',\n            color: '#dc2626',\n            fontWeight: '500'\n          }}>\n            📋 Contact Information\n          </div>\n          <div style={{\n            fontSize: '14px',\n            color: '#7f1d1d',\n            marginTop: '4px'\n          }}>\n            Please reach out to your domain head or administrator for assistance with test retakes or additional attempts.\n          </div>\n        </div>\n        <div style={{\n          display: 'flex',\n          gap: '12px',\n          justifyContent: 'center',\n          flexWrap: 'wrap'\n        }}>\n\n\n            {onClose && (\n              <button\n                onClick={onClose}\n                className=\"btn btn-outline\"\n                style={{\n                  backgroundColor: 'transparent',\n                  color: '#6b7280',\n                  padding: '12px 24px',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  cursor: 'pointer',\n                  fontSize: '16px',\n                  fontWeight: '500'\n                }}\n              >\n                Close\n              </button>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default BlockedSubmissionCard;\n","import React from 'react';\nimport './Loading.css';\n\nfunction Loading({ \n  message = \"Loading\", \n  subtext = \"Please wait...\", \n  size = \"normal\",\n  variant = \"dashboard\" \n}) {\n  if (variant === \"inline\") {\n    return (\n      <div className={`inline-loading ${size}`}>\n        <div className=\"inline-spinner\">\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n        </div>\n        <span className=\"inline-text\">{message}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-loading\">\n      <div className=\"loading-content\">\n        <div className=\"loading-logo\">TESTIFY</div>\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n        </div>\n        <div className=\"loading-text\">\n          {message}\n          <div className=\"loading-dots\">\n            <div className=\"loading-dot\" />\n            <div className=\"loading-dot\" />\n            <div className=\"loading-dot\" />\n          </div>\n        </div>\n        <div className=\"loading-subtext\">{subtext}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n"],"names":["async","fetchTestWithQuestions","testId","testRef","doc","db","testSnap","getDoc","exists","questions","getDocs","collection","docs","map","d","questionData","data","_objectSpread","id","questionId","showSuccess","message","callback","arguments","length","undefined","includes","alert","setTimeout","showError","showInfo","confirmAction","onConfirm","onCancel","result","window","confirm","formatDateTime","timestamp","toDate","toLocaleString","seconds","Date","date","isNaN","getTime","formatDate","toLocaleDateString","exportSubmissionsToExcel","submissions","selectedTest","setLoading","_ref","fileName","testQuestions","Logger","debug","questionsSnapshot","empty","qDoc","count","testDoc","testData","altTestDoc","altTestData","error","submissionCount","hasFirstSubmission","questionCount","enrichedSubmissions","Promise","all","submission","submissionIndex","_submission$submitted","_submission$submitted2","_submission$submitted3","concat","submissionId","userInfo","fullName","candidateName","gmail","mobile","year","candidateId","userDoc","userData","name","email","phone","rowData","hasAnswers","answers","answerKeys","Object","keys","filter","key","sortedQuestions","sort","a","b","order","index","aId","parseInt","bId","createdAt","indexOf","originalCount","sortedCount","forEach","question","questionText","answer","toString","possibleKeys","keyLower","toLowerCase","qidLower","String","columnHeader","finalAnswer","JSON","stringify","hasAnswer","warn","answerKey","substring","totalMarksAwarded","score","submittedAt","call","columnCount","workbook","ExcelJS","worksheet","addWorksheet","headers","addRow","row","header","column","getColumn","width","headerRow","getRow","font","bold","fill","type","pattern","fgColor","argb","title","replace","toISOString","split","buffer","xlsx","writeBuffer","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","exportSubmissionsToPDF","exportType","info","test","Questions","questionsList","Array","isArray","values","original","q","_q$questionText","text","sorted","_q$questionText2","displayAnswer","push","i","status","pdfDoc","jsPDF","setFontSize","titlePrefix","branch","domain","totalMarks","baseHeaders","questionHeaders","fullHeader","summaryHeaders","allHeaders","headerColor","headerCount","autoTable","head","body","startY","styles","fontSize","headStyles","fillColor","columnStyles","cellWidth","fromEntries","_","margin","left","right","didParseCell","cell","filePrefix","save","iconMap","fileTextIcon","computerIcon","copyIcon","calendarIcon","thumbUpIcon","shieldIcon","targetIcon","mailIcon","notebookIcon","fireIcon","girlIcon","firstPlaceIcon","secondPlaceIcon","thirdPlaceIcon","leaderboardIcon","size","className","alt","style","iconSrc","console","sizeClass","classes","trim","_jsx","src","Leaderboard","_leaderboardData$","tests","setTests","useState","setSelectedTest","leaderboardData","setLeaderboardData","loading","loadingLeaderboard","setLoadingLeaderboard","setError","publishedLeaderboards","setPublishedLeaderboards","publishing","setPublishing","useFirebase","isAdmin","role","isHead","isCandidate","canPublish","useEffect","testsRef","testsData","filteredTests","publishedData","leaderboardPublished","published","testTitle","publishedBy","publishedAt","publisherRole","err","loadTests","isLeaderboardPublished","_publishedLeaderboard3","fromState","find","t","fromTest","retryLoading","children","Loading","subtext","_jsxs","Icon","onClick","marginTop","autoPlay","loop","muted","playsInline","userInterfaceVideo","Math","round","renderPieChart","getPieChartData","ranges","label","min","max","color","percentage","range","r","total","reduce","sum","item","cumulativePercentage","viewBox","strokeDasharray","strokeDashoffset","cx","cy","stroke","strokeWidth","transform","backgroundColor","rank","maxPossibleMarks","isPublished","canViewLeaderboard","resultsQuery","query","where","snapshot","userQuery","userSnapshot","queryError","userDocRef","userDocSnap","docError","displayName","firstName","questionMarks","questionMarksArray","calculatedTotal","mark","parseFloat","originalTotal","finalResult","timeTaken","log","marks","rankedSubmissions","loadLeaderboard","e","stopPropagation","currentStatus","userRole","_publishedLeaderboard","newStatus","updateDoc","uid","unpublishedBy","unpublishedAt","prev","updated","_publishedLeaderboard2","isCurrentlyPublished","toggleLeaderboardPublication","disabled","_Fragment","duration","every","AdminOverview","activeTests","setActiveTests","stats","setStats","completedTests","unsubscribers","testsQuery","unsubTests","onSnapshot","liveParticipantsQuery","liveParticipantsSnapshot","totalSubmissionsQuery","totalSubmissionsSnapshot","liveParticipantCount","totalSubmissions","activeCount","unsub","variant","startTime","AdminUsers","_currentUser$email","_userDetails$totalTes","users","setUsers","searchQuery","setSearchQuery","filterRole","setFilterRole","filterStatus","setFilterStatus","currentPage","setCurrentPage","user","currentUser","selectedUser","setSelectedUser","detailsLoading","setDetailsLoading","userDetails","setUserDetails","pasteLogs","tabSwitchLogs","canPerformAdminActions","appConfig","superAdminEmail","usersRef","querySnapshot","usersData","fetchUsers","unsubscribe","handleRoleChange","userId","newRole","newDomain","userRef","updateData","updatedAt","serverTimestamp","viewUserDetails","submissionsQuery","_a$submittedAt","_a$submittedAt$toDate","_a$createdAt","_a$createdAt$toDate","_b$submittedAt","_b$submittedAt$toDate","_b$createdAt","_b$createdAt$toDate","ta","testIds","from","Set","s","Boolean","testTitleMap","tId","tSnap","_testTitle","pasteQueryRef","tabQueryRef","avgScore","sumPct","awarded","Number","totalTestsGiven","closeUserDetails","onKey","addEventListener","removeEventListener","filteredUsers","_user$email","_user$name","matchesSearch","matchesRole","matchesStatus","blocked","totalPages","ceil","startIndex","currentUsers","slice","placeholder","value","onChange","target","_user$email2","onDoubleClick","tabIndex","onKeyDown","RoleSelector","onRoleChange","canEdit","DomainSelector","currentBlocked","handleBlockToggle","currentTarget","_ref$toLocaleString","_s$submittedAt","_s$submittedAt$toDate","_s$createdAt","_s$createdAt$toDate","p","_ref2","_ref2$toLocaleString","_p$timestamp","_p$timestamp$toDate","marginLeft","_ref3","_ref3$toLocaleString","_t$lastUpdated","_t$lastUpdated$toDate","switchCount","lastUpdated","_ref4","isEditing","setIsEditing","selectedRole","setSelectedRole","handleRoleSubmit","charAt","toUpperCase","_ref5","selectedDomain","setSelectedDomain","domains","handleDomainSubmit","AdminTests","filterDomain","setFilterDomain","showSubmissions","setShowSubmissions","setSubmissions","viewSubmissions","submissionsData","submissionData","resultDoc","loadSubmissions","_test$title","_test$domain","matchesDomain","TestPaperView","onBack","TestSubmissionsView","viewTestPaper","deleteResultsPromises","deleteDoc","ref","questionsQuery","deleteQuestionsPromises","deleteTest","_ref6","setQuestions","questionsRef","questionsData","questionType","options","correctAnswer","imageUrl","loadQuestions","_question$questionTyp","maxWidth","maxHeight","borderRadius","border","onError","display","option","optIndex","fromCharCode","expectedAnswer","background","padding","overflow","_ref7","_currentUser$email2","_currentUser$email2$t","selectedSubmission","setSelectedSubmission","exporting","setExporting","localSubmissions","setLocalSubmissions","canDeleteSubmissions","filteredSubmissions","_submission$candidate","_submission$candidate2","SubmissionDetailView","testTotalMarks","evaluatedBy","calculatedMarks","monitoringQuery","monitoringSnapshot","monitoringDeletes","pasteQuery","pasteSnapshot","pasteDeletes","tabSwitchQuery","tabSwitchSnapshot","tabSwitchDeletes","totalDeleted","handleDeleteSubmission","_ref8","marksDistribution","setMarksDistribution","setTotalMarks","saving","setSaving","questionsWithAnswers","_submission$answers","candidateAnswer","isCorrect","initialMarks","_submission$questionM","existingMarks","loadSubmissionDetails","submissionRef","evaluatedAt","_question$questionTyp2","step","handleMarksChange","_questions$find","numericMarks","maxMarks","finalMarks","newTotal","whiteSpace","fontFamily","AdminMonitoring","participants","setParticipants","selectedParticipant","setSelectedParticipant","monitoringData","setMonitoringData","participantMonitoring","setParticipantMonitoring","loadAllMonitoringData","participantsData","monitoringPromises","participant","events","aggregatedData","tabSwitches","copyEvents","pasteEvents","totalViolations","lastActivity","_e$timestamp","toMillis","monitoringMap","acc","curr","selectTest","participantsQuery","unsubscribeParticipants","participantData","loadParticipants","selectParticipant","loadMonitoringData","isSuspicious","_monitoring$tabSwitch","_monitoring$copyEvent","_monitoring$pasteEven","monitoring","getSuspiciousActivityCount","getMonitoringStats","_monitoring$tabSwitch2","_monitoring$copyEvent2","_monitoring$pasteEven2","ParticipantDetailView","participantCount","getQuestionName","_testData$questions","_testData$questions2","_testData$questions3","_testData$questions4","_testData$questions5","storedQuestionText","cleanText","shortText","hasQuestionText","hasQuestion","hasText","baseQuestionId","_question","_question2","_question3","baseQuestionIdStr","_question4","_question5","_question6","questionIdStr","targetTimestamp","closestQuestion","smallestDiff","Infinity","qTimestamp","diff","abs","_question$questionTex","found","_testData$questions6","firstQuestion","firstQuestionText","_ref9","activeTab","setActiveTab","testWithQuestions","setTestWithQuestions","testQuery","testSnapshot","loadTestQuestions","event","keyboardEvents","rightClickEvents","source","content","field","description","shortcut","navigate","useNavigate","contextLoading","tabs","useMemo","signOut","auth","formatDuration","hours","minutes","HeadCreateTest","setStep","setTestData","durationHours","durationMinutes","password","allowMultipleSubmissions","qIndex","setQIndex","success","setSuccess","updateQuestion","rows","gap","alignItems","flexDirection","flex","inputMode","numValue","fontWeight","readOnly","position","height","checked","opacity","cursor","top","bottom","transition","addQuestion","newList","now","idx","findIndex","filtered","removeQuestion","nextSibling","onLoad","newOptions","goPrev","goNext","_testData$description","_testData$password","_auth$currentUser","createdBy","scheduledFor","setDoc","questionDoc","addDoc","code","HeadManageTests","_editQuestions$editQI","editingTest","setEditingTest","editStep","setEditStep","editTestData","setEditTestData","editQuestions","setEditQuestions","editQIndex","setEditQIndex","editLoading","setEditLoading","debugCheckDatabase","_data$questionText","docId","fullData","startEditTest","parsedDuration","durationString","minMatch","match","hourMatch","totalMinutes","numMatch","floor","parseDuration","processedQuestions","_test$createdAt","_test$createdAt$toDat","_test$createdAt$toDat2","toggleTestStatus","newQuestion","existingQuestions","HeadResults","resultsRef","resultsSnap","resultsData","possibleNames","username","HeadSubmissionDetailView","_submissions$","_result$submittedAt","_result$submittedAt$t","_result$submittedAt$t2","_result$evaluatedAt","_result$evaluatedAt$t","_result$evaluatedAt$t2","newScore","handleMarkSubmission","CandidateTests","showBlockedCard","setShowBlockedCard","blockMessage","setBlockMessage","checkingSubmissions","setCheckingSubmissions","snap","_test$endDate","_test$endDate2","isActive","hasValidEndDate","endDate","testMap","Map","existingTest","get","_existingTest$endDate","_existingTest$endDate2","_existingTest$endDate3","_test$endDate3","_test$endDate3$toDate","_test$endDate4","existingEndDate","currentEndDate","set","_existingTest$created","_existingTest$created2","_existingTest$created3","existingTime","uniqueTests","_t$title","_t$branch","_t$description","BlockedSubmissionCard","onClose","existingSubmissionsQuery","allowMultiple","shouldBlock","attemptNumber","checkSubmissionsAndStart","location","reload","CandidateResults","results","setResults","filteredResults","setFilteredResults","searchTerm","setSearchTerm","searchLower","resultsWithTestData","resultData","timeA","uniqueResults","seenTestIds","has","add","loadResults","showProfileMenu","setShowProfileMenu","v","minWidth","boxShadow","zIndex","textAlign","useLocation","params","URLSearchParams","search","history","replaceState","pathname","Blocked","AdminDashboard","HeadDashboard","UserDashboard","xmlns","justifyContent","marginBottom","lineHeight","flexWrap"],"sourceRoot":""}
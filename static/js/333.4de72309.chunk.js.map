{"version":3,"file":"static/js/333.4de72309.chunk.js","mappings":"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","sources":["components/Register/Register.js","utils/notifications.js"],"sourcesContent":["import { createUserWithEmailAndPassword, sendEmailVerification, updateProfile } from 'firebase/auth';\nimport { doc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\n\nimport { auth, db } from '../../firebase';\nimport Logger from '../../utils/logger';\nimport { showError, showSuccess } from '../../utils/notifications';\nimport '../../components/Loading/Loading.css';\nimport './Register.css';\n\nfunction Register() {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  // Check for email verification redirect\n  const location = useLocation();\n  const [, setVerificationEmailSent] = useState(false);\n  const [showConfirmationCard, setShowConfirmationCard] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n\n  useEffect(() => {\n    // Check if we're returning from email verification\n    const params = new URLSearchParams(location.search);\n    if (params.get('mode') === 'verifyEmail') {\n      showSuccess('Email verified successfully! Please sign in.');\n      // Clean up the URL\n      window.history.replaceState({}, document.title, location.pathname);\n    }\n  }, [location]);\n\n  const sendVerificationEmail = async (user) => {\n    try {\n      // Firebase email template might be restricted, but we can still send verification\n      // Action URL will be configured in Firebase Console as: \n      // https://testify.kuldeep.space/__/auth/action\n      const actionCodeSettings = {\n        url: `https://testify.kuldeep.space/?verified=true`,\n        handleCodeInApp: false\n      };\n      \n      await sendEmailVerification(user, actionCodeSettings);\n      setVerificationEmailSent(true);\n      showSuccess(`Verification email sent to ${user.email}. Please check your inbox and spam folder.`);\n      \n      Logger.info('Verification email sent successfully', {\n        email: user.email,\n        uid: user.uid,\n        actionUrl: actionCodeSettings.url\n      });\n    } catch (error) {\n      Logger.error('Error sending verification email', {\n        errorCode: error.code,\n        errorMessage: error.message,\n        email: user.email\n      });\n      showError('Failed to send verification email. Please try again later.');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n    \n    // Validate passwords match\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      const normalizedEmail = email.trim();\n      const cred = await createUserWithEmailAndPassword(auth, normalizedEmail, password);\n      const user = cred.user;\n      \n      // Update user's display name\n      await updateProfile(user, { displayName: name });\n      \n      // Create user document in Firestore\n      try {\n        await setDoc(doc(db, 'user', user.uid), {\n          userId: user.uid,\n          name,\n          email: normalizedEmail,\n          role: 'candidate', // Always set new registrations as candidate\n          blocked: false,\n          domain: 'Full Stack',\n          emailVerified: false,\n          createdAt: serverTimestamp(),\n          lastLogin: serverTimestamp(),\n        }, { merge: true });\n      } catch (writeErr) {\n        Logger.warn('Profile creation failed during registration', {\n          errorCode: writeErr.code,\n          errorMessage: writeErr.message\n        });\n      }\n      \n      // Send verification email\n      await sendVerificationEmail(user);\n      \n      // Sign out the user until they verify their email\n      await auth.signOut();\n      \n      // Show confirmation card instead of navigating immediately\n      setUserEmail(normalizedEmail);\n      setShowConfirmationCard(true);\n    } catch (err) {\n      Logger.error('Registration failed', {\n        errorCode: err.code,\n        errorMessage: err.message\n      }, err);\n      const byCode = {\n        'auth/email-already-in-use': 'This email is already registered. Sign in instead.',\n        'auth/invalid-email': 'Please enter a valid email address.',\n        'auth/weak-password': 'Password should be at least 6 characters.',\n      };\n      setError(byCode[err.code] || err.message || 'Failed to create account');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // If confirmation card should be shown\n  if (showConfirmationCard) {\n    return (\n      <div className=\"register-container\" role=\"main\">\n        {/* Background Illustrations */}\n        <div className=\"register-background\" />\n        <div className=\"register-background\" />\n        <div className=\"register-background\" />\n        <div className=\"register-background\" />\n\n        {/* Confirmation Card */}\n        <div className=\"register-main\">\n          <div className=\"confirmation-card\">\n            <div className=\"confirmation-icon\">\n              <svg className=\"confirmation-check\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            \n            <h2 className=\"confirmation-title\">Registration Successful!</h2>\n            <p className=\"confirmation-message\">\n              A confirmation email has been sent to <strong>{userEmail}</strong>\n            </p>\n            \n            <div className=\"confirmation-steps\">\n              <h3>Next Steps:</h3>\n              <ol>\n                <li>Check your email inbox (and spam folder)</li>\n                <li>Click the verification link in the email</li>\n                <li>You'll be redirected to your dashboard</li>\n              </ol>\n            </div>\n            \n            <div className=\"confirmation-actions\">\n              <button\n                className=\"btn btn-primary\"\n                onClick={() => navigate('/login')}\n              >\n                Go to Login\n              </button>\n              <button\n                className=\"btn btn-secondary\"\n                onClick={() => {\n                  setShowConfirmationCard(false);\n                  setEmail('');\n                  setPassword('');\n                  setConfirmPassword('');\n                  setName('');\n                }}\n              >\n                Register Another Account\n              </button>\n            </div>\n            \n            <div className=\"confirmation-help\">\n              <p>Didn't receive the email? Check your spam folder or contact support.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"register-container\" role=\"main\">\n      {/* Background Illustrations */}\n      <div className=\"register-background\" />\n      <div className=\"register-background\" />\n      <div className=\"register-background\" />\n      <div className=\"register-background\" />\n\n      {/* Main Registration Container */}\n      <div className=\"register-main\">\n        <div className=\"register-header\">\n          <h1 className=\"register-title\">Create Account</h1>\n        </div>\n\n        <div className=\"register-card\">\n            {error && (\n              <div className=\"register-error\" role=\"alert\" aria-live=\"assertive\">\n                <span className=\"register-error-text\">{error}</span>\n              </div>\n            )}\n            {success && (\n              <div className=\"register-success\" role=\"status\" aria-live=\"polite\">\n                <span className=\"register-success-text\">{success}</span>\n              </div>\n            )}\n\n            <form className=\"register-form\" onSubmit={handleSubmit} aria-describedby=\"form-help\">\n              <div className=\"register-form-fields\">\n                <div className=\"register-field\">\n                  <label className=\"register-label\" htmlFor=\"name\">\n                    Full Name\n                  </label>\n                  <input\n                    id=\"name\"\n                    type=\"text\"\n                    className=\"register-input\"\n                    placeholder=\"Full name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div className=\"register-field\">\n                  <label className=\"register-label\" htmlFor=\"email\">\n                    Email\n                  </label>\n                  <input\n                    id=\"email\"\n                    type=\"email\"\n                    className=\"register-input\"\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div className=\"register-field\">\n                  <label className=\"register-label\" htmlFor=\"password\">\n                    Password\n                  </label>\n                  <div className=\"register-password-container\">\n                    <input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      className=\"register-input\"\n                      placeholder=\"Password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      required\n                    />\n                    <button\n                      type=\"button\"\n                      className=\"register-password-toggle\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n                    >\n                      {showPassword ? (\n                        <svg className=\"register-password-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                        </svg>\n                      ) : (\n                        <svg className=\"register-password-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                        </svg>\n                      )}\n                    </button>\n                  </div>\n\n                </div>\n\n                <div className=\"register-field\">\n                  <label className=\"register-label\" htmlFor=\"confirmPassword\">\n                    Confirm Password\n                  </label>\n                  <div className=\"register-password-container\">\n                    <input\n                      id=\"confirmPassword\"\n                      type={showConfirmPassword ? \"text\" : \"password\"}\n                      className=\"register-input\"\n                      placeholder=\"Confirm Password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      required\n                    />\n                    <button\n                      type=\"button\"\n                      className=\"register-password-toggle\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      aria-label={showConfirmPassword ? \"Hide confirm password\" : \"Show confirm password\"}\n                    >\n                      {showConfirmPassword ? (\n                        <svg className=\"register-password-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                        </svg>\n                      ) : (\n                        <svg className=\"register-password-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                        </svg>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <button \n                className={`btn btn-primary ${loading ? 'btn-loading' : ''}`}\n                type=\"submit\"\n                disabled={loading}\n              >\n                {loading ? 'Creating Account...' : 'Create Account'}\n              </button>\n\n              <div className=\"register-link-container\">\n                <span className=\"register-link-text\">Already have an account? </span>\n                <Link\n                  to=\"/\"\n                  className=\"register-link\"\n                  aria-label=\"Sign In\"\n                >\n                  Sign In\n                </Link>\n              </div>\n\n              \n            </form>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Register;\n","/**\n * Notification utility to replace alert() calls\n * Provides better UX with toast notifications or proper error handling\n */\n\n/**\n * Show success notification\n * @param {string} message - Success message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showSuccess = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical success messages that require user acknowledgment\n  if (message.includes('exported') || message.includes('submitted') || message.includes('updated')) {\n    alert(message);\n  }\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show error notification\n * @param {string} message - Error message to display\n * @param {Error} error - Optional error object for logging\n * @param {Function} callback - Optional callback after notification\n */\nexport const showError = (message, error = null, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical errors that require immediate user attention\n  alert(message);\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show warning notification\n * @param {string} message - Warning message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showWarning = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show info notification\n * @param {string} message - Info message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showInfo = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Confirm action with user\n * @param {string} message - Confirmation message\n * @param {Function} onConfirm - Callback if user confirms\n * @param {Function} onCancel - Callback if user cancels\n */\nexport const confirmAction = (message, onConfirm = null, onCancel = null) => {\n  const result = window.confirm(message);\n  \n  if (result && onConfirm) {\n    onConfirm();\n  } else if (!result && onCancel) {\n    onCancel();\n  }\n  \n  return result;\n};\n"],"names":["navigate","useNavigate","email","setEmail","useState","password","setPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","loading","setLoading","name","setName","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","location","useLocation","setVerificationEmailSent","showConfirmationCard","setShowConfirmationCard","userEmail","setUserEmail","useEffect","URLSearchParams","search","get","showSuccess","window","history","replaceState","document","title","pathname","_jsxs","className","role","children","_jsx","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","onClick","onSubmit","async","e","preventDefault","normalizedEmail","trim","user","createUserWithEmailAndPassword","auth","updateProfile","displayName","setDoc","doc","db","uid","userId","blocked","domain","emailVerified","createdAt","serverTimestamp","lastLogin","merge","writeErr","Logger","warn","errorCode","code","errorMessage","message","actionCodeSettings","url","handleCodeInApp","sendEmailVerification","concat","info","actionUrl","showError","sendVerificationEmail","signOut","err","htmlFor","id","type","placeholder","value","onChange","target","required","disabled","Link","to","callback","arguments","length","undefined","includes","alert","setTimeout","showInfo","confirmAction","onConfirm","onCancel","result","confirm"],"sourceRoot":""}
{"version":3,"file":"static/js/902.20bc5554.chunk.js","mappings":"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","sources":["components/Login/Login.js","utils/notifications.js"],"sourcesContent":["import { sendPasswordResetEmail, signInWithEmailAndPassword } from 'firebase/auth';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\n\nimport { auth } from '../../firebase';\nimport Logger from '../../utils/logger';\nimport { showError, showSuccess } from '../../utils/notifications';\nimport './Login.css';\n\nfunction Login() {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [validation, setValidation] = useState({ email: '', password: '' });\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [resetEmail, setResetEmail] = useState('');\n  const location = useLocation();\n\n  // Check for registration success and verification success messages\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    if (params.get('registered') === 'true') {\n      showSuccess('Registration successful! Please check your email to verify your account before signing in.');\n      window.history.replaceState({}, document.title, location.pathname);\n    } else if (params.get('verified') === 'true') {\n      showSuccess('ðŸŽ‰ Email verified successfully! You can now sign in to access your account.');\n      window.history.replaceState({}, document.title, location.pathname);\n    }\n  }, [location]);\n\n  const handleForgotPassword = async () => {\n    if (!resetEmail.trim()) {\n      showError('Please enter your email address first.');\n      return;\n    }\n\n    try {\n      await sendPasswordResetEmail(auth, resetEmail.trim());\n      showSuccess('Password reset email sent! Please check your inbox.');\n      setShowForgotPassword(false);\n      setResetEmail('');\n    } catch (error) {\n      Logger.error('Error sending password reset email', {\n        errorCode: error.code,\n        errorMessage: error.message\n      });\n\n      const errorMessages = {\n        'auth/user-not-found': 'No account found with this email address.',\n        'auth/invalid-email': 'Please enter a valid email address.',\n        'auth/too-many-requests': 'Too many requests. Please wait a moment and try again.'\n      };\n\n      showError(errorMessages[error.code] || 'Failed to send password reset email. Please try again.');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n\n    const newValidation = { email: '', password: '' };\n    if (!email.trim()) {newValidation.email = 'Email is required';}\n    if (password.length < 6) {newValidation.password = 'Password must be at least 6 characters';}\n    setValidation(newValidation);\n    if (newValidation.email || newValidation.password) {return;}\n\n    setLoading(true);\n    try {\n      const normalizedEmail = email.trim();\n      await signInWithEmailAndPassword(auth, normalizedEmail, password);\n      setSuccess('Login successful! Redirecting...');\n      setTimeout(() => navigate('/dashboard'), 800);\n    } catch (err) {\n      Logger.error('Login failed', { errorCode: err.code, errorMessage: err.message }, err);\n      const byCode = {\n        'auth/invalid-credential': 'Invalid email or password. Please try again.',\n        'auth/wrong-password': 'Incorrect password. Try again or reset it.',\n        'auth/user-not-found': 'No account found for this email. Please create one.',\n        'auth/too-many-requests': 'Too many attempts. Please wait a bit and try again.'\n      };\n      setError(byCode[err.code] || 'Failed to sign in. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  return (\n    <div className=\"login-container\" role=\"main\">\n      {/* Background Illustrations */}\n      <div className=\"login-background login-bg-1\" />\n      <div className=\"login-background login-bg-2\" />\n      <div className=\"login-background login-bg-3\" />\n      <div className=\"login-background login-bg-4\" />\n\n      {/* Main Login Container */}\n      <div className=\"login-main\">\n        {/* Brand Header */}\n        <div className=\"login-header\">\n          <h1 className=\"login-title\">Welcome Back</h1>\n          <p className=\"login-subtitle\">Sign in to continue</p>\n        </div>\n\n        {/* Login Form Card */}\n        <div className=\"login-card\">\n            {error && (\n              <div className=\"login-error\" role=\"alert\" aria-live=\"assertive\">\n                <span>{error}</span>\n              </div>\n            )}\n            {success && (\n              <div className=\"login-success\" role=\"status\" aria-live=\"polite\">\n                <span>{success}</span>\n              </div>\n            )}\n\n            <form className=\"login-form\" onSubmit={handleSubmit} aria-describedby=\"form-help\">\n              <div className=\"login-form-fields\">\n                {/* Email Field */}\n                <div className=\"login-field\">\n                  <label className=\"login-label\" htmlFor=\"email\">\n                    Email\n                  </label>\n                  <input\n                    id=\"email\"\n                    type=\"email\"\n                    className=\"login-input\"\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                    aria-invalid={!!validation.email}\n                    aria-describedby={validation.email ? 'email-error' : undefined}\n                  />\n                  {validation.email && (\n                    <div id=\"email-error\" className=\"login-error-message\" role=\"alert\">\n                      {validation.email}\n                    </div>\n                  )}\n                </div>\n\n                {/* Password Field */}\n                <div className=\"login-field\">\n                  <label className=\"login-label\" htmlFor=\"password\">\n                    Password\n                  </label>\n                  <input\n                    id=\"password\"\n                    type=\"password\"\n                    className=\"login-input\"\n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                    aria-invalid={!!validation.password}\n                    aria-describedby={validation.password ? 'password-error' : undefined}\n                  />\n                  {validation.password && (\n                    <div id=\"password-error\" className=\"login-error-message\" role=\"alert\">\n                      {validation.password}\n                    </div>\n                  )}\n                </div>\n\n                {/* Forgot Password Section */}\n                <div className=\"login-forgot-password\">\n                  {!showForgotPassword ? (\n                    <button\n                      type=\"button\"\n                      className=\"forgot-password-link\"\n                      onClick={() => setShowForgotPassword(true)}\n                    >\n                      Forgot Password?\n                    </button>\n                  ) : (\n                    <div className=\"forgot-password-form\">\n                      <label className=\"login-label\" htmlFor=\"resetEmail\">\n                        Enter your email to reset password:\n                      </label>\n                      <div className=\"forgot-password-input-group\">\n                        <input\n                          id=\"resetEmail\"\n                          type=\"email\"\n                          className=\"login-input\"\n                          placeholder=\"Enter your email\"\n                          value={resetEmail}\n                          onChange={(e) => setResetEmail(e.target.value)}\n                        />\n                        <div className=\"forgot-password-buttons\">\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-secondary btn-small\"\n                            onClick={() => {\n                              setShowForgotPassword(false);\n                              setResetEmail('');\n                            }}\n                          >\n                            Cancel\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-primary btn-small\"\n                            onClick={handleForgotPassword}\n                          >\n                            Send Reset Email\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Login Button */}\n                <button\n                  className={`btn btn-primary ${loading ? 'btn-loading' : ''}`}\n                  type=\"submit\"\n                  disabled={loading}\n                >\n                  {loading ? 'Signing in...' : 'Sign In'}\n                </button>\n              </div>\n\n              {/* Sign Up Link */}\n              <div className=\"login-link-container\">\n                <span className=\"login-link-text\">Don't have an account? </span>\n                <Link\n                  to=\"/register\"\n                  className=\"login-link\"\n                  aria-label=\"Create New Account\"\n                >\n                  Sign Up\n                </Link>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Login;\n","/**\n * Notification utility to replace alert() calls\n * Provides better UX with toast notifications or proper error handling\n */\n\n/**\n * Show success notification\n * @param {string} message - Success message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showSuccess = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical success messages that require user acknowledgment\n  if (message.includes('exported') || message.includes('submitted') || message.includes('updated')) {\n    alert(message);\n  }\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show error notification\n * @param {string} message - Error message to display\n * @param {Error} error - Optional error object for logging\n * @param {Function} callback - Optional callback after notification\n */\nexport const showError = (message, error = null, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical errors that require immediate user attention\n  alert(message);\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show warning notification\n * @param {string} message - Warning message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showWarning = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show info notification\n * @param {string} message - Info message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showInfo = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Confirm action with user\n * @param {string} message - Confirmation message\n * @param {Function} onConfirm - Callback if user confirms\n * @param {Function} onCancel - Callback if user cancels\n */\nexport const confirmAction = (message, onConfirm = null, onCancel = null) => {\n  const result = window.confirm(message);\n  \n  if (result && onConfirm) {\n    onConfirm();\n  } else if (!result && onCancel) {\n    onCancel();\n  }\n  \n  return result;\n};\n"],"names":["navigate","useNavigate","email","setEmail","useState","password","setPassword","error","setError","success","setSuccess","loading","setLoading","validation","setValidation","showForgotPassword","setShowForgotPassword","resetEmail","setResetEmail","location","useLocation","useEffect","params","URLSearchParams","search","get","showSuccess","window","history","replaceState","document","title","pathname","_jsxs","className","role","children","_jsx","onSubmit","async","e","preventDefault","newValidation","trim","length","normalizedEmail","signInWithEmailAndPassword","auth","setTimeout","err","Logger","errorCode","code","errorMessage","message","htmlFor","id","type","placeholder","value","onChange","target","required","undefined","onClick","sendPasswordResetEmail","errorMessages","showError","concat","disabled","Link","to","callback","arguments","includes","alert","showInfo","confirmAction","onConfirm","onCancel","result","confirm"],"sourceRoot":""}
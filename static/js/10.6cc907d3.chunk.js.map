{"version":3,"file":"static/js/10.6cc907d3.chunk.js","mappings":"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","sources":["services/firestore.js","utils/notifications.js","components/TestRunner/TestRunner.js","components/BlockedSubmissionCard/BlockedSubmissionCard.js","components/Loading/Loading.js"],"sourcesContent":["import { addDoc, arrayUnion, collection, doc, getDoc, getDocs, increment, serverTimestamp, setDoc, updateDoc } from 'firebase/firestore';\n\nimport { db } from '../firebase';\n\n// Tests\nexport async function fetchTestWithQuestions(testId) {\n  const testRef = doc(db, 'tests', testId);\n  const testSnap = await getDoc(testRef);\n  if (!testSnap.exists()) {return null;}\n  const qSnap = await getDocs(collection(testRef, 'questions'));\n  const questions = qSnap.docs.map(d => {\n    const questionData = d.data();\n    return { \n      id: questionData.questionId || d.id, // Use questionId from data, fallback to doc id\n      ...questionData \n    };\n  });\n  return { id: testSnap.id, ...testSnap.data(), questions };\n}\n\n// Paste logs\nexport async function logPaste({ candidateId, testId, questionId, pastedText }) {\n  await addDoc(collection(db, 'pasteLogs'), {\n    candidateId,\n    testId,\n    questionId,\n    pastedText,\n    timestamp: serverTimestamp(),\n  });\n}\n\n// Tab switch logs: keep a doc per candidate+test and update counts\nexport async function logTabSwitch({ candidateId, testId, status }) {\n  const key = `${candidateId}_${testId}`;\n  const ref = doc(db, 'tabSwitchLogs', key);\n  const snap = await getDoc(ref);\n  const currentTime = new Date().toISOString(); // Use regular timestamp instead of serverTimestamp()\n  \n  if (!snap.exists()) {\n    await setDoc(ref, {\n      candidateId,\n      testId,\n      status,\n      switchCount: 1,\n      timestamps: [currentTime],\n      lastUpdated: serverTimestamp(),\n    });\n  } else {\n    await updateDoc(ref, {\n      status,\n      switchCount: increment(1),\n      timestamps: arrayUnion(currentTime),\n      lastUpdated: serverTimestamp(),\n    });\n  }\n}\n\n// User profile helpers\nexport async function getUserProfile(uid) {\n  const ref = doc(db, 'users', uid);\n  const snap = await getDoc(ref);\n  return snap.exists() ? { id: snap.id, ...snap.data() } : null;\n}\n","/**\n * Notification utility to replace alert() calls\n * Provides better UX with toast notifications or proper error handling\n */\n\n/**\n * Show success notification\n * @param {string} message - Success message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showSuccess = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical success messages that require user acknowledgment\n  if (message.includes('exported') || message.includes('submitted') || message.includes('updated')) {\n    alert(message);\n  }\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show error notification\n * @param {string} message - Error message to display\n * @param {Error} error - Optional error object for logging\n * @param {Function} callback - Optional callback after notification\n */\nexport const showError = (message, error = null, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical errors that require immediate user attention\n  alert(message);\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show warning notification\n * @param {string} message - Warning message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showWarning = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show info notification\n * @param {string} message - Info message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showInfo = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Confirm action with user\n * @param {string} message - Confirmation message\n * @param {Function} onConfirm - Callback if user confirms\n * @param {Function} onCancel - Callback if user cancels\n */\nexport const confirmAction = (message, onConfirm = null, onCancel = null) => {\n  const result = window.confirm(message);\n  \n  if (result && onConfirm) {\n    onConfirm();\n  } else if (!result && onCancel) {\n    onCancel();\n  }\n  \n  return result;\n};\n","import { addDoc, collection, serverTimestamp, doc, getDoc, query, where, getDocs, updateDoc } from 'firebase/firestore';\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nimport { useFirebase } from '../../context/FirebaseContext';\nimport { db } from '../../firebase';\nimport { fetchTestWithQuestions } from '../../services/firestore';\nimport Logger from '../../utils/logger';\nimport { showSuccess, showError, showInfo, confirmAction } from '../../utils/notifications';\nimport BlockedSubmissionCard from '../BlockedSubmissionCard/BlockedSubmissionCard';\nimport Loading from '../Loading/Loading';\nimport './TestRunner.css';\n\n// Network monitoring function\nconst monitorConnection = async () => {\n  try {\n    const response = await fetch('/favicon.ico', { \n      method: 'HEAD',\n      cache: 'no-cache'\n    });\n    return response.ok;\n  } catch {\n    return navigator.onLine;\n  }\n};\n\n// Helper function to parse duration string into total minutes\nconst parseDurationToMinutes = (durationString) => {\n  if (!durationString) {return 30;}\n  \n  // Handle formats like \"30 min\", \"1h\", \"1h 30min\", \"90 min\"\n  const minMatch = durationString.match(/(\\d+)\\s*min/);\n  const hourMatch = durationString.match(/(\\d+)h/);\n  \n  let totalMinutes = 0;\n  \n  if (hourMatch) {\n    totalMinutes += parseInt(hourMatch[1]) * 60;\n  }\n  \n  if (minMatch) {\n    totalMinutes += parseInt(minMatch[1]);\n  }\n  \n  // If no matches, try to parse as just minutes\n  if (!hourMatch && !minMatch) {\n    const numMatch = durationString.match(/(\\d+)/);\n    if (numMatch) {\n      totalMinutes = parseInt(numMatch[1]);\n    }\n  }\n  \n  return totalMinutes || 30; // Default to 30 minutes if parsing fails\n};\n\n// Helper function to get file extension based on language\nconst getFileExtension = (language) => {\n  const extensions = {\n    'javascript': 'js',\n    'python': 'py',\n    'java': 'java',\n    'cpp': 'cpp',\n    'c': 'c',\n    'csharp': 'cs',\n    'php': 'php',\n    'ruby': 'rb',\n    'go': 'go',\n    'rust': 'rs',\n    'typescript': 'ts',\n    'html': 'html',\n    'css': 'css',\n    'sql': 'sql',\n    'bash': 'sh',\n    'powershell': 'ps1'\n  };\n  return extensions[language.toLowerCase()] || 'txt';\n};\n\n// Helper function to get code placeholder based on language\nconst getCodePlaceholder = (language) => {\n  const placeholders = {\n    'javascript': '// Write your JavaScript code here\\nfunction solution() {\\n    // Your code here\\n    return result;\\n}',\n    'python': '# Write your Python code here\\ndef solution():\\n    # Your code here\\n    return result',\n    'java': '// Write your Java code here\\npublic class Solution {\\n    public static void main(String[] args) {\\n        // Your code here\\n    }\\n}',\n    'cpp': '// Write your C++ code here\\n#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    // Your code here\\n    return 0;\\n}',\n    'c': '// Write your C code here\\n#include <stdio.h>\\n\\nint main() {\\n    // Your code here\\n    return 0;\\n}',\n    'csharp': '// Write your C# code here\\nusing System;\\n\\nclass Program {\\n    static void Main() {\\n        // Your code here\\n    }\\n}',\n    'php': '<?php\\n// Write your PHP code here\\nfunction solution() {\\n    // Your code here\\n    return $result;\\n}\\n?>',\n    'ruby': '# Write your Ruby code here\\ndef solution\\n    # Your code here\\n    return result\\nend',\n    'go': '// Write your Go code here\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc main() {\\n    // Your code here\\n}',\n    'html': '<!-- Write your HTML code here -->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Solution</title>\\n</head>\\n<body>\\n    <!-- Your code here -->\\n</body>\\n</html>',\n    'css': '/* Write your CSS code here */\\n.container {\\n    /* Your styles here */\\n}',\n    'sql': '-- Write your SQL code here\\nSELECT * FROM table_name\\nWHERE condition;'\n  };\n  return placeholders[language.toLowerCase()] || '// Write your code here\\n';\n};\n\n// Helper function to get language display info\nconst getLanguageInfo = (language) => {\n  const languages = {\n    'javascript': { name: 'JavaScript', color: '#f7df1e', icon: '🟨' },\n    'python': { name: 'Python', color: '#3776ab', icon: '🐍' },\n    'java': { name: 'Java', color: '#ed8b00', icon: '☕' },\n    'cpp': { name: 'C++', color: '#00599c', icon: '⚡' },\n    'c': { name: 'C', color: '#a8b9cc', icon: '🔧' },\n    'csharp': { name: 'C#', color: '#239120', icon: '🔷' },\n    'php': { name: 'PHP', color: '#777bb4', icon: '🐘' },\n    'ruby': { name: 'Ruby', color: '#cc342d', icon: '💎' },\n    'go': { name: 'Go', color: '#00add8', icon: '🐹' },\n    'html': { name: 'HTML', color: '#e34f26', icon: '🌐' },\n    'css': { name: 'CSS', color: '#1572b6', icon: '🎨' },\n    'sql': { name: 'SQL', color: '#336791', icon: '🗃️' }\n  };\n  return languages[language.toLowerCase()] || { name: language.toUpperCase(), color: '#6b7280', icon: '📄' };\n};\n\n// Available languages for selector\nconst availableLanguages = [\n  'javascript',\n  'python', \n  'java',\n  'cpp',\n  'c',\n  'csharp',\n  'php',\n  'ruby',\n  'go',\n  'html',\n  'css',\n  'sql'\n];\n\nfunction TestRunner() {\n  const { testId } = useParams();\n  const navigate = useNavigate();\n  const { user, userDoc } = useFirebase();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [errMsg, setErrMsg] = useState('');\n  const [testData, setTestData] = useState(null);\n  const [current, setCurrent] = useState(0);\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [tabSwitches, setTabSwitches] = useState(0);\n  const [alerts, setAlerts] = useState([]);\n  const [showAlert, setShowAlert] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [password, setPassword] = useState('');\n  const [showPasswordPrompt, setShowPasswordPrompt] = useState(false);\n  const [passwordError, setPasswordError] = useState('');\n  const [showInstructions, setShowInstructions] = useState(false);\n  const [netStatus, setNetStatus] = useState('checking');\n  const [showBlockedCard, setShowBlockedCard] = useState(false);\n  const [blockMessage, setBlockMessage] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('javascript');\n  \n  // Ref to track if auto-submit has been triggered to prevent multiple submissions\n  const autoSubmitTriggered = useRef(false);\n\n  // Sort questions by marks in ascending order (lowest marks first)\n  const sortedQuestions = useMemo(() => {\n    if (!testData?.questions) {return [];}\n    return [...testData.questions].sort((a, b) => {\n      const marksA = a.marks || a.marksPerQuestion || 1;\n      const marksB = b.marks || b.marksPerQuestion || 1;\n      return marksA - marksB;\n    });\n  }, [testData?.questions]);\n\n  const currentQuestion = useMemo(() => sortedQuestions?.[current] || null, [sortedQuestions, current]);\n\n  // Function to get candidate name from database\n  const getCandidateName = useCallback(async () => {\n    try {\n      Logger.debug('Fetching candidate name', { userId: user?.uid });\n      \n      // First, try to get from userDoc (FirebaseContext)\n      if (userDoc?.name && userDoc.name.trim()) {\n        Logger.debug('Using name from userDoc');\n        return userDoc.name.trim();\n      }\n      \n      // If not available in userDoc, fetch directly from database\n      if (user?.uid) {\n        const userDocRef = doc(db, 'user', user.uid);\n        const userSnapshot = await getDoc(userDocRef);\n        \n        if (userSnapshot.exists()) {\n          const userData = userSnapshot.data();\n          Logger.debug('Fetched user data from database');\n          \n          if (userData.name && userData.name.trim()) {\n            Logger.debug('Using name from database');\n            return userData.name.trim();\n          }\n        }\n      }\n      \n      // Fallback: extract from email if no name found\n      const email = userDoc?.email || user?.email;\n      if (email && email.includes('@')) {\n        const extractedName = email.split('@')[0];\n        Logger.debug('Using extracted name from email');\n        return extractedName;\n      }\n      \n      Logger.warn('No name found, using Unknown');\n      return 'Unknown';\n    } catch (error) {\n      Logger.error('Error fetching candidate name', null, error);\n      // Fallback: extract from email\n      const email = userDoc?.email || user?.email;\n      if (email && email.includes('@')) {\n        return email.split('@')[0];\n      }\n      return 'Unknown';\n    }\n  }, [user, userDoc]);\n\n  // Submission logic\n  const handleSubmit = useCallback(async (isAutoSubmit = false) => {\n    Logger.info('Starting test submission', { isAutoSubmit, userId: user?.uid, testId });\n    \n    if (isSubmitting) {\n      Logger.warn('Submission already in progress');\n      return;\n    }\n\n    // Check if multiple submissions are allowed\n    const allowMultiple = testData?.allowMultipleSubmissions || false;\n    \n    if (!isAutoSubmit) {\n      let confirmMessage = 'Submit your test?';\n      if (allowMultiple) {\n        confirmMessage = 'Submit your test? You can submit again later if multiple submissions are enabled.';\n      } else {\n        confirmMessage = 'Submit your test? This cannot be undone.';\n      }\n      \n      const confirmed = confirmAction(confirmMessage);\n      if (!confirmed) {\n        Logger.info('User cancelled submission');\n        return;\n      }\n    }\n    setIsSubmitting(true);\n    Logger.info('Starting submission process');\n\n    try {\n      if (!user?.uid) {\n        Logger.error('No user UID available');\n        throw new Error('User not authenticated');\n      }\n      if (!testId) {\n        Logger.error('No test ID available');\n        throw new Error('Missing test ID');\n      }\n\n      // Check if multiple submissions are allowed\n      const allowMultiple = testData?.allowMultipleSubmissions || false;\n      \n      // Check for existing submissions\n      const existingSubmissionsQuery = query(\n        collection(db, 'results'),\n        where('candidateId', '==', user.uid),\n        where('testId', '==', testId)\n      );\n      const existingSubmissions = await getDocs(existingSubmissionsQuery);\n      \n      Logger.debug('Checking existing submissions', {\n        existingCount: existingSubmissions.size,\n        allowMultiple\n      });\n      \n      Logger.debug('Calculating total marks from test data');\n      \n      // Calculate total marks, ensuring we're looking at the correct property\n      const questions = sortedQuestions || [];\n      const totalMarks = questions.reduce((sum, q) => {\n        const marks = q.marks || q.marksPerQuestion || 1; // Try different possible properties\n        Logger.debug(`Question ${q.id} marks: ${marks}`);\n        return sum + Number(marks);\n      }, 0);\n      \n      Logger.debug('Calculated total marks', { totalMarks });\n      \n      // Get the candidate's registered name from database\n      const candidateName = await getCandidateName();\n      Logger.debug('Using candidate name for submission', { candidateName });\n\n      const payload = {\n        candidateId: user.uid,\n        candidateName: candidateName,\n        testId,\n        testTitle: testData?.title || 'Test',\n        title: testData?.title || 'Test', // Include both testTitle and title for backward compatibility\n        answers: userAnswers,\n        score: 0,\n        status: isAutoSubmit ? 'auto-submitted' : 'submitted',\n        submittedAt: new Date(),\n        startedAt: startTime || new Date(),\n        totalQuestions: sortedQuestions?.length || 0,\n        answeredQuestions: Object.values(userAnswers).filter(a => a && String(a).trim() !== '').length,\n        totalMarks: totalMarks // Add total marks to the payload\n      };\n\n      Logger.debug('Submitting test', { hasAnswers: !!userAnswers, answerCount: Object.keys(userAnswers).length });\n\n      // Handle submission based on multiple submission setting\n      // Enforce max 3 attempts when multiple submissions are allowed\n      if (allowMultiple && existingSubmissions.size >= 3) {\n        throw new Error('Maximum attempts reached. You have already submitted this test 3 times.');\n      } else if (existingSubmissions.size > 0 && allowMultiple) {\n        // Update the latest existing submission\n        const latestSubmission = existingSubmissions.docs[existingSubmissions.docs.length - 1];\n        await updateDoc(latestSubmission.ref, {\n          ...payload,\n          submissionNumber: existingSubmissions.size + 1,\n          previousSubmissionId: latestSubmission.id,\n          updatedAt: new Date()\n        });\n        Logger.info('Updated existing submission', { submissionId: latestSubmission.id });\n        showSuccess(`Test re-submitted successfully! (Attempt #${existingSubmissions.size + 1})`);\n      } else if (existingSubmissions.size > 0 && !allowMultiple) {\n        // Multiple submissions not allowed, show error\n        throw new Error('You have already submitted this test. Multiple submissions are not allowed.');\n      } else {\n        // First submission\n        const docRef = await addDoc(collection(db, 'results'), {\n          ...payload,\n          submissionNumber: 1\n        });\n        Logger.info('Test submitted successfully', { submissionId: docRef.id });\n        showSuccess('Test submitted successfully!');\n      }\n      \n      navigate('/dashboard');\n      \n    } catch (err) {\n      Logger.error('Test submission failed', {\n        code: err.code,\n        message: err.message\n      }, err);\n      \n      let msg = 'Could not submit test. ';\n      if (err.code === 'unavailable') {msg += 'Check your internet connection.';}\n      else if (err.code === 'permission-denied') {msg += 'Permission denied. Check Firestore rules.';}\n      else if (err.code === 'unauthenticated') {msg += 'Please log in again.';}\n      else if (err.code === 'failed-precondition') {msg += 'Database configuration issue.';}\n      else if (err.message?.includes('fetch')) {msg += 'Network error. Check connection.';}\n      else {msg += `${err.message || 'Unknown error'}.`;}\n      \n      showError(msg, err);\n    } finally {\n      setIsSubmitting(false);\n      Logger.info('Submission process completed');\n    }\n  }, [isSubmitting, user, testId, userAnswers, testData, navigate, startTime, getCandidateName, sortedQuestions]);\n\n  // Auto-submit for violations\n  const autoSubmit = useCallback(async (reason) => {\n    if (isSubmitting || autoSubmitTriggered.current || !user?.uid || !testId) {\n      return;\n    }\n    \n    autoSubmitTriggered.current = true;\n    setIsSubmitting(true);\n    \n    try {\n      // Get the candidate's registered name from database\n      const candidateName = await getCandidateName();\n\n      // Calculate total marks\n      const questions = sortedQuestions || [];\n      const totalMarks = questions.reduce((sum, q) => {\n        const marks = q.marks || q.marksPerQuestion || 1;\n        return sum + Number(marks);\n      }, 0);\n\n      const payload = {\n        candidateId: user.uid,\n        candidateName: candidateName,\n        testId,\n        testTitle: testData?.title || 'Test',\n        title: testData?.title || 'Test',\n        answers: userAnswers,\n        score: 0,\n        status: 'auto-submitted',\n        submittedAt: new Date(),\n        startedAt: startTime || new Date(),\n        totalQuestions: sortedQuestions?.length || 0,\n        answeredQuestions: Object.values(userAnswers).filter(a => a && String(a).trim() !== '').length,\n        totalMarks: totalMarks,\n        violation: reason,\n        tabSwitches,\n        alertCount: alerts.length\n      };\n      \n      await addDoc(collection(db, 'results'), payload);\n      await addDoc(collection(db, 'adminLogs'), {\n        action: 'auto-submit',\n        candidateId: user.uid,\n        testId,\n        reason,\n        tabSwitches,\n        timestamp: new Date(),\n        evidence: {\n          alerts: alerts.length,\n          tabSwitches,\n          answers: Object.keys(userAnswers).length\n        }\n      });\n      \n      // Silently navigate back to dashboard after auto-submit\n      navigate('/dashboard');\n    } catch (error) {\n      Logger.error('Auto-submit error', null, error);\n      // Still navigate to dashboard even if logging fails\n      navigate('/dashboard');\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, user, testId, userAnswers, testData, tabSwitches, alerts, navigate, startTime, getCandidateName, sortedQuestions]);\n\n  // Handle password verification\n  const verifyPassword = async () => {\n    if (password === testData.password) {\n      setShowPasswordPrompt(false);\n      setPasswordError('');\n      // Show instructions page after successful password verification\n      setShowInstructions(true);\n      \n      // Log password verification\n      try {\n        await addDoc(collection(db, 'monitoring'), {\n          candidateId: user.uid,\n          testId,\n          type: 'password_verified',\n          timestamp: serverTimestamp(),\n          description: 'Password verified successfully',\n          severity: 'info',\n          metadata: {\n            testTitle: testData.title,\n            userAgent: navigator.userAgent,\n            passwordProtected: true\n          }\n        });\n      } catch (error) {\n        Logger.error('Error logging password verification', null, error);\n      }\n    } else {\n      setPasswordError('Incorrect password. Please try again.');\n      \n      // Log failed password attempt\n      try {\n        await addDoc(collection(db, 'monitoring'), {\n          candidateId: user.uid,\n          testId,\n          type: 'password_failed',\n          timestamp: serverTimestamp(),\n          description: 'Failed password attempt',\n          severity: 'medium',\n          metadata: {\n            attemptedPassword: password.slice(0, 3) + '***', // Log partial for security analysis\n            userAgent: navigator.userAgent\n          }\n        });\n      } catch (error) {\n        Logger.error('Error logging password failure', null, error);\n      }\n    }\n  };\n\n  // Start the actual test after instructions\n  const startTest = async () => {\n    try {     // Check submission count and multiple submission settings\n      const allowMultiple = testData.allowMultipleSubmissions || false;\n      const existingSubmissionsQuery = query(\n        collection(db, 'results'),\n        where('candidateId', '==', user.uid),\n        where('testId', '==', testId)\n      );\n      const existingSubmissions = await getDocs(existingSubmissionsQuery);\n      const submissionCount = existingSubmissions.size;\n      \n      Logger.debug('StartTest submission check', {\n        submissionCount,\n        allowMultiple,\n        testId,\n        shouldBlock: submissionCount >= 3 && allowMultiple,\n        attemptNumber: submissionCount + 1\n      });\n      \n      if (submissionCount > 0 && !allowMultiple) {\n        // Multiple submissions not allowed\n        setBlockMessage(`This test does not allow multiple submissions. You have already submitted this test ${submissionCount} time${submissionCount > 1 ? 's' : ''}. Please contact your branch head if you need to retake this test.`);\n        setShowBlockedCard(true);\n        setShowInstructions(false);\n        return;\n      } else if (submissionCount >= 3 && allowMultiple) {\n        // Multiple submissions allowed but limit reached\n        setBlockMessage(`You have reached the maximum number of attempts (3) for this test. You have already submitted this test ${submissionCount} times. Please contact your branch head if you need additional attempts.`);\n        setShowBlockedCard(true);\n        setShowInstructions(false);\n        return;\n      }\n      \n      // All checks passed, start the test\n      setShowInstructions(false);\n      \n      // Start the timer\n      const mins = parseDurationToMinutes(testData.duration);\n      setSecondsLeft(mins * 60);\n      setStartTime(new Date());\n      \n      // Log test session start\n      try {\n        await addDoc(collection(db, 'monitoring'), {\n          candidateId: user.uid,\n          testId,\n          type: 'session_start',\n          timestamp: serverTimestamp(),\n          description: 'Test session started',\n          severity: 'info',\n          metadata: {\n            testTitle: testData.title,\n            duration: testData.duration,\n            totalQuestions: sortedQuestions?.length || 0,\n            userAgent: navigator.userAgent,\n            startTime: new Date().toISOString(),\n            passwordProtected: !!testData.password,\n            attemptNumber: submissionCount + 1\n          }\n        });\n        Logger.info('Test session started successfully');\n      } catch (error) {\n        Logger.error('Error logging session start', null, error);\n      }\n    } catch (error) {\n      Logger.error('Error starting test', null, error);\n      setErrMsg('Error starting test. Please try again.');\n    }\n  };\n\n  // Fetch test data and show instructions\n  useEffect(() => {\n    async function fetchData() {\n      if (!user) {\n        navigate('/');\n        return;\n      }\n      try {\n        const test = await fetchTestWithQuestions(testId);\n        if (!test) {\n          setErrMsg('Test not found');\n          setIsLoading(false);\n          return;\n        }\n        \n        Logger.debug('Test data loaded', {\n          hasQuestions: !!test.questions,\n          questionCount: test.questions?.length || 0\n        });\n        \n        setTestData(test);\n        \n        // Check if password is required first\n        if (test.password && test.password.trim() !== '') {\n          setShowPasswordPrompt(true);\n        } else {\n          // No password required, show instructions directly\n          setShowInstructions(true);\n        }\n      } catch (error) {\n        Logger.error('Error fetching test data', null, error);\n        setErrMsg('Error loading test. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchData();\n  }, [testId, user, navigate]);\n\n  // Timer logic\n  useEffect(() => {\n    if (secondsLeft <= 0 || !testData) {return;}\n    \n    const interval = setInterval(() => {\n      setSecondsLeft(prev => {\n        if (prev <= 1) {\n          // Auto-submit when time runs out\n          if (!isSubmitting && !autoSubmitTriggered.current) {\n            Logger.info('Time up! Auto-submitting test');\n            autoSubmitTriggered.current = true;\n            // Use setTimeout to avoid state update during render\n            setTimeout(() => handleSubmit(true), 0);\n          }\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  }, [secondsLeft, testData, isSubmitting, handleSubmit]);\n\n  // Network status polling\n  useEffect(() => {\n    async function checkNet() {\n      try {\n        const online = await monitorConnection();\n        setNetStatus(online ? 'online' : 'offline');\n      } catch {\n        setNetStatus('offline');\n      }\n    }\n    checkNet();\n    const poll = setInterval(checkNet, 30000);\n    return () => clearInterval(poll);\n  }, []);\n\n\n  useEffect(() => {\n    if (!testData || isSubmitting) {return;}\n    \n    // Single handler for tab switching detection\n    const handleTabSwitchEvent = async (eventType) => {\n      Logger.debug('Tab switch event triggered', { eventType, userId: user?.uid, testId });\n      \n      if (!user || !testId) {\n        Logger.warn('Tab switch: Missing user or testId');\n        return;\n      }\n      \n      try {\n        // Log to monitoring collection\n        await addDoc(collection(db, 'monitoring'), {\n          candidateId: user.uid,\n          testId,\n          type: 'tab_switch',\n          timestamp: serverTimestamp(),\n          description: `User ${eventType === 'hidden' ? 'switched away from' : 'returned to'} test tab`,\n          severity: 'high',\n          metadata: {\n            eventType,\n            userAgent: navigator.userAgent,\n            currentQuestion: current + 1\n          }\n        });\n        \n        Logger.debug('Tab switch logged successfully');\n        \n        // Update state and show warning\n        setTabSwitches(prev => {\n          const newCount = prev + 1;\n          setAlerts(prevAlerts => [...prevAlerts, { \n            msg: `Tab switch detected (${newCount} times). Stay on test page!`, \n            time: new Date() \n          }]);\n          setShowAlert(true);\n          \n          // Auto-submit after 3 violations\n          if (newCount >= 3) {\n            Logger.warn('Auto-submitting due to tab switch violations');\n            setTimeout(() => autoSubmit('excessive-tab-switching'), 1000);\n          }\n          \n          return newCount;\n        });\n        \n      } catch (error) {\n        Logger.error('Error logging tab switch', null, error);\n      }\n    };\n    \n    // Visibility change handler (primary detection method)\n    const visibilityChangeHandler = () => {\n      if (document.hidden) {\n        handleTabSwitchEvent('hidden');\n      }\n    };\n    \n    // Beforeunload handler to prevent closing/refreshing\n    const beforeUnloadHandler = (e) => {\n      e.preventDefault();\n      e.returnValue = 'Are you sure you want to leave the test? Your progress may be lost.';\n      return 'Are you sure you want to leave the test? Your progress may be lost.';\n    };\n    \n    // Add event listeners\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n    window.addEventListener('beforeunload', beforeUnloadHandler);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', visibilityChangeHandler);\n      window.removeEventListener('beforeunload', beforeUnloadHandler);\n    };\n  }, [testData, isSubmitting, user, testId, current, autoSubmit]);\n\n  // Paste detection\n  const handlePaste = useCallback(async (qid, text) => {\n    if (!user || !testId || !qid) {return;}\n    try {\n      // Get the current question text for better monitoring display\n      const currentQuestion = sortedQuestions?.find(q => q.id === qid);\n      let questionText = 'Question text not available';\n      \n      if (currentQuestion) {\n        questionText = currentQuestion.questionText || currentQuestion.question || currentQuestion.text || 'Question text not available';\n        Logger.debug('Found question for paste event', { questionId: qid });\n      } else {\n        Logger.warn('Question not found for paste event', { questionId: qid, availableQuestions: sortedQuestions?.map(q => q.id) });\n        // Try to get question text from current question if qid doesn't match\n        const currentQ = sortedQuestions?.[current];\n        if (currentQ) {\n          questionText = currentQ.questionText || currentQ.question || currentQ.text || 'Question text not available';\n          Logger.debug('Using current question text instead');\n        }\n      }\n      \n      // Log to monitoring collection for admin dashboard\n      await addDoc(collection(db, 'monitoring'), {\n        candidateId: user.uid,\n        testId,\n        type: 'paste',\n        timestamp: serverTimestamp(),\n        description: `Content pasted in question ${qid}`,\n        severity: 'high',\n        questionId: qid,\n        questionText: questionText, // Store the actual question text\n        content: text.slice(0, 200), // Store more content for analysis\n        metadata: {\n          contentLength: text.length,\n          questionId: qid,\n          userAgent: navigator.userAgent\n        }\n      });\n      \n      // Keep legacy logging for backward compatibility\n      await addDoc(collection(db, 'pasteLogs'), {\n        candidateId: user.uid,\n        testId,\n        questionId: qid,\n        pasted: text.slice(0, 100),\n        timestamp: serverTimestamp()\n      });\n      \n      setAlerts(prev => [...prev, { msg: `Paste detected in question ${qid}.`, time: new Date() }]);\n      setShowAlert(true);\n    } catch (error) {\n      Logger.error('Error logging paste event', null, error);\n    }\n  }, [user, testId, sortedQuestions, current]);\n\n  // Enhanced monitoring for suspicious activities\n  const logMonitoringEvent = useCallback(async (type, description, severity = 'low', additionalData = {}) => {\n    Logger.debug('Attempting to log monitoring event', { type, description, severity, userId: user?.uid, testId });\n    \n    if (!user || !testId) {\n      Logger.warn('Monitoring: Missing user or testId', { userId: user?.uid, testId });\n      return;\n    }\n    \n    try {\n      // Get current question text if available\n      const currentQuestion = sortedQuestions?.[current];\n      let questionText = null;\n      \n      if (currentQuestion) {\n        questionText = currentQuestion.questionText || currentQuestion.question || currentQuestion.text;\n        Logger.debug('Found question text for monitoring event', { hasText: !!questionText });\n      } else {\n        Logger.debug('No current question found for monitoring event');\n      }\n      \n      const eventData = {\n        candidateId: user.uid,\n        testId,\n        type,\n        timestamp: serverTimestamp(),\n        description,\n        severity,\n        ...additionalData,\n        // Include question text if available\n        ...(questionText && { questionText }),\n        metadata: {\n          userAgent: navigator.userAgent,\n          currentQuestion: current + 1,\n          totalQuestions: sortedQuestions?.length || 0,\n          timeRemaining: secondsLeft,\n          ...additionalData.metadata\n        }\n      };\n      \n      Logger.debug('Monitoring event data prepared', { type, severity });\n      \n      const docRef = await addDoc(collection(db, 'monitoring'), eventData);\n      Logger.debug('Monitoring event logged successfully', { eventId: docRef.id });\n      \n    } catch (error) {\n      console.error(`❌ MONITORING: Error logging ${type} event:`, error);\n      console.error('Error details:', {\n        code: error.code,\n        message: error.message,\n        stack: error.stack\n      });\n    }\n  }, [user, testId, current, sortedQuestions, secondsLeft]);\n\n  // Copy detection\n  const handleCopy = useCallback(async () => {\n    Logger.debug('Copy event triggered');\n    if (!user || !testId) {\n      Logger.warn('Copy event: Missing user or testId', { userId: user?.uid, testId });\n      return;\n    }\n    try {\n      const selection = window.getSelection().toString();\n      Logger.debug('Copy event: Text selected', { textLength: selection.length });\n      if (selection.length > 0) {\n        Logger.debug('Logging copy event');\n        await logMonitoringEvent(\n          'copy',\n          `User copied text: \"${selection.slice(0, 50)}${selection.length > 50 ? '...' : ''}\"`,\n          'medium',\n          {\n            content: selection.slice(0, 200),\n            questionId: currentQuestion?.id,\n            metadata: {\n              selectionLength: selection.length,\n              questionType: currentQuestion?.questionType\n            }\n          }\n        );\n        setAlerts(prev => [...prev, { msg: 'Copy action detected.', time: new Date() }]);\n        setShowAlert(true);\n        Logger.debug('Copy event logged successfully');\n      } else {\n        Logger.debug('Copy event: No text selected, skipping log');\n      }\n    } catch (error) {\n      Logger.error('Error handling copy event', null, error);\n    }\n  }, [user, testId, currentQuestion, logMonitoringEvent]);\n\n  // Right-click detection\n  const handleRightClick = useCallback(async (e) => {\n    if (!user || !testId) {return;}\n    e.preventDefault(); // Prevent context menu\n    try {\n      await logMonitoringEvent(\n        'right_click',\n        'User attempted to right-click',\n        'low',\n        {\n          questionId: currentQuestion?.id,\n          metadata: {\n            x: e.clientX,\n            y: e.clientY,\n            target: e.target.tagName\n          }\n        }\n      );\n      setAlerts(prev => [...prev, { msg: 'Right-click detected.', time: new Date() }]);\n      setShowAlert(true);\n    } catch (error) {\n      Logger.error('Error handling right-click', null, error);\n    }\n  }, [user, testId, currentQuestion, logMonitoringEvent]);\n\n  // Keyboard shortcut detection\n  const handleKeyboardShortcut = useCallback(async (e) => {\n    if (!user || !testId) {return;}\n    \n    const suspiciousShortcuts = [\n      { keys: ['Control', 'c'], name: 'Ctrl+C (Copy)' },\n      { keys: ['Control', 'v'], name: 'Ctrl+V (Paste)' },\n      { keys: ['Control', 'a'], name: 'Ctrl+A (Select All)' },\n      { keys: ['Control', 'f'], name: 'Ctrl+F (Find)' },\n      { keys: ['Control', 'h'], name: 'Ctrl+H (History)' },\n      { keys: ['Control', 'j'], name: 'Ctrl+J (Downloads)' },\n      { keys: ['Control', 'shift', 'i'], name: 'Ctrl+Shift+I (DevTools)' },\n      { keys: ['F12'], name: 'F12 (DevTools)' },\n      { keys: ['Control', 'u'], name: 'Ctrl+U (View Source)' },\n      { keys: ['Control', 'shift', 'j'], name: 'Ctrl+Shift+J (Console)' },\n      // Tab switching shortcuts\n      { keys: ['Control', 'Tab'], name: 'Ctrl+Tab (Switch Tab)' },\n      { keys: ['Control', 'shift', 'Tab'], name: 'Ctrl+Shift+Tab (Switch Tab)' },\n      { keys: ['Control', 't'], name: 'Ctrl+T (New Tab)' },\n      { keys: ['Control', 'w'], name: 'Ctrl+W (Close Tab)' },\n      { keys: ['Control', 'n'], name: 'Ctrl+N (New Window)' },\n      { keys: ['Alt', 'Tab'], name: 'Alt+Tab (Switch Window)' },\n      { keys: ['Alt', 'F4'], name: 'Alt+F4 (Close Window)' },\n      { keys: ['Control', 'r'], name: 'Ctrl+R (Refresh)' },\n      { keys: ['F5'], name: 'F5 (Refresh)' },\n      { keys: ['Control', 'shift', 'r'], name: 'Ctrl+Shift+R (Hard Refresh)' }\n    ];\n\n    const pressedKeys = [];\n    if (e.ctrlKey) {pressedKeys.push('Control');}\n    if (e.shiftKey) {pressedKeys.push('Shift');}\n    if (e.altKey) {pressedKeys.push('Alt');}\n    if (e.key && !['Control', 'Shift', 'Alt'].includes(e.key)) {\n      pressedKeys.push(e.key.toLowerCase());\n    }\n\n    const matchedShortcut = suspiciousShortcuts.find(shortcut => {\n      return shortcut.keys.length === pressedKeys.length &&\n             shortcut.keys.every(key => pressedKeys.includes(key.toLowerCase()));\n    });\n\n    if (matchedShortcut) {\n      e.preventDefault();\n      try {\n        await logMonitoringEvent(\n          'keyboard_shortcut',\n          `Suspicious keyboard shortcut used: ${matchedShortcut.name}`,\n          'high',\n          {\n            shortcut: matchedShortcut.name,\n            keys: pressedKeys,\n            questionId: currentQuestion?.id,\n            metadata: {\n              keyCode: e.keyCode,\n              prevented: true\n            }\n          }\n        );\n        setAlerts(prev => [...prev, { msg: `Keyboard shortcut blocked: ${matchedShortcut.name}`, time: new Date() }]);\n        setShowAlert(true);\n      } catch (error) {\n        Logger.error('Error logging keyboard shortcut', null, error);\n      }\n    }\n  }, [user, testId, currentQuestion, logMonitoringEvent]);\n\n  // Set up all monitoring event listeners\n  useEffect(() => {\n    console.log('🔍 EVENT LISTENERS: Setting up monitoring listeners', { \n      hasTestData: !!testData, \n      isSubmitting, \n      user: user?.uid, \n      testId,\n      showInstructions\n    });\n    \n    if (!testData || isSubmitting || showInstructions) {\n      Logger.debug('Skipping event listener setup - conditions not met');\n      return;\n    }\n\n    Logger.debug('Adding event listeners');\n    \n    // Add event listeners\n    document.addEventListener('copy', handleCopy);\n    document.addEventListener('contextmenu', handleRightClick);\n    document.addEventListener('keydown', handleKeyboardShortcut);\n\n    Logger.debug('All monitoring event listeners added');\n\n    return () => {\n      Logger.debug('Removing event listeners');\n      // Remove event listeners\n      document.removeEventListener('copy', handleCopy);\n      document.removeEventListener('contextmenu', handleRightClick);\n      document.removeEventListener('keydown', handleKeyboardShortcut);\n      Logger.debug('All monitoring event listeners removed');\n    };\n  }, [testData, isSubmitting, showInstructions, handleCopy, handleRightClick, handleKeyboardShortcut, testId, user?.uid]);\n\n  // Keyboard navigation (separate from monitoring)\n  useEffect(() => {\n    const navHandler = (e) => {\n      if (isSubmitting || !sortedQuestions || showInstructions) {return;}\n      \n      // Only handle navigation keys when not in input fields\n      const target = e.target;\n      const isInputField = target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.contentEditable === 'true';\n      \n      if (isInputField) {return;}\n      \n      // Only handle navigation keys, let monitoring handle suspicious shortcuts\n      if (e.key === 'ArrowRight' && current < sortedQuestions.length - 1 && !e.ctrlKey && !e.shiftKey && !e.altKey) {\n        e.preventDefault();\n        setCurrent(c => c + 1);\n      } else if (e.key === 'ArrowLeft' && current > 0 && !e.ctrlKey && !e.shiftKey && !e.altKey) {\n        e.preventDefault();\n        setCurrent(c => c - 1);\n      }\n    };\n    \n    window.addEventListener('keydown', navHandler);\n    return () => window.removeEventListener('keydown', navHandler);\n  }, [current, sortedQuestions, isSubmitting, showInstructions]);\n\n  // UI helpers\n  const formatTime = (s) => `${String(Math.floor(s / 60)).padStart(2, '0')}:${String(s % 60).padStart(2, '0')}`;\n\n  // Blocked submission card\n  if (showBlockedCard) {\n    return <BlockedSubmissionCard message={blockMessage} />;\n  }\n\n  // Password prompt modal\n  if (showPasswordPrompt) {\n    return (\n      <div className=\"password-prompt-overlay\">\n        <div className=\"password-prompt\">\n          <h2>Enter Test Password</h2>\n          <p>This test is password protected. Please enter the password to continue.</p>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Enter password\"\n            className=\"password-input\"\n            onKeyPress={(e) => e.key === 'Enter' && verifyPassword()}\n          />\n          {passwordError && <div className=\"error-message\">{passwordError}</div>}\n          <button \n            onClick={verifyPassword}\n            className=\"btn btn-primary\"\n            disabled={!password.trim()}\n          >\n            Enter In Test 🚀\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // Instructions page modal\n  if (showInstructions) {\n    return (\n      <div className=\"instructions-overlay\">\n        <div className=\"instructions-container\">\n          <div className=\"instructions-header\">\n            <h1>{testData.title}</h1>\n            <div className=\"test-info\" />\n          </div>\n\n          <div className=\"instructions-content\">\n            <div className=\"instruction-card\">\n              <div className=\"card-header\">\n                <h3>📝 Test Details</h3>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"test-details\">\n                  <div className=\"detail-item\">\n                    <span className=\"detail-label\">Duration:</span>\n                    <span className=\"detail-value\">{testData.duration}</span>\n                  </div>\n                  <div className=\"detail-item\">\n                    <span className=\"detail-label\">Total Questions:</span>\n                    <span className=\"detail-value\">{sortedQuestions?.length || 0}</span>\n                  </div>\n                  <div className=\"detail-item\">\n                    <span className=\"detail-label\">Total Marks:</span>\n                    <span className=\"detail-value\">\n                      {sortedQuestions?.reduce((sum, q) => sum + (q.marks || 1), 0) || 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"instruction-card rules-card\">\n              <div className=\"card-header\">\n                <h3>⚠️ Important Rules</h3>\n              </div>\n              <div className=\"card-body\">\n                <ul className=\"rules-list\">\n                  <li>🚫 <strong>Do not switch tabs,</strong> after tab switch test will be auto-submitted</li>\n                  <li>🚫 <strong>Do not copy/paste</strong> All copy-paste activities are logged</li>\n                  <li>🚫 <strong>Do not right-click</strong> or use keyboard shortcuts</li>\n                  <li>⏰ <strong>Submit before time runs out</strong> - test will auto-submit when time expires</li>\n                  <li>💾 <strong>Your answers are saved automatically</strong> as you type</li>\n                  <li>🔄 <strong>You can navigate between questions</strong> using the question numbers</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"instruction-card tips-card\">\n              <div className=\"card-header\">\n                <h3>💡 Tips for Success</h3>\n              </div>\n              <div className=\"card-body\">\n                <ul className=\"tips-list\">\n                  <li>✅ Read each question carefully before answering</li>\n                  <li>✅ Manage your time wisely across all questions</li>\n                  <li>✅ Use the question navigation to review your answers</li>\n                  <li>✅ Ensure stable internet connection throughout the test</li>\n                  <li>✅ Submit your test before the timer expires</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"instructions-footer\">\n            <div className=\"footer-warning\">\n              <span className=\"warning-icon\">⚠️</span>\n              <p>By clicking \"Start Test\", you agree to follow all test rules and understand that violations will be monitored and may result in test termination.</p>\n            </div>\n            <button \n              onClick={startTest}\n              className=\"start-test-btn\"\n            >\n              🚀 Start Test\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return <Loading message=\"Loading test\" subtext=\"Preparing your test environment\" />;\n  }\n  if (errMsg) {return <div className=\"test-container\"><div className=\"test-card\">Error: {errMsg}</div></div>;}\n  if (!testData) {return <div className=\"test-container\"><div className=\"test-card\">Test not found</div></div>;}\n  if (!user) {return <div className=\"test-container\"><div className=\"test-card\">Please log in</div></div>;}\n\n  return (\n    <div className=\"test-runner\">\n      <div className=\"test-container\">\n        <div className=\"test-header sticky\">\n          <button\n            className=\"btn btn-outline\"\n            onClick={() => current > 0 && setCurrent(current - 1)}\n            disabled={current === 0}\n          >← Previous</button>\n          <div className=\"text-lg font-medium text-primary\">\n            Question {current + 1} of {sortedQuestions.length}\n          </div>\n          <div className={`timer ${secondsLeft < 300 ? 'danger' : secondsLeft < 600 ? 'warning' : ''}`}>\n            Time: {formatTime(secondsLeft)}\n          </div>\n          <div className={`connection-status ${netStatus}`}>\n            {netStatus === 'online' ? '🟢 Online' : netStatus === 'offline' ? '🔴 Offline' : '🟡 Checking...'}\n          </div>\n{process.env.NODE_ENV === 'development' && (\n            <>\n              <button\n                className=\"btn btn-outline\"\n                onClick={async () => {\n                  Logger.debug('Creating manual monitoring event');\n                  try {\n                    await logMonitoringEvent(\n                      'manual_test',\n                      'Manual test event triggered by user',\n                      'low',\n                      { manualTest: true }\n                    );\n                    showSuccess('Test monitoring event created! Check admin dashboard.');\n                  } catch (error) {\n                    Logger.error('Manual test error', null, error);\n                    showError('Error creating test event: ' + error.message, error);\n                  }\n                }}\n                style={{ fontSize: '0.75rem', padding: '0.25rem 0.5rem' }}\n              >\n                Test Monitor\n              </button>\n              <button\n                className=\"btn btn-secondary\"\n                onClick={async () => {\n                  Logger.debug('Testing direct Firestore write');\n                  try {\n                    const result = await addDoc(collection(db, 'monitoring'), {\n                      candidateId: user?.uid || 'test-user',\n                      testId: testId || 'test-id',\n                      type: 'direct_test',\n                      timestamp: new Date(),\n                      description: 'Direct Firestore test',\n                      severity: 'info',\n                      test: true\n                    });\n                    Logger.info('Direct test success', { resultId: result.id });\n                    showSuccess('✅ Monitoring event created successfully! ID: ' + result.id);\n                  } catch (error) {\n                    Logger.error('Direct test failed', null, error);\n                    showError('❌ Error: ' + error.message, error);\n                  }\n                }}\n                style={{ fontSize: '0.75rem', padding: '0.25rem 0.5rem', marginLeft: '0.5rem' }}\n              >\n                Test DB\n              </button>\n            </>\n          )}\n          <button\n            className=\"btn btn-primary\"\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              Logger.debug('Submit button clicked');\n              handleSubmit();\n            }}\n            disabled={isSubmitting}\n            style={{ \n              cursor: isSubmitting ? 'not-allowed' : 'pointer',\n              opacity: isSubmitting ? 0.6 : 1,\n              pointerEvents: 'auto'\n            }}\n          >\n            {isSubmitting ? 'Submitting...' : 'Submit Test'}\n          </button>\n        </div>\n        {showAlert && alerts.length > 0 && (\n          <div className=\"warning-banner\">\n            <div className=\"warning-content\">\n              <div className=\"warning-icon\">⚠️</div>\n              <div className=\"warning-text\">\n                <strong>Warning:</strong> {alerts[alerts.length - 1].msg}\n              </div>\n              <button className=\"warning-close\" onClick={() => setShowAlert(false)}>×</button>\n            </div>\n          </div>\n        )}\n        <div className=\"test-progress\">\n          <div\n            className=\"test-progress-bar\"\n            style={{ width: `${Math.round(((current + 1) / (sortedQuestions.length || 1)) * 100)}%` }}\n          />\n        </div>\n        \n        {/* Security Notice */}\n        <div className=\"security-notice\" style={{\n          background: '#fef3c7',\n          border: '1px solid #f59e0b',\n          borderRadius: '0.5rem',\n          padding: '0.75rem 1rem',\n          margin: '1rem 0',\n          fontSize: '0.875rem',\n          color: '#92400e'\n        }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n              <span>🔒</span>\n              <strong>Security Notice:</strong> Tab switching, keyboard shortcuts, and right-clicking are monitored and restricted during this test. Please stay on this page to avoid violations.\n            </div>\n            <div style={{ fontSize: '0.75rem', color: '#78350f' }}>\n              Tab Switches: {tabSwitches}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"test-content\">\n          {currentQuestion ? (\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"question-content\">\n                  <div className=\"text-xl font-semibold mb-6 text-primary\">\n                    {currentQuestion.questionText || currentQuestion.question || currentQuestion.text || 'No question text'}\n                  </div>\n                  {currentQuestion.imageUrl && currentQuestion.imageUrl.trim() && (\n                    <div className=\"question-image\">\n                      <img \n                        src={currentQuestion.imageUrl} \n                        alt=\"Question illustration\"\n                        className=\"question-img\"\n                        onError={(e) => {\n                          console.error('Failed to load image:', currentQuestion.imageUrl);\n                          e.target.style.display = 'none';\n                        }}\n                      />\n                    </div>\n                  )}\n                </div>\n                {currentQuestion.questionType === 'mcq' && (\n                  <div>\n                    <div className=\"space-y-3 mb-6\">\n                      {currentQuestion.options?.map((opt, i) => (\n                        <label key={i} className=\"flex items-center gap-3 cursor-pointer p-3 rounded-lg hover:bg-gray-50 transition-colors\">\n                          <input\n                            type=\"radio\"\n                            name={`q-${currentQuestion.id}`}\n                            value={opt}\n                            checked={userAnswers[currentQuestion.id] === opt}\n                            onChange={e => setUserAnswers(ans => ({ ...ans, [currentQuestion.id]: e.target.value }))}\n                            className=\"w-4 h-4 text-primary\"\n                          />\n                          <span className=\"text-base\">{opt}</span>\n                        </label>\n                      ))}\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-secondary mb-2\">Notes (Optional)</label>\n                      <textarea\n                        className=\"textarea\"\n                        placeholder=\"Add notes...\"\n                        rows={4}\n                        value={userAnswers[`${currentQuestion.id}_notes`] || ''}\n                        onChange={e => setUserAnswers(ans => ({ ...ans, [`${currentQuestion.id}_notes`]: e.target.value }))}\n                        onPaste={e => handlePaste(`${currentQuestion.id}_notes`, e.clipboardData.getData('text'))}\n                      />\n                    </div>\n                  </div>\n                )}\n                {currentQuestion.questionType === 'long' && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-secondary mb-2\">Your Answer</label>\n                    <textarea\n                      className=\"textarea\"\n                      placeholder=\"Type your answer...\"\n                      rows={8}\n                      value={userAnswers[currentQuestion.id] || ''}\n                      onChange={e => setUserAnswers(ans => ({ ...ans, [currentQuestion.id]: e.target.value }))}\n                      onPaste={e => handlePaste(currentQuestion.id, e.clipboardData.getData('text'))}\n                    />\n                  </div>\n                )}\n                {currentQuestion.questionType === 'code' && (\n                  <div>\n                    <div className=\"code-question-header\">\n                      <label className=\"block text-sm font-medium text-secondary mb-2\">Your Code</label>\n                      <div className=\"language-selector-container\">\n                        <label className=\"language-selector-label\">Language:</label>\n                        <select \n                          className=\"language-selector\"\n                          value={selectedLanguage}\n                          onChange={(e) => {\n                            const newLang = e.target.value;\n                            setSelectedLanguage(newLang);\n                            // Update answer with new template if current answer is empty or default\n                            const currentAnswer = userAnswers[currentQuestion.id] || '';\n                            if (!currentAnswer.trim() || currentAnswer === getCodePlaceholder(selectedLanguage)) {\n                              setUserAnswers(ans => ({ \n                                ...ans, \n                                [currentQuestion.id]: getCodePlaceholder(newLang) \n                              }));\n                            }\n                          }}\n                        >\n                          {availableLanguages.map(lang => {\n                            const langInfo = getLanguageInfo(lang);\n                            return (\n                              <option key={lang} value={lang}>\n                                {langInfo.icon} {langInfo.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"code-editor-container\">\n                      <div className=\"code-editor-header\">\n                        <div className=\"code-editor-tabs\">\n                          <span className=\"code-tab active\">\n                            <span className=\"code-icon\">{getLanguageInfo(selectedLanguage).icon}</span>\n                            solution.{getFileExtension(selectedLanguage)}\n                          </span>\n                        </div>\n                        <div className=\"code-editor-actions\">\n                          <span \n                            className=\"language-badge\"\n                            style={{ \n                              backgroundColor: `${getLanguageInfo(selectedLanguage).color}20`,\n                              color: getLanguageInfo(selectedLanguage).color,\n                              borderColor: `${getLanguageInfo(selectedLanguage).color}40`\n                            }}\n                          >\n                            {getLanguageInfo(selectedLanguage).name.toUpperCase()}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"code-editor-wrapper\">\n                        <div className=\"line-numbers\">\n                          {Array.from({ length: Math.max(12, (userAnswers[currentQuestion.id] || getCodePlaceholder(selectedLanguage)).split('\\n').length) }, (_, i) => (\n                            <div key={i + 1} className=\"line-number\">{i + 1}</div>\n                          ))}\n                        </div>\n                        <textarea\n                          className=\"code-textarea\"\n                          placeholder={getCodePlaceholder(selectedLanguage)}\n                          rows={12}\n                          value={userAnswers[currentQuestion.id] || getCodePlaceholder(selectedLanguage)}\n                          onChange={e => {\n                            setUserAnswers(ans => ({ ...ans, [currentQuestion.id]: e.target.value }));\n                          }}\n                          onPaste={e => handlePaste(currentQuestion.id, e.clipboardData.getData('text'))}\n                          onScroll={e => {\n                            // Sync scroll with line numbers\n                            const lineNumbers = e.target.parentElement.querySelector('.line-numbers');\n                            if (lineNumbers) {\n                              lineNumbers.scrollTop = e.target.scrollTop;\n                            }\n                          }}\n                          onFocus={e => {\n                            // If textarea has placeholder content, select it on first focus\n                            const currentValue = userAnswers[currentQuestion.id] || getCodePlaceholder(selectedLanguage);\n                            if (currentValue === getCodePlaceholder(selectedLanguage)) {\n                              e.target.select();\n                            }\n                          }}\n                          spellCheck={false}\n                        />\n                      </div>\n                      <div className=\"code-editor-footer\">\n                        <div className=\"code-stats\">\n                          Lines: {(userAnswers[currentQuestion.id] || '').split('\\n').length} | \n                          Characters: {(userAnswers[currentQuestion.id] || '').length}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className=\"card\">\n              <div className=\"card-body text-center\">\n                <div className=\"text-lg text-secondary\">No questions available.</div>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"test-footer\">\n          <div className=\"question-nav\">\n            {sortedQuestions.map((q, i) => (\n              <button\n                key={i}\n                className={`question-nav-btn ${i === current ? 'active' : ''} ${userAnswers[q.id] ? 'answered' : ''}`}\n                onClick={() => !isSubmitting && setCurrent(i)}\n                disabled={isSubmitting}\n                title={`Question ${i + 1} (${q.marks || 1} marks)${userAnswers[q.id] ? ' - Answered' : ''}`}\n              >\n                {i + 1}\n              </button>\n            ))}\n          </div>\n          <div className=\"flex gap-2\">\n            <button\n              className=\"btn btn-outline\"\n              onClick={() => current < sortedQuestions.length - 1 && setCurrent(current + 1)}\n              disabled={current >= sortedQuestions.length - 1 || isSubmitting}\n            >\n              {current >= sortedQuestions.length - 1 ? 'Last Question' : 'Next →'}\n            </button>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => showInfo('Progress is auto-saved!')}\n            >\n              Save Progress\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TestRunner;\n","\nfunction BlockedSubmissionCard({ message, onClose }) {\n  // const navigate = useNavigate(); // Commented out as not currently used\n\n  return (\n    <div className=\"blocked-overlay\" style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      zIndex: 1000\n    }}>\n      <div className=\"blocked-card\" style={{\n        backgroundColor: 'white',\n        borderRadius: '12px',\n        padding: '32px',\n        maxWidth: '500px',\n        margin: '20px',\n        textAlign: 'center',\n        boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',\n        border: '2px solid #ef4444'\n      }}>\n        <div style={{\n          fontSize: '64px',\n          color: '#ef4444',\n          marginBottom: '16px'\n        }}>\n          🚫\n        </div>\n        <h2 style={{\n          color: '#ef4444',\n          marginBottom: '16px',\n          fontSize: '24px',\n          fontWeight: 'bold'\n        }}>\n          Multiple Submissions Not Allowed\n        </h2>\n        <p style={{\n          color: '#6b7280',\n          marginBottom: '24px',\n          lineHeight: '1.6',\n          fontSize: '16px'\n        }}>\n          {message || 'This test does not allow multiple submissions. You have already submitted this test. Please contact your domain head if you need to retake this test.'}\n        </p>\n        <div style={{\n          backgroundColor: '#fef2f2',\n          border: '1px solid #fecaca',\n          borderRadius: '8px',\n          padding: '12px',\n          marginBottom: '24px'\n        }}>\n          <div style={{\n            fontSize: '14px',\n            color: '#dc2626',\n            fontWeight: '500'\n          }}>\n            📋 Contact Information\n          </div>\n          <div style={{\n            fontSize: '14px',\n            color: '#7f1d1d',\n            marginTop: '4px'\n          }}>\n            Please reach out to your domain head or administrator for assistance with test retakes or additional attempts.\n          </div>\n        </div>\n        <div style={{\n          display: 'flex',\n          gap: '12px',\n          justifyContent: 'center',\n          flexWrap: 'wrap'\n        }}>\n\n\n            {onClose && (\n              <button\n                onClick={onClose}\n                className=\"btn btn-outline\"\n                style={{\n                  backgroundColor: 'transparent',\n                  color: '#6b7280',\n                  padding: '12px 24px',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  cursor: 'pointer',\n                  fontSize: '16px',\n                  fontWeight: '500'\n                }}\n              >\n                Close\n              </button>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default BlockedSubmissionCard;\n","import React from 'react';\nimport './Loading.css';\n\nfunction Loading({ \n  message = \"Loading\", \n  subtext = \"Please wait...\", \n  size = \"normal\",\n  variant = \"dashboard\" \n}) {\n  if (variant === \"inline\") {\n    return (\n      <div className={`inline-loading ${size}`}>\n        <div className=\"inline-spinner\">\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n        </div>\n        <span className=\"inline-text\">{message}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-loading\">\n      <div className=\"loading-content\">\n        <div className=\"loading-logo\">TESTIFY</div>\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n          <div className=\"spinner-ring\" />\n        </div>\n        <div className=\"loading-text\">\n          {message}\n          <div className=\"loading-dots\">\n            <div className=\"loading-dot\" />\n            <div className=\"loading-dot\" />\n            <div className=\"loading-dot\" />\n          </div>\n        </div>\n        <div className=\"loading-subtext\">{subtext}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n"],"names":["async","fetchTestWithQuestions","testId","testRef","doc","db","testSnap","getDoc","exists","questions","getDocs","collection","docs","map","d","questionData","data","_objectSpread","id","questionId","showSuccess","message","callback","arguments","length","undefined","includes","alert","setTimeout","showError","showInfo","confirmAction","onConfirm","onCancel","result","window","confirm","getCodePlaceholder","language","toLowerCase","getLanguageInfo","name","color","icon","toUpperCase","availableLanguages","_currentQuestion$opti","useParams","navigate","useNavigate","user","userDoc","useFirebase","isLoading","setIsLoading","useState","errMsg","setErrMsg","testData","setTestData","current","setCurrent","secondsLeft","setSecondsLeft","userAnswers","setUserAnswers","isSubmitting","setIsSubmitting","tabSwitches","setTabSwitches","alerts","setAlerts","showAlert","setShowAlert","startTime","setStartTime","password","setPassword","showPasswordPrompt","setShowPasswordPrompt","passwordError","setPasswordError","showInstructions","setShowInstructions","netStatus","setNetStatus","showBlockedCard","setShowBlockedCard","blockMessage","setBlockMessage","selectedLanguage","setSelectedLanguage","autoSubmitTriggered","useRef","sortedQuestions","useMemo","sort","a","b","marks","marksPerQuestion","currentQuestion","getCandidateName","useCallback","Logger","debug","userId","uid","trim","userDocRef","userSnapshot","userData","email","extractedName","split","warn","error","handleSubmit","isAutoSubmit","info","allowMultiple","allowMultipleSubmissions","confirmMessage","Error","existingSubmissionsQuery","query","where","existingSubmissions","existingCount","size","totalMarks","reduce","sum","q","concat","Number","candidateName","payload","candidateId","testTitle","title","answers","score","status","submittedAt","Date","startedAt","totalQuestions","answeredQuestions","Object","values","filter","String","hasAnswers","answerCount","keys","latestSubmission","updateDoc","ref","submissionNumber","previousSubmissionId","updatedAt","submissionId","docRef","addDoc","err","_err$message","code","msg","autoSubmit","violation","reason","alertCount","action","timestamp","evidence","verifyPassword","type","serverTimestamp","description","severity","metadata","userAgent","navigator","passwordProtected","attemptedPassword","slice","startTest","submissionCount","shouldBlock","attemptNumber","mins","durationString","minMatch","match","hourMatch","totalMinutes","parseInt","numMatch","parseDurationToMinutes","duration","toISOString","useEffect","_test$questions","test","hasQuestions","questionCount","fetchData","interval","setInterval","prev","clearInterval","checkNet","online","fetch","method","cache","ok","_unused","onLine","monitorConnection","_unused2","poll","visibilityChangeHandler","document","hidden","eventType","newCount","prevAlerts","time","handleTabSwitchEvent","beforeUnloadHandler","e","preventDefault","returnValue","addEventListener","removeEventListener","handlePaste","qid","text","find","questionText","question","availableQuestions","currentQ","content","contentLength","pasted","logMonitoringEvent","additionalData","hasText","eventData","timeRemaining","eventId","console","stack","handleCopy","selection","getSelection","toString","textLength","selectionLength","questionType","handleRightClick","x","clientX","y","clientY","target","tagName","handleKeyboardShortcut","pressedKeys","ctrlKey","push","shiftKey","altKey","key","matchedShortcut","shortcut","every","keyCode","prevented","log","hasTestData","navHandler","contentEditable","c","_jsx","BlockedSubmissionCard","className","children","_jsxs","value","onChange","placeholder","onKeyPress","onClick","disabled","Loading","subtext","s","Math","floor","padStart","process","stopPropagation","style","cursor","opacity","pointerEvents","width","round","background","border","borderRadius","padding","margin","fontSize","display","alignItems","justifyContent","gap","imageUrl","src","alt","onError","options","opt","i","checked","ans","rows","onPaste","clipboardData","getData","newLang","currentAnswer","lang","langInfo","backgroundColor","borderColor","Array","from","max","_","onScroll","lineNumbers","parentElement","querySelector","scrollTop","onFocus","select","spellCheck","_ref","onClose","position","top","left","right","bottom","zIndex","maxWidth","textAlign","boxShadow","marginBottom","fontWeight","lineHeight","marginTop","flexWrap","variant"],"sourceRoot":""}
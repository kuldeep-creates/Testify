{"version":3,"file":"static/js/25.62adc204.chunk.js","mappings":"6IAUO,MAAMA,EAAc,SAACC,GAA8B,IAArBC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAI1CF,EAAQK,SAAS,aAAeL,EAAQK,SAAS,cAAgBL,EAAQK,SAAS,aACpFC,MAAMN,GAGJC,GACFM,WAAWN,EAAU,IAEzB,EAQaO,EAAY,SAACR,GAA4C,IAArBC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAI1DI,MAAMN,GAEFC,GACFM,WAAWN,EAAU,IAEzB,EAoBaQ,EAAW,SAACT,GAA8B,IAArBC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAGvCD,GACFM,WAAWN,EAAU,IAEzB,EAQaS,EAAgB,SAACV,GAAgD,IAAvCW,EAAST,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMU,EAAQV,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAClE,MAAMW,EAASC,OAAOC,QAAQf,GAQ9B,OANIa,GAAUF,EACZA,KACUE,GAAUD,GACpBA,IAGKC,CACT,C,uHCtEe,SAASG,IACtB,MAAOC,IAAgBC,EAAAA,EAAAA,MACjBC,GAAWC,EAAAA,EAAAA,MAgEjB,OA9DAC,EAAAA,EAAAA,WAAU,KACaC,WACnB,MAAMC,EAAON,EAAaO,IAAI,QACxBC,EAAUR,EAAaO,IAAI,WAIjC,IAAKC,EAGH,OAFAjB,EAAAA,EAAAA,IAAU,uDACVW,EAAS,UAIX,IACE,OAAQI,GACN,IAAK,oBACGG,EAAAA,EAAAA,IAAgBC,EAAAA,GAAMF,IAC5B1B,EAAAA,EAAAA,IAAY,4DAEZoB,EAAS,mBACT,MAEF,IAAK,gBAEHA,EAAS,2BAADS,OAA4BH,IACpC,MAEF,IAAK,qBAEGC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAMF,IAC5B1B,EAAAA,EAAAA,IAAY,gFACZoB,EAAS,UACT,MAEF,QACE,MAAM,IAAIU,MAAM,kBAEtB,CAAE,MAAOC,GACPC,EAAAA,EAAOD,MAAM,6BAA8B,CACzCE,UAAWF,EAAMG,KACjBC,aAAcJ,EAAM9B,QACpBuB,OACAE,YAGF,MAAMU,EAAgB,CACpB,2BAA4B,yDAC5B,2BAA4B,iDAC5B,qBAAsB,kCACtB,sBAAuB,yCACvB,qBAAsB,4BACtB,QAAW,uEAGb3B,EAAAA,EAAAA,IAAU2B,EAAcL,EAAMG,OAASE,EAAuB,SAC9DhB,EAAS,SACX,GAGFiB,IACC,CAACjB,EAAUF,KAGZoB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,UACvCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4BACfD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,uBAAsBC,SAAC,6BACrCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,sBAAqBC,SAAC,mDAI3C,C","sources":["utils/notifications.js","components/Auth/FirebaseActionHandler.js"],"sourcesContent":["/**\n * Notification utility to replace alert() calls\n * Provides better UX with toast notifications or proper error handling\n */\n\n/**\n * Show success notification\n * @param {string} message - Success message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showSuccess = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical success messages that require user acknowledgment\n  if (message.includes('exported') || message.includes('submitted') || message.includes('updated')) {\n    alert(message);\n  }\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show error notification\n * @param {string} message - Error message to display\n * @param {Error} error - Optional error object for logging\n * @param {Function} callback - Optional callback after notification\n */\nexport const showError = (message, error = null, callback = null) => {\n  // Silent in development - no console output\n  \n  // Show alert for critical errors that require immediate user attention\n  alert(message);\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show warning notification\n * @param {string} message - Warning message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showWarning = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Show info notification\n * @param {string} message - Info message to display\n * @param {Function} callback - Optional callback after notification\n */\nexport const showInfo = (message, callback = null) => {\n  // Silent in development - no console output\n  \n  if (callback) {\n    setTimeout(callback, 100);\n  }\n};\n\n/**\n * Confirm action with user\n * @param {string} message - Confirmation message\n * @param {Function} onConfirm - Callback if user confirms\n * @param {Function} onCancel - Callback if user cancels\n */\nexport const confirmAction = (message, onConfirm = null, onCancel = null) => {\n  const result = window.confirm(message);\n  \n  if (result && onConfirm) {\n    onConfirm();\n  } else if (!result && onCancel) {\n    onCancel();\n  }\n  \n  return result;\n};\n","import { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { applyActionCode } from 'firebase/auth';\nimport { auth } from '../../firebase';\nimport { showError, showSuccess } from '../../utils/notifications';\nimport Logger from '../../utils/logger';\nimport './FirebaseActionHandler.css';\n\n/**\n * Handles Firebase email action links (email verification, password reset, etc.)\n * This component should be rendered at the /__/auth/action route in your app\n */\nexport default function FirebaseActionHandler() {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const handleAction = async () => {\n      const mode = searchParams.get('mode');\n      const oobCode = searchParams.get('oobCode');\n      // const continueUrl = searchParams.get('continueUrl');\n      // const lang = searchParams.get('lang') || 'en';\n\n      if (!oobCode) {\n        showError('Invalid action link. Please request a new one.');\n        navigate('/login');\n        return;\n      }\n\n      try {\n        switch (mode) {\n          case 'verifyEmail':\n            await applyActionCode(auth, oobCode);\n            showSuccess('Email verified successfully! Redirecting to home page...');\n            // Redirect to home page after verification\n            navigate('/?verified=true');\n            break;\n\n          case 'resetPassword':\n            // Handle password reset - redirect to password reset page with the code\n            navigate(`/reset-password?oobCode=${oobCode}`);\n            break;\n\n          case 'recoverEmail':\n            // Handle email recovery\n            await applyActionCode(auth, oobCode);\n            showSuccess('Email recovered successfully! You can now sign in with your recovered email.');\n            navigate('/login');\n            break;\n\n          default:\n            throw new Error('Invalid action');\n        }\n      } catch (error) {\n        Logger.error('Error handling action code', {\n          errorCode: error.code,\n          errorMessage: error.message,\n          mode,\n          oobCode\n        });\n\n        const errorMessages = {\n          'auth/expired-action-code': 'The action link has expired. Please request a new one.',\n          'auth/invalid-action-code': 'Invalid action link. Please request a new one.',\n          'auth/user-disabled': 'This account has been disabled.',\n          'auth/user-not-found': 'No user found with this email address.',\n          'auth/weak-password': 'The password is too weak.',\n          'default': 'An error occurred while processing your request. Please try again.'\n        };\n\n        showError(errorMessages[error.code] || errorMessages['default']);\n        navigate('/login');\n      }\n    };\n\n    handleAction();\n  }, [navigate, searchParams]);\n\n  return (\n    <div className=\"action-handler-container\">\n      <div className=\"action-handler-card\">\n        <div className=\"action-handler-spinner\" />\n        <h2 className=\"action-handler-title\">Processing your request</h2>\n        <p className=\"action-handler-text\">Please wait while we verify your action...</p>\n      </div>\n    </div>\n  );\n}\n"],"names":["showSuccess","message","callback","arguments","length","undefined","includes","alert","setTimeout","showError","showInfo","confirmAction","onConfirm","onCancel","result","window","confirm","FirebaseActionHandler","searchParams","useSearchParams","navigate","useNavigate","useEffect","async","mode","get","oobCode","applyActionCode","auth","concat","Error","error","Logger","errorCode","code","errorMessage","errorMessages","handleAction","_jsx","className","children","_jsxs"],"sourceRoot":""}